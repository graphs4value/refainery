Starting a Gradle Daemon, 2 busy Daemons could not be reused, use --status for details
Type-safe dependency accessors is an incubating feature.
> Task :buildSrc:extractPluginRequests UP-TO-DATE
> Task :buildSrc:generatePluginAdapters UP-TO-DATE
> Task :buildSrc:compileJava UP-TO-DATE
> Task :buildSrc:compileGroovy NO-SOURCE
> Task :buildSrc:compileGroovyPlugins UP-TO-DATE
> Task :buildSrc:pluginDescriptors UP-TO-DATE
> Task :buildSrc:processResources UP-TO-DATE
> Task :buildSrc:classes UP-TO-DATE
> Task :buildSrc:jar UP-TO-DATE
> Task :buildSrc:assemble UP-TO-DATE
> Task :buildSrc:pluginUnderTestMetadata UP-TO-DATE
> Task :buildSrc:compileTestJava NO-SOURCE
> Task :buildSrc:compileTestGroovy NO-SOURCE
> Task :buildSrc:processTestResources NO-SOURCE
> Task :buildSrc:testClasses UP-TO-DATE
> Task :buildSrc:test NO-SOURCE
> Task :buildSrc:validatePlugins UP-TO-DATE
> Task :buildSrc:check UP-TO-DATE
> Task :buildSrc:build UP-TO-DATE
> Task :refinery-store:compileJava UP-TO-DATE
> Task :refinery-store:processResources NO-SOURCE
> Task :refinery-store:classes UP-TO-DATE
> Task :refinery-store:compileTestJava UP-TO-DATE
> Task :refinery-store:processTestResources NO-SOURCE
> Task :refinery-store:testClasses UP-TO-DATE
> Task :refinery-store:compileJmhJava
> Task :refinery-store:processJmhResources NO-SOURCE
> Task :refinery-store:jmhClasses

> Task :refinery-store:jmh
# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 0.00% complete, ETA 01:28:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 0.19% complete, ETA 01:32:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 0.38% complete, ETA 01:32:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.041 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.037 ms/op
Iteration   1: 0.037 ms/op
Iteration   2: 0.037 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.037 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.037 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.037, 0.037, 0.037), stdev = 0.001
  CI (99.9%): [0.035, 0.038] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 0.57% complete, ETA 01:32:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.042 ms/op
# Warmup Iteration   2: 0.036 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.036 ms/op
# Warmup Iteration   5: 0.037 ms/op
Iteration   1: 0.036 ms/op
Iteration   2: 0.036 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.036 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.036, 0.036, 0.037), stdev = 0.001
  CI (99.9%): [0.036, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 0.76% complete, ETA 01:32:09
# Fork: 1 of 1
# Warmup Iteration   1: 10.000 ms/op
# Warmup Iteration   2: 10.595 ms/op
# Warmup Iteration   3: 9.374 ms/op
# Warmup Iteration   4: 9.040 ms/op
# Warmup Iteration   5: 8.385 ms/op
Iteration   1: 8.821 ms/op
Iteration   2: 9.491 ms/op
Iteration   3: 8.364 ms/op
Iteration   4: 9.117 ms/op
Iteration   5: 10.983 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  9.355 ±(99.9%) 3.848 ms/op [Average]
  (min, avg, max) = (8.364, 9.355, 10.983), stdev = 0.999
  CI (99.9%): [5.508, 13.203] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 0.95% complete, ETA 01:32:36
# Fork: 1 of 1
# Warmup Iteration   1: 11.573 ms/op
# Warmup Iteration   2: 10.138 ms/op
# Warmup Iteration   3: 9.873 ms/op
# Warmup Iteration   4: 10.232 ms/op
# Warmup Iteration   5: 10.495 ms/op
Iteration   1: 12.177 ms/op
Iteration   2: 11.472 ms/op
Iteration   3: 11.787 ms/op
Iteration   4: 11.248 ms/op
Iteration   5: 12.211 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  11.779 ±(99.9%) 1.635 ms/op [Average]
  (min, avg, max) = (11.248, 11.779, 12.211), stdev = 0.425
  CI (99.9%): [10.144, 13.414] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 1.14% complete, ETA 01:32:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 1.33% complete, ETA 01:32:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 1.52% complete, ETA 01:32:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.080 ms/op
# Warmup Iteration   2: 0.075 ms/op
# Warmup Iteration   3: 0.073 ms/op
# Warmup Iteration   4: 0.074 ms/op
# Warmup Iteration   5: 0.074 ms/op
Iteration   1: 0.073 ms/op
Iteration   2: 0.073 ms/op
Iteration   3: 0.073 ms/op
Iteration   4: 0.074 ms/op
Iteration   5: 0.073 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.073 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.073, 0.073, 0.074), stdev = 0.001
  CI (99.9%): [0.071, 0.075] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 1.70% complete, ETA 01:31:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.081 ms/op
# Warmup Iteration   2: 0.072 ms/op
# Warmup Iteration   3: 0.073 ms/op
# Warmup Iteration   4: 0.074 ms/op
# Warmup Iteration   5: 0.073 ms/op
Iteration   1: 0.073 ms/op
Iteration   2: 0.074 ms/op
Iteration   3: 0.074 ms/op
Iteration   4: 0.073 ms/op
Iteration   5: 0.073 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.073 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.073, 0.073, 0.074), stdev = 0.001
  CI (99.9%): [0.071, 0.075] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 1.89% complete, ETA 01:31:41
# Fork: 1 of 1
# Warmup Iteration   1: 20.684 ms/op
# Warmup Iteration   2: 19.674 ms/op
# Warmup Iteration   3: 19.751 ms/op
# Warmup Iteration   4: 21.595 ms/op
# Warmup Iteration   5: 22.712 ms/op
Iteration   1: 21.611 ms/op
Iteration   2: 24.947 ms/op
Iteration   3: 22.851 ms/op
Iteration   4: 22.144 ms/op
Iteration   5: 24.929 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  23.297 ±(99.9%) 6.013 ms/op [Average]
  (min, avg, max) = (21.611, 23.297, 24.947), stdev = 1.562
  CI (99.9%): [17.283, 29.310] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 2.08% complete, ETA 01:31:51
# Fork: 1 of 1
# Warmup Iteration   1: 22.992 ms/op
# Warmup Iteration   2: 20.026 ms/op
# Warmup Iteration   3: 20.317 ms/op
# Warmup Iteration   4: 27.248 ms/op
# Warmup Iteration   5: 22.717 ms/op
Iteration   1: 22.376 ms/op
Iteration   2: 21.622 ms/op
Iteration   3: 21.583 ms/op
Iteration   4: 20.526 ms/op
Iteration   5: 22.549 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  21.731 ±(99.9%) 3.087 ms/op [Average]
  (min, avg, max) = (20.526, 21.731, 22.549), stdev = 0.802
  CI (99.9%): [18.644, 24.818] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 2.27% complete, ETA 01:31:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.005 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.004, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 2.46% complete, ETA 01:31:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.005 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 2.65% complete, ETA 01:31:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.140 ms/op
# Warmup Iteration   2: 0.127 ms/op
# Warmup Iteration   3: 0.126 ms/op
# Warmup Iteration   4: 0.127 ms/op
# Warmup Iteration   5: 0.124 ms/op
Iteration   1: 0.123 ms/op
Iteration   2: 0.122 ms/op
Iteration   3: 0.122 ms/op
Iteration   4: 0.122 ms/op
Iteration   5: 0.123 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.123 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.122, 0.123, 0.123), stdev = 0.001
  CI (99.9%): [0.121, 0.125] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 2.84% complete, ETA 01:31:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.142 ms/op
# Warmup Iteration   2: 0.132 ms/op
# Warmup Iteration   3: 0.126 ms/op
# Warmup Iteration   4: 0.126 ms/op
# Warmup Iteration   5: 0.130 ms/op
Iteration   1: 0.139 ms/op
Iteration   2: 0.143 ms/op
Iteration   3: 0.143 ms/op
Iteration   4: 0.147 ms/op
Iteration   5: 0.130 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.140 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.130, 0.140, 0.147), stdev = 0.006
  CI (99.9%): [0.117, 0.164] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 3.03% complete, ETA 01:30:57
# Fork: 1 of 1
# Warmup Iteration   1: 37.805 ms/op
# Warmup Iteration   2: 36.952 ms/op
# Warmup Iteration   3: 32.853 ms/op
# Warmup Iteration   4: 36.507 ms/op
# Warmup Iteration   5: 38.438 ms/op
Iteration   1: 36.118 ms/op
Iteration   2: 41.452 ms/op
Iteration   3: 40.034 ms/op
Iteration   4: 41.742 ms/op
Iteration   5: 40.911 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  40.051 ±(99.9%) 8.828 ms/op [Average]
  (min, avg, max) = (36.118, 40.051, 41.742), stdev = 2.293
  CI (99.9%): [31.223, 48.879] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 3.22% complete, ETA 01:30:57
# Fork: 1 of 1
# Warmup Iteration   1: 38.421 ms/op
# Warmup Iteration   2: 34.776 ms/op
# Warmup Iteration   3: 47.275 ms/op
# Warmup Iteration   4: 40.624 ms/op
# Warmup Iteration   5: 43.091 ms/op
Iteration   1: 39.156 ms/op
Iteration   2: 36.110 ms/op
Iteration   3: 42.636 ms/op
Iteration   4: 39.615 ms/op
Iteration   5: 37.722 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  39.048 ±(99.9%) 9.353 ms/op [Average]
  (min, avg, max) = (36.110, 39.048, 42.636), stdev = 2.429
  CI (99.9%): [29.695, 48.400] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 3.41% complete, ETA 01:30:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.009 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.009, 0.009, 0.009), stdev = 0.001
  CI (99.9%): [0.009, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 3.60% complete, ETA 01:30:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.009 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.009, 0.009, 0.009), stdev = 0.001
  CI (99.9%): [0.009, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 3.79% complete, ETA 01:30:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.263 ms/op
# Warmup Iteration   2: 0.242 ms/op
# Warmup Iteration   3: 0.235 ms/op
# Warmup Iteration   4: 0.235 ms/op
# Warmup Iteration   5: 0.235 ms/op
Iteration   1: 0.235 ms/op
Iteration   2: 0.235 ms/op
Iteration   3: 0.234 ms/op
Iteration   4: 0.234 ms/op
Iteration   5: 0.235 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.235 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.234, 0.235, 0.235), stdev = 0.001
  CI (99.9%): [0.233, 0.237] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 3.98% complete, ETA 01:30:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.264 ms/op
# Warmup Iteration   2: 0.239 ms/op
# Warmup Iteration   3: 0.244 ms/op
# Warmup Iteration   4: 0.236 ms/op
# Warmup Iteration   5: 0.237 ms/op
Iteration   1: 0.239 ms/op
Iteration   2: 0.237 ms/op
Iteration   3: 0.239 ms/op
Iteration   4: 0.238 ms/op
Iteration   5: 0.238 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.238 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.237, 0.238, 0.239), stdev = 0.001
  CI (99.9%): [0.235, 0.242] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 4.17% complete, ETA 01:29:57
# Fork: 1 of 1
# Warmup Iteration   1: 66.417 ms/op
# Warmup Iteration   2: 61.754 ms/op
# Warmup Iteration   3: 60.376 ms/op
# Warmup Iteration   4: 57.984 ms/op
# Warmup Iteration   5: 80.628 ms/op
Iteration   1: 75.175 ms/op
Iteration   2: 84.480 ms/op
Iteration   3: 83.207 ms/op
Iteration   4: 80.149 ms/op
Iteration   5: 68.240 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  78.250 ±(99.9%) 25.589 ms/op [Average]
  (min, avg, max) = (68.240, 78.250, 84.480), stdev = 6.645
  CI (99.9%): [52.661, 103.839] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 4.36% complete, ETA 01:30:02
# Fork: 1 of 1
# Warmup Iteration   1: 74.192 ms/op
# Warmup Iteration   2: 71.499 ms/op
# Warmup Iteration   3: 62.065 ms/op
# Warmup Iteration   4: 67.888 ms/op
# Warmup Iteration   5: 74.679 ms/op
Iteration   1: 70.156 ms/op
Iteration   2: 85.039 ms/op
Iteration   3: 74.206 ms/op
Iteration   4: 84.153 ms/op
Iteration   5: 79.572 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  78.625 ±(99.9%) 24.645 ms/op [Average]
  (min, avg, max) = (70.156, 78.625, 85.039), stdev = 6.400
  CI (99.9%): [53.981, 103.270] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 4.55% complete, ETA 01:30:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.018 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.018, 0.018, 0.018), stdev = 0.001
  CI (99.9%): [0.018, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 4.73% complete, ETA 01:29:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.018 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.019 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.018, 0.019, 0.021), stdev = 0.001
  CI (99.9%): [0.015, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 4.92% complete, ETA 01:29:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.522 ms/op
# Warmup Iteration   2: 0.457 ms/op
# Warmup Iteration   3: 0.462 ms/op
# Warmup Iteration   4: 0.453 ms/op
# Warmup Iteration   5: 0.447 ms/op
Iteration   1: 0.448 ms/op
Iteration   2: 0.507 ms/op
Iteration   3: 0.498 ms/op
Iteration   4: 0.531 ms/op
Iteration   5: 0.519 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.501 ±(99.9%) 0.123 ms/op [Average]
  (min, avg, max) = (0.448, 0.501, 0.531), stdev = 0.032
  CI (99.9%): [0.378, 0.623] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 5.11% complete, ETA 01:29:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.538 ms/op
# Warmup Iteration   2: 0.493 ms/op
# Warmup Iteration   3: 0.496 ms/op
# Warmup Iteration   4: 0.480 ms/op
# Warmup Iteration   5: 0.491 ms/op
Iteration   1: 0.481 ms/op
Iteration   2: 0.480 ms/op
Iteration   3: 0.488 ms/op
Iteration   4: 0.485 ms/op
Iteration   5: 0.480 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.483 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.480, 0.483, 0.488), stdev = 0.003
  CI (99.9%): [0.470, 0.496] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 5.30% complete, ETA 01:29:08
# Fork: 1 of 1
# Warmup Iteration   1: 160.513 ms/op
# Warmup Iteration   2: 150.746 ms/op
# Warmup Iteration   3: 145.814 ms/op
# Warmup Iteration   4: 146.026 ms/op
# Warmup Iteration   5: 152.677 ms/op
Iteration   1: 148.822 ms/op
Iteration   2: 152.820 ms/op
Iteration   3: 159.014 ms/op
Iteration   4: 149.773 ms/op
Iteration   5: 177.565 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  157.599 ±(99.9%) 45.632 ms/op [Average]
  (min, avg, max) = (148.822, 157.599, 177.565), stdev = 11.851
  CI (99.9%): [111.966, 203.231] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 5.49% complete, ETA 01:29:11
# Fork: 1 of 1
# Warmup Iteration   1: 158.289 ms/op
# Warmup Iteration   2: 151.076 ms/op
# Warmup Iteration   3: 134.074 ms/op
# Warmup Iteration   4: 154.120 ms/op
# Warmup Iteration   5: 169.828 ms/op
Iteration   1: 150.048 ms/op
Iteration   2: 155.010 ms/op
Iteration   3: 170.634 ms/op
Iteration   4: 145.024 ms/op
Iteration   5: 150.360 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  154.215 ±(99.9%) 37.872 ms/op [Average]
  (min, avg, max) = (145.024, 154.215, 170.634), stdev = 9.835
  CI (99.9%): [116.343, 192.087] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 5.68% complete, ETA 01:29:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
# Warmup Iteration   2: 0.039 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.036 ms/op
Iteration   1: 0.038 ms/op
Iteration   2: 0.038 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.039 ms/op
Iteration   5: 0.040 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.038 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.037, 0.038, 0.040), stdev = 0.001
  CI (99.9%): [0.035, 0.042] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 5.87% complete, ETA 01:29:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.043 ms/op
# Warmup Iteration   2: 0.041 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.038 ms/op
# Warmup Iteration   5: 0.038 ms/op
Iteration   1: 0.040 ms/op
Iteration   2: 0.038 ms/op
Iteration   3: 0.036 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.036 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.037 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.036, 0.037, 0.040), stdev = 0.002
  CI (99.9%): [0.030, 0.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 6.06% complete, ETA 01:28:51
# Fork: 1 of 1
# Warmup Iteration   1: 1.018 ms/op
# Warmup Iteration   2: 0.912 ms/op
# Warmup Iteration   3: 0.923 ms/op
# Warmup Iteration   4: 0.899 ms/op
# Warmup Iteration   5: 0.898 ms/op
Iteration   1: 0.921 ms/op
Iteration   2: 1.030 ms/op
Iteration   3: 1.035 ms/op
Iteration   4: 0.959 ms/op
Iteration   5: 0.998 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.988 ±(99.9%) 0.186 ms/op [Average]
  (min, avg, max) = (0.921, 0.988, 1.035), stdev = 0.048
  CI (99.9%): [0.802, 1.175] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 6.25% complete, ETA 01:28:36
# Fork: 1 of 1
# Warmup Iteration   1: 1.082 ms/op
# Warmup Iteration   2: 0.962 ms/op
# Warmup Iteration   3: 0.934 ms/op
# Warmup Iteration   4: 0.956 ms/op
# Warmup Iteration   5: 0.945 ms/op
Iteration   1: 0.958 ms/op
Iteration   2: 0.953 ms/op
Iteration   3: 0.937 ms/op
Iteration   4: 0.942 ms/op
Iteration   5: 0.968 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.952 ±(99.9%) 0.048 ms/op [Average]
  (min, avg, max) = (0.937, 0.952, 0.968), stdev = 0.012
  CI (99.9%): [0.904, 0.999] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 6.44% complete, ETA 01:28:23
# Fork: 1 of 1
# Warmup Iteration   1: 391.920 ms/op
# Warmup Iteration   2: 349.221 ms/op
# Warmup Iteration   3: 348.770 ms/op
# Warmup Iteration   4: 271.231 ms/op
# Warmup Iteration   5: 334.479 ms/op
Iteration   1: 338.780 ms/op
Iteration   2: 330.361 ms/op
Iteration   3: 316.537 ms/op
Iteration   4: 262.458 ms/op
Iteration   5: 357.790 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  321.185 ±(99.9%) 138.893 ms/op [Average]
  (min, avg, max) = (262.458, 321.185, 357.790), stdev = 36.070
  CI (99.9%): [182.292, 460.078] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 6.63% complete, ETA 01:28:44
# Fork: 1 of 1
# Warmup Iteration   1: 326.505 ms/op
# Warmup Iteration   2: 332.310 ms/op
# Warmup Iteration   3: 256.300 ms/op
# Warmup Iteration   4: 355.335 ms/op
# Warmup Iteration   5: 333.559 ms/op
Iteration   1: 356.012 ms/op
Iteration   2: 384.522 ms/op
Iteration   3: 327.497 ms/op
Iteration   4: 309.446 ms/op
Iteration   5: 348.327 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  345.161 ±(99.9%) 110.007 ms/op [Average]
  (min, avg, max) = (309.446, 345.161, 384.522), stdev = 28.568
  CI (99.9%): [235.154, 455.168] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 6.82% complete, ETA 01:29:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.086 ms/op
# Warmup Iteration   2: 0.074 ms/op
# Warmup Iteration   3: 0.075 ms/op
# Warmup Iteration   4: 0.074 ms/op
# Warmup Iteration   5: 0.073 ms/op
Iteration   1: 0.072 ms/op
Iteration   2: 0.074 ms/op
Iteration   3: 0.074 ms/op
Iteration   4: 0.077 ms/op
Iteration   5: 0.073 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.074 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.072, 0.074, 0.077), stdev = 0.002
  CI (99.9%): [0.067, 0.081] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 7.01% complete, ETA 01:28:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.082 ms/op
# Warmup Iteration   2: 0.073 ms/op
# Warmup Iteration   3: 0.072 ms/op
# Warmup Iteration   4: 0.076 ms/op
# Warmup Iteration   5: 0.075 ms/op
Iteration   1: 0.074 ms/op
Iteration   2: 0.074 ms/op
Iteration   3: 0.077 ms/op
Iteration   4: 0.076 ms/op
Iteration   5: 0.070 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.074 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.070, 0.074, 0.077), stdev = 0.003
  CI (99.9%): [0.064, 0.084] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 7.20% complete, ETA 01:28:34
# Fork: 1 of 1
# Warmup Iteration   1: 2.026 ms/op
# Warmup Iteration   2: 1.829 ms/op
# Warmup Iteration   3: 1.812 ms/op
# Warmup Iteration   4: 1.973 ms/op
# Warmup Iteration   5: 1.828 ms/op
Iteration   1: 1.824 ms/op
Iteration   2: 1.755 ms/op
Iteration   3: 1.855 ms/op
Iteration   4: 1.994 ms/op
Iteration   5: 1.827 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  1.851 ±(99.9%) 0.338 ms/op [Average]
  (min, avg, max) = (1.755, 1.851, 1.994), stdev = 0.088
  CI (99.9%): [1.513, 2.189] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 7.39% complete, ETA 01:28:19
# Fork: 1 of 1
# Warmup Iteration   1: 2.136 ms/op
# Warmup Iteration   2: 1.878 ms/op
# Warmup Iteration   3: 1.866 ms/op
# Warmup Iteration   4: 1.856 ms/op
# Warmup Iteration   5: 1.877 ms/op
Iteration   1: 1.940 ms/op
Iteration   2: 1.940 ms/op
Iteration   3: 2.302 ms/op
Iteration   4: 2.032 ms/op
Iteration   5: 1.844 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  2.011 ±(99.9%) 0.675 ms/op [Average]
  (min, avg, max) = (1.844, 2.011, 2.302), stdev = 0.175
  CI (99.9%): [1.336, 2.687] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 7.58% complete, ETA 01:28:04
# Fork: 1 of 1
# Warmup Iteration   1: 826.144 ms/op
# Warmup Iteration   2: 612.851 ms/op
# Warmup Iteration   3: 853.353 ms/op
# Warmup Iteration   4: 798.394 ms/op
# Warmup Iteration   5: 697.550 ms/op
Iteration   1: 656.062 ms/op
Iteration   2: 936.871 ms/op
Iteration   3: 789.615 ms/op
Iteration   4: 738.332 ms/op
Iteration   5: 744.555 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  773.087 ±(99.9%) 398.385 ms/op [Average]
  (min, avg, max) = (656.062, 773.087, 936.871), stdev = 103.459
  CI (99.9%): [374.702, 1171.472] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 7.77% complete, ETA 01:29:04
# Fork: 1 of 1
# Warmup Iteration   1: 830.300 ms/op
# Warmup Iteration   2: 714.781 ms/op
# Warmup Iteration   3: 816.126 ms/op
# Warmup Iteration   4: 742.490 ms/op
# Warmup Iteration   5: 803.999 ms/op
Iteration   1: 790.855 ms/op
Iteration   2: 931.638 ms/op
Iteration   3: 659.359 ms/op
Iteration   4: 853.321 ms/op
Iteration   5: 785.177 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  804.070 ±(99.9%) 385.892 ms/op [Average]
  (min, avg, max) = (659.359, 804.070, 931.638), stdev = 100.215
  CI (99.9%): [418.178, 1189.962] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 7.95% complete, ETA 01:30:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.197 ms/op
# Warmup Iteration   2: 0.146 ms/op
# Warmup Iteration   3: 0.142 ms/op
# Warmup Iteration   4: 0.155 ms/op
# Warmup Iteration   5: 0.169 ms/op
Iteration   1: 0.167 ms/op
Iteration   2: 0.186 ms/op
Iteration   3: 0.179 ms/op
Iteration   4: 0.188 ms/op
Iteration   5: 0.158 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.176 ±(99.9%) 0.049 ms/op [Average]
  (min, avg, max) = (0.158, 0.176, 0.188), stdev = 0.013
  CI (99.9%): [0.127, 0.225] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 8.14% complete, ETA 01:29:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.181 ms/op
# Warmup Iteration   2: 0.157 ms/op
# Warmup Iteration   3: 0.154 ms/op
# Warmup Iteration   4: 0.154 ms/op
# Warmup Iteration   5: 0.155 ms/op
Iteration   1: 0.154 ms/op
Iteration   2: 0.153 ms/op
Iteration   3: 0.155 ms/op
Iteration   4: 0.154 ms/op
Iteration   5: 0.154 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.154 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.153, 0.154, 0.155), stdev = 0.001
  CI (99.9%): [0.151, 0.157] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 8.33% complete, ETA 01:29:36
# Fork: 1 of 1
# Warmup Iteration   1: 4.940 ms/op
# Warmup Iteration   2: 4.130 ms/op
# Warmup Iteration   3: 4.391 ms/op
# Warmup Iteration   4: 4.375 ms/op
# Warmup Iteration   5: 4.263 ms/op
Iteration   1: 4.193 ms/op
Iteration   2: 4.247 ms/op
Iteration   3: 4.577 ms/op
Iteration   4: 4.926 ms/op
Iteration   5: 4.303 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  4.449 ±(99.9%) 1.173 ms/op [Average]
  (min, avg, max) = (4.193, 4.449, 4.926), stdev = 0.305
  CI (99.9%): [3.276, 5.622] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 8.52% complete, ETA 01:29:19
# Fork: 1 of 1
# Warmup Iteration   1: 5.297 ms/op
# Warmup Iteration   2: 4.338 ms/op
# Warmup Iteration   3: 4.205 ms/op
# Warmup Iteration   4: 4.132 ms/op
# Warmup Iteration   5: 4.241 ms/op
Iteration   1: 4.248 ms/op
Iteration   2: 4.119 ms/op
Iteration   3: 3.759 ms/op
Iteration   4: 3.796 ms/op
Iteration   5: 3.606 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  3.906 ±(99.9%) 1.030 ms/op [Average]
  (min, avg, max) = (3.606, 3.906, 4.248), stdev = 0.267
  CI (99.9%): [2.876, 4.935] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 8.71% complete, ETA 01:29:03
# Fork: 1 of 1
# Warmup Iteration   1: 1375.025 ms/op
# Warmup Iteration   2: 1409.207 ms/op
# Warmup Iteration   3: 1245.096 ms/op
# Warmup Iteration   4: 1260.928 ms/op
# Warmup Iteration   5: 1317.603 ms/op
Iteration   1: 1387.134 ms/op
Iteration   2: 1027.271 ms/op
Iteration   3: 1218.965 ms/op
Iteration   4: 1154.109 ms/op
Iteration   5: 1447.172 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  1246.930 ±(99.9%) 659.692 ms/op [Average]
  (min, avg, max) = (1027.271, 1246.930, 1447.172), stdev = 171.320
  CI (99.9%): [587.238, 1906.622] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 8.90% complete, ETA 01:29:20
# Fork: 1 of 1
# Warmup Iteration   1: 1422.357 ms/op
# Warmup Iteration   2: 1293.787 ms/op
# Warmup Iteration   3: 1184.472 ms/op
# Warmup Iteration   4: 1439.532 ms/op
# Warmup Iteration   5: 1218.779 ms/op
Iteration   1: 1475.000 ms/op
Iteration   2: 1304.428 ms/op
Iteration   3: 1394.177 ms/op
Iteration   4: 1159.639 ms/op
Iteration   5: 1399.679 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  1346.584 ±(99.9%) 464.879 ms/op [Average]
  (min, avg, max) = (1159.639, 1346.584, 1475.000), stdev = 120.728
  CI (99.9%): [881.705, 1811.464] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 9.09% complete, ETA 01:29:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.339 ms/op
# Warmup Iteration   2: 0.299 ms/op
# Warmup Iteration   3: 0.293 ms/op
# Warmup Iteration   4: 0.292 ms/op
# Warmup Iteration   5: 0.294 ms/op
Iteration   1: 0.291 ms/op
Iteration   2: 0.288 ms/op
Iteration   3: 0.288 ms/op
Iteration   4: 0.290 ms/op
Iteration   5: 0.295 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.290 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.288, 0.290, 0.295), stdev = 0.003
  CI (99.9%): [0.280, 0.301] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 9.28% complete, ETA 01:29:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.310 ms/op
# Warmup Iteration   2: 0.283 ms/op
# Warmup Iteration   3: 0.280 ms/op
# Warmup Iteration   4: 0.283 ms/op
# Warmup Iteration   5: 0.284 ms/op
Iteration   1: 0.286 ms/op
Iteration   2: 0.286 ms/op
Iteration   3: 0.284 ms/op
Iteration   4: 0.283 ms/op
Iteration   5: 0.285 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.285 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.283, 0.285, 0.286), stdev = 0.001
  CI (99.9%): [0.279, 0.291] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 9.47% complete, ETA 01:29:05
# Fork: 1 of 1
# Warmup Iteration   1: 8.864 ms/op
# Warmup Iteration   2: 7.553 ms/op
# Warmup Iteration   3: 7.525 ms/op
# Warmup Iteration   4: 7.512 ms/op
# Warmup Iteration   5: 7.652 ms/op
Iteration   1: 7.592 ms/op
Iteration   2: 7.608 ms/op
Iteration   3: 7.295 ms/op
Iteration   4: 7.226 ms/op
Iteration   5: 7.107 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  7.365 ±(99.9%) 0.864 ms/op [Average]
  (min, avg, max) = (7.107, 7.365, 7.608), stdev = 0.224
  CI (99.9%): [6.501, 8.230] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 9.66% complete, ETA 01:28:48
# Fork: 1 of 1
# Warmup Iteration   1: 9.266 ms/op
# Warmup Iteration   2: 8.487 ms/op
# Warmup Iteration   3: 7.409 ms/op
# Warmup Iteration   4: 7.488 ms/op
# Warmup Iteration   5: 7.601 ms/op
Iteration   1: 7.071 ms/op
Iteration   2: 7.094 ms/op
Iteration   3: 7.027 ms/op
Iteration   4: 7.395 ms/op
Iteration   5: 7.226 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  7.163 ±(99.9%) 0.576 ms/op [Average]
  (min, avg, max) = (7.027, 7.163, 7.395), stdev = 0.150
  CI (99.9%): [6.587, 7.738] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 9.85% complete, ETA 01:28:32
# Fork: 1 of 1
# Warmup Iteration   1: 2902.987 ms/op
# Warmup Iteration   2: 2680.802 ms/op
# Warmup Iteration   3: 3469.462 ms/op
# Warmup Iteration   4: 3678.615 ms/op
# Warmup Iteration   5: 3020.917 ms/op
Iteration   1: 3851.989 ms/op
Iteration   2: 2965.155 ms/op
Iteration   3: 2619.054 ms/op
Iteration   4: 3342.175 ms/op
Iteration   5: 3403.139 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  3236.302 ±(99.9%) 1798.533 ms/op [Average]
  (min, avg, max) = (2619.054, 3236.302, 3851.989), stdev = 467.073
  CI (99.9%): [1437.769, 5034.836] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 10.04% complete, ETA 01:31:36
# Fork: 1 of 1
# Warmup Iteration   1: 2934.409 ms/op
# Warmup Iteration   2: 3489.741 ms/op
# Warmup Iteration   3: 2942.738 ms/op
# Warmup Iteration   4: 2954.920 ms/op
# Warmup Iteration   5: 2894.356 ms/op
Iteration   1: 3010.102 ms/op
Iteration   2: 2909.602 ms/op
Iteration   3: 2935.260 ms/op
Iteration   4: 2761.586 ms/op
Iteration   5: 2886.452 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  2900.600 ±(99.9%) 348.681 ms/op [Average]
  (min, avg, max) = (2761.586, 2900.600, 3010.102), stdev = 90.551
  CI (99.9%): [2551.920, 3249.281] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 10.23% complete, ETA 01:34:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.669 ms/op
# Warmup Iteration   2: 0.590 ms/op
# Warmup Iteration   3: 0.584 ms/op
# Warmup Iteration   4: 0.586 ms/op
# Warmup Iteration   5: 0.588 ms/op
Iteration   1: 0.581 ms/op
Iteration   2: 0.584 ms/op
Iteration   3: 0.587 ms/op
Iteration   4: 0.583 ms/op
Iteration   5: 0.576 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.582 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.576, 0.582, 0.587), stdev = 0.004
  CI (99.9%): [0.565, 0.599] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 10.42% complete, ETA 01:33:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.644 ms/op
# Warmup Iteration   2: 0.574 ms/op
# Warmup Iteration   3: 0.576 ms/op
# Warmup Iteration   4: 0.577 ms/op
# Warmup Iteration   5: 0.583 ms/op
Iteration   1: 0.580 ms/op
Iteration   2: 0.585 ms/op
Iteration   3: 0.578 ms/op
Iteration   4: 0.577 ms/op
Iteration   5: 0.576 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.579 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.576, 0.579, 0.585), stdev = 0.004
  CI (99.9%): [0.565, 0.593] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 10.61% complete, ETA 01:33:35
# Fork: 1 of 1
# Warmup Iteration   1: 19.097 ms/op
# Warmup Iteration   2: 17.663 ms/op
# Warmup Iteration   3: 14.950 ms/op
# Warmup Iteration   4: 15.236 ms/op
# Warmup Iteration   5: 15.022 ms/op
Iteration   1: 15.324 ms/op
Iteration   2: 15.213 ms/op
Iteration   3: 15.413 ms/op
Iteration   4: 15.300 ms/op
Iteration   5: 15.551 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  15.360 ±(99.9%) 0.493 ms/op [Average]
  (min, avg, max) = (15.213, 15.360, 15.551), stdev = 0.128
  CI (99.9%): [14.867, 15.854] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 10.80% complete, ETA 01:33:13
# Fork: 1 of 1
# Warmup Iteration   1: 21.139 ms/op
# Warmup Iteration   2: 16.754 ms/op
# Warmup Iteration   3: 15.906 ms/op
# Warmup Iteration   4: 15.704 ms/op
# Warmup Iteration   5: 15.365 ms/op
Iteration   1: 15.673 ms/op
Iteration   2: 15.674 ms/op
Iteration   3: 15.422 ms/op
Iteration   4: 15.629 ms/op
Iteration   5: 15.473 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  15.574 ±(99.9%) 0.457 ms/op [Average]
  (min, avg, max) = (15.422, 15.574, 15.674), stdev = 0.119
  CI (99.9%): [15.117, 16.031] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 10.98% complete, ETA 01:32:51
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark(ImmutableGetBenchmark.java:88)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.baselineGetAndCommitBenchmark_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.baselineGetAndCommitBenchmark_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 11.17% complete, ETA 01:33:28
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark(ImmutableGetBenchmark.java:88)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.baselineGetAndCommitBenchmark_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.baselineGetAndCommitBenchmark_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 11.36% complete, ETA 01:33:45
# Fork: 1 of 1
# Warmup Iteration   1: 1.521 ms/op
# Warmup Iteration   2: 1.142 ms/op
# Warmup Iteration   3: 1.155 ms/op
# Warmup Iteration   4: 1.355 ms/op
# Warmup Iteration   5: 1.162 ms/op
Iteration   1: 1.176 ms/op
Iteration   2: 1.180 ms/op
Iteration   3: 1.195 ms/op
Iteration   4: 1.197 ms/op
Iteration   5: 1.182 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  1.186 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (1.176, 1.186, 1.197), stdev = 0.009
  CI (99.9%): [1.150, 1.222] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 11.55% complete, ETA 01:33:22
# Fork: 1 of 1
# Warmup Iteration   1: 1.302 ms/op
# Warmup Iteration   2: 1.183 ms/op
# Warmup Iteration   3: 1.178 ms/op
# Warmup Iteration   4: 1.144 ms/op
# Warmup Iteration   5: 1.163 ms/op
Iteration   1: 1.154 ms/op
Iteration   2: 1.166 ms/op
Iteration   3: 1.163 ms/op
Iteration   4: 1.162 ms/op
Iteration   5: 1.163 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  1.162 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (1.154, 1.162, 1.166), stdev = 0.005
  CI (99.9%): [1.143, 1.180] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 11.74% complete, ETA 01:32:58
# Fork: 1 of 1
# Warmup Iteration   1: 53.520 ms/op
# Warmup Iteration   2: 31.868 ms/op
# Warmup Iteration   3: 30.509 ms/op
# Warmup Iteration   4: 30.259 ms/op
# Warmup Iteration   5: 30.559 ms/op
Iteration   1: 29.850 ms/op
Iteration   2: 29.966 ms/op
Iteration   3: 29.702 ms/op
Iteration   4: 30.009 ms/op
Iteration   5: 29.878 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  29.881 ±(99.9%) 0.459 ms/op [Average]
  (min, avg, max) = (29.702, 29.881, 30.009), stdev = 0.119
  CI (99.9%): [29.423, 30.340] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 11.93% complete, ETA 01:32:38
# Fork: 1 of 1
# Warmup Iteration   1: 53.457 ms/op
# Warmup Iteration   2: 31.678 ms/op
# Warmup Iteration   3: 29.928 ms/op
# Warmup Iteration   4: 30.062 ms/op
# Warmup Iteration   5: 29.782 ms/op
Iteration   1: 29.688 ms/op
Iteration   2: 30.189 ms/op
Iteration   3: 29.723 ms/op
Iteration   4: 30.124 ms/op
Iteration   5: 29.803 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  29.906 ±(99.9%) 0.902 ms/op [Average]
  (min, avg, max) = (29.688, 29.906, 30.189), stdev = 0.234
  CI (99.9%): [29.004, 30.807] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 12.12% complete, ETA 01:32:17
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark(ImmutableGetBenchmark.java:88)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.baselineGetAndCommitBenchmark_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.baselineGetAndCommitBenchmark_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 12.31% complete, ETA 01:32:47
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark(ImmutableGetBenchmark.java:88)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.baselineGetAndCommitBenchmark_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.baselineGetAndCommitBenchmark_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 12.50% complete, ETA 01:33:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 12.69% complete, ETA 01:32:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 12.88% complete, ETA 01:32:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.040 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.036 ms/op
# Warmup Iteration   4: 0.036 ms/op
# Warmup Iteration   5: 0.036 ms/op
Iteration   1: 0.036 ms/op
Iteration   2: 0.036 ms/op
Iteration   3: 0.036 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.036 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.036, 0.036, 0.037), stdev = 0.001
  CI (99.9%): [0.035, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 13.07% complete, ETA 01:31:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.041 ms/op
# Warmup Iteration   2: 0.036 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.036 ms/op
# Warmup Iteration   5: 0.036 ms/op
Iteration   1: 0.036 ms/op
Iteration   2: 0.036 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.037 ms/op
Iteration   5: 0.036 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.037 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.036, 0.037, 0.037), stdev = 0.001
  CI (99.9%): [0.036, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 13.26% complete, ETA 01:31:34
# Fork: 1 of 1
# Warmup Iteration   1: 10.758 ms/op
# Warmup Iteration   2: 10.136 ms/op
# Warmup Iteration   3: 10.824 ms/op
# Warmup Iteration   4: 12.337 ms/op
# Warmup Iteration   5: 11.107 ms/op
Iteration   1: 12.218 ms/op
Iteration   2: 10.698 ms/op
Iteration   3: 10.477 ms/op
Iteration   4: 10.030 ms/op
Iteration   5: 12.679 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  11.220 ±(99.9%) 4.460 ms/op [Average]
  (min, avg, max) = (10.030, 11.220, 12.679), stdev = 1.158
  CI (99.9%): [6.760, 15.680] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 13.45% complete, ETA 01:31:15
# Fork: 1 of 1
# Warmup Iteration   1: 10.904 ms/op
# Warmup Iteration   2: 11.200 ms/op
# Warmup Iteration   3: 10.756 ms/op
# Warmup Iteration   4: 9.411 ms/op
# Warmup Iteration   5: 8.785 ms/op
Iteration   1: 12.320 ms/op
Iteration   2: 9.992 ms/op
Iteration   3: 10.516 ms/op
Iteration   4: 11.988 ms/op
Iteration   5: 10.390 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  11.041 ±(99.9%) 4.007 ms/op [Average]
  (min, avg, max) = (9.992, 11.041, 12.320), stdev = 1.041
  CI (99.9%): [7.034, 15.049] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 13.64% complete, ETA 01:30:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 13.83% complete, ETA 01:30:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 14.02% complete, ETA 01:30:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.079 ms/op
# Warmup Iteration   2: 0.073 ms/op
# Warmup Iteration   3: 0.073 ms/op
# Warmup Iteration   4: 0.073 ms/op
# Warmup Iteration   5: 0.073 ms/op
Iteration   1: 0.073 ms/op
Iteration   2: 0.071 ms/op
Iteration   3: 0.073 ms/op
Iteration   4: 0.073 ms/op
Iteration   5: 0.072 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.073 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.071, 0.073, 0.073), stdev = 0.001
  CI (99.9%): [0.070, 0.075] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 14.20% complete, ETA 01:29:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.079 ms/op
# Warmup Iteration   2: 0.074 ms/op
# Warmup Iteration   3: 0.071 ms/op
# Warmup Iteration   4: 0.072 ms/op
# Warmup Iteration   5: 0.073 ms/op
Iteration   1: 0.072 ms/op
Iteration   2: 0.073 ms/op
Iteration   3: 0.073 ms/op
Iteration   4: 0.070 ms/op
Iteration   5: 0.072 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.072 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.070, 0.072, 0.073), stdev = 0.001
  CI (99.9%): [0.068, 0.077] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 14.39% complete, ETA 01:29:34
# Fork: 1 of 1
# Warmup Iteration   1: 23.805 ms/op
# Warmup Iteration   2: 23.470 ms/op
# Warmup Iteration   3: 21.207 ms/op
# Warmup Iteration   4: 20.945 ms/op
# Warmup Iteration   5: 20.198 ms/op
Iteration   1: 22.881 ms/op
Iteration   2: 24.098 ms/op
Iteration   3: 24.233 ms/op
Iteration   4: 25.645 ms/op
Iteration   5: 24.277 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  24.227 ±(99.9%) 3.773 ms/op [Average]
  (min, avg, max) = (22.881, 24.227, 25.645), stdev = 0.980
  CI (99.9%): [20.454, 28.000] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 14.58% complete, ETA 01:29:16
# Fork: 1 of 1
# Warmup Iteration   1: 22.203 ms/op
# Warmup Iteration   2: 22.386 ms/op
# Warmup Iteration   3: 23.547 ms/op
# Warmup Iteration   4: 24.778 ms/op
# Warmup Iteration   5: 22.146 ms/op
Iteration   1: 22.152 ms/op
Iteration   2: 23.569 ms/op
Iteration   3: 23.256 ms/op
Iteration   4: 24.435 ms/op
Iteration   5: 20.572 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  22.797 ±(99.9%) 5.730 ms/op [Average]
  (min, avg, max) = (20.572, 22.797, 24.435), stdev = 1.488
  CI (99.9%): [17.067, 28.526] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 14.77% complete, ETA 01:28:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.004, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 14.96% complete, ETA 01:28:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.004, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 15.15% complete, ETA 01:28:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.142 ms/op
# Warmup Iteration   2: 0.127 ms/op
# Warmup Iteration   3: 0.126 ms/op
# Warmup Iteration   4: 0.127 ms/op
# Warmup Iteration   5: 0.130 ms/op
Iteration   1: 0.127 ms/op
Iteration   2: 0.124 ms/op
Iteration   3: 0.125 ms/op
Iteration   4: 0.127 ms/op
Iteration   5: 0.125 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.126 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.124, 0.126, 0.127), stdev = 0.001
  CI (99.9%): [0.120, 0.131] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 15.34% complete, ETA 01:28:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.141 ms/op
# Warmup Iteration   2: 0.128 ms/op
# Warmup Iteration   3: 0.125 ms/op
# Warmup Iteration   4: 0.126 ms/op
# Warmup Iteration   5: 0.124 ms/op
Iteration   1: 0.126 ms/op
Iteration   2: 0.125 ms/op
Iteration   3: 0.126 ms/op
Iteration   4: 0.126 ms/op
Iteration   5: 0.125 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.126 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.125, 0.126, 0.126), stdev = 0.001
  CI (99.9%): [0.124, 0.128] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 15.53% complete, ETA 01:27:42
# Fork: 1 of 1
# Warmup Iteration   1: 36.651 ms/op
# Warmup Iteration   2: 32.210 ms/op
# Warmup Iteration   3: 40.755 ms/op
# Warmup Iteration   4: 35.877 ms/op
# Warmup Iteration   5: 43.122 ms/op
Iteration   1: 43.294 ms/op
Iteration   2: 46.385 ms/op
Iteration   3: 40.701 ms/op
Iteration   4: 40.626 ms/op
Iteration   5: 38.075 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  41.816 ±(99.9%) 12.134 ms/op [Average]
  (min, avg, max) = (38.075, 41.816, 46.385), stdev = 3.151
  CI (99.9%): [29.682, 53.950] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 15.72% complete, ETA 01:27:27
# Fork: 1 of 1
# Warmup Iteration   1: 42.990 ms/op
# Warmup Iteration   2: 37.964 ms/op
# Warmup Iteration   3: 38.397 ms/op
# Warmup Iteration   4: 36.181 ms/op
# Warmup Iteration   5: 38.767 ms/op
Iteration   1: 37.816 ms/op
Iteration   2: 61.964 ms/op
Iteration   3: 42.618 ms/op
Iteration   4: 46.953 ms/op
Iteration   5: 48.555 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  47.581 ±(99.9%) 34.880 ms/op [Average]
  (min, avg, max) = (37.816, 47.581, 61.964), stdev = 9.058
  CI (99.9%): [12.701, 82.462] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 15.91% complete, ETA 01:27:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.009 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.009, 0.009, 0.009), stdev = 0.001
  CI (99.9%): [0.008, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 16.10% complete, ETA 01:26:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.008 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.008, 0.008, 0.008), stdev = 0.001
  CI (99.9%): [0.008, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 16.29% complete, ETA 01:26:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.264 ms/op
# Warmup Iteration   2: 0.241 ms/op
# Warmup Iteration   3: 0.235 ms/op
# Warmup Iteration   4: 0.235 ms/op
# Warmup Iteration   5: 0.237 ms/op
Iteration   1: 0.237 ms/op
Iteration   2: 0.237 ms/op
Iteration   3: 0.238 ms/op
Iteration   4: 0.238 ms/op
Iteration   5: 0.237 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.237 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.237, 0.237, 0.238), stdev = 0.001
  CI (99.9%): [0.235, 0.239] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 16.48% complete, ETA 01:26:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.268 ms/op
# Warmup Iteration   2: 0.235 ms/op
# Warmup Iteration   3: 0.236 ms/op
# Warmup Iteration   4: 0.232 ms/op
# Warmup Iteration   5: 0.236 ms/op
Iteration   1: 0.239 ms/op
Iteration   2: 0.235 ms/op
Iteration   3: 0.233 ms/op
Iteration   4: 0.233 ms/op
Iteration   5: 0.236 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.235 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.233, 0.235, 0.239), stdev = 0.002
  CI (99.9%): [0.226, 0.244] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 16.67% complete, ETA 01:26:00
# Fork: 1 of 1
# Warmup Iteration   1: 66.307 ms/op
# Warmup Iteration   2: 62.861 ms/op
# Warmup Iteration   3: 67.799 ms/op
# Warmup Iteration   4: 61.642 ms/op
# Warmup Iteration   5: 78.059 ms/op
Iteration   1: 64.835 ms/op
Iteration   2: 85.870 ms/op
Iteration   3: 77.819 ms/op
Iteration   4: 79.966 ms/op
Iteration   5: 74.501 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  76.598 ±(99.9%) 29.925 ms/op [Average]
  (min, avg, max) = (64.835, 76.598, 85.870), stdev = 7.772
  CI (99.9%): [46.673, 106.523] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 16.86% complete, ETA 01:25:45
# Fork: 1 of 1
# Warmup Iteration   1: 73.736 ms/op
# Warmup Iteration   2: 68.915 ms/op
# Warmup Iteration   3: 68.194 ms/op
# Warmup Iteration   4: 67.118 ms/op
# Warmup Iteration   5: 66.350 ms/op
Iteration   1: 69.721 ms/op
Iteration   2: 64.445 ms/op
Iteration   3: 73.077 ms/op
Iteration   4: 73.686 ms/op
Iteration   5: 70.523 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  70.290 ±(99.9%) 14.127 ms/op [Average]
  (min, avg, max) = (64.445, 70.290, 73.686), stdev = 3.669
  CI (99.9%): [56.163, 84.418] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 17.05% complete, ETA 01:25:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.017 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.017, 0.017, 0.017), stdev = 0.001
  CI (99.9%): [0.016, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 17.23% complete, ETA 01:25:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.017 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.017, 0.017, 0.017), stdev = 0.001
  CI (99.9%): [0.017, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 17.42% complete, ETA 01:24:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.516 ms/op
# Warmup Iteration   2: 0.476 ms/op
# Warmup Iteration   3: 0.470 ms/op
# Warmup Iteration   4: 0.463 ms/op
# Warmup Iteration   5: 0.468 ms/op
Iteration   1: 0.470 ms/op
Iteration   2: 0.469 ms/op
Iteration   3: 0.473 ms/op
Iteration   4: 0.476 ms/op
Iteration   5: 0.468 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.471 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.468, 0.471, 0.476), stdev = 0.003
  CI (99.9%): [0.460, 0.483] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 17.61% complete, ETA 01:24:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.526 ms/op
# Warmup Iteration   2: 0.474 ms/op
# Warmup Iteration   3: 0.472 ms/op
# Warmup Iteration   4: 0.465 ms/op
# Warmup Iteration   5: 0.470 ms/op
Iteration   1: 0.469 ms/op
Iteration   2: 0.469 ms/op
Iteration   3: 0.467 ms/op
Iteration   4: 0.461 ms/op
Iteration   5: 0.456 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.465 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.456, 0.465, 0.469), stdev = 0.006
  CI (99.9%): [0.443, 0.486] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 17.80% complete, ETA 01:24:23
# Fork: 1 of 1
# Warmup Iteration   1: 154.125 ms/op
# Warmup Iteration   2: 145.652 ms/op
# Warmup Iteration   3: 180.169 ms/op
# Warmup Iteration   4: 186.525 ms/op
# Warmup Iteration   5: 148.002 ms/op
Iteration   1: 183.012 ms/op
Iteration   2: 177.298 ms/op
Iteration   3: 177.935 ms/op
Iteration   4: 170.588 ms/op
Iteration   5: 167.778 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  175.322 ±(99.9%) 23.518 ms/op [Average]
  (min, avg, max) = (167.778, 175.322, 183.012), stdev = 6.107
  CI (99.9%): [151.805, 198.840] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 17.99% complete, ETA 01:24:11
# Fork: 1 of 1
# Warmup Iteration   1: 159.149 ms/op
# Warmup Iteration   2: 153.116 ms/op
# Warmup Iteration   3: 161.229 ms/op
# Warmup Iteration   4: 158.929 ms/op
# Warmup Iteration   5: 171.097 ms/op
Iteration   1: 170.790 ms/op
Iteration   2: 166.048 ms/op
Iteration   3: 156.561 ms/op
Iteration   4: 190.335 ms/op
Iteration   5: 179.658 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  172.678 ±(99.9%) 49.753 ms/op [Average]
  (min, avg, max) = (156.561, 172.678, 190.335), stdev = 12.921
  CI (99.9%): [122.926, 222.431] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 18.18% complete, ETA 01:24:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.044 ms/op
# Warmup Iteration   2: 0.036 ms/op
# Warmup Iteration   3: 0.036 ms/op
# Warmup Iteration   4: 0.035 ms/op
# Warmup Iteration   5: 0.035 ms/op
Iteration   1: 0.036 ms/op
Iteration   2: 0.035 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.035 ms/op
Iteration   5: 0.035 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.035 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.034, 0.035, 0.036), stdev = 0.001
  CI (99.9%): [0.032, 0.038] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 18.37% complete, ETA 01:23:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.039 ms/op
# Warmup Iteration   2: 0.035 ms/op
# Warmup Iteration   3: 0.035 ms/op
# Warmup Iteration   4: 0.038 ms/op
# Warmup Iteration   5: 0.039 ms/op
Iteration   1: 0.044 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.038 ms/op
Iteration   4: 0.041 ms/op
Iteration   5: 0.038 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.041 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.038, 0.041, 0.047), stdev = 0.004
  CI (99.9%): [0.026, 0.057] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 18.56% complete, ETA 01:23:28
# Fork: 1 of 1
# Warmup Iteration   1: 1.179 ms/op
# Warmup Iteration   2: 1.505 ms/op
# Warmup Iteration   3: 1.568 ms/op
# Warmup Iteration   4: 1.109 ms/op
# Warmup Iteration   5: 1.287 ms/op
Iteration   1: 1.918 ms/op
Iteration   2: 1.315 ms/op
Iteration   3: 1.465 ms/op
Iteration   4: 1.065 ms/op
Iteration   5: 0.976 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1.348 ±(99.9%) 1.438 ms/op [Average]
  (min, avg, max) = (0.976, 1.348, 1.918), stdev = 0.373
  CI (99.9%): [? 0, 2.785] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 18.75% complete, ETA 01:23:12
# Fork: 1 of 1
# Warmup Iteration   1: 1.073 ms/op
# Warmup Iteration   2: 0.964 ms/op
# Warmup Iteration   3: 0.952 ms/op
# Warmup Iteration   4: 0.941 ms/op
# Warmup Iteration   5: 0.955 ms/op
Iteration   1: 0.965 ms/op
Iteration   2: 0.962 ms/op
Iteration   3: 0.940 ms/op
Iteration   4: 0.943 ms/op
Iteration   5: 0.940 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.950 ±(99.9%) 0.048 ms/op [Average]
  (min, avg, max) = (0.940, 0.950, 0.965), stdev = 0.012
  CI (99.9%): [0.902, 0.998] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 18.94% complete, ETA 01:22:56
# Fork: 1 of 1
# Warmup Iteration   1: 315.348 ms/op
# Warmup Iteration   2: 266.135 ms/op
# Warmup Iteration   3: 300.109 ms/op
# Warmup Iteration   4: 367.373 ms/op
# Warmup Iteration   5: 272.271 ms/op
Iteration   1: 314.839 ms/op
Iteration   2: 314.335 ms/op
Iteration   3: 276.878 ms/op
Iteration   4: 302.874 ms/op
Iteration   5: 303.511 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  302.487 ±(99.9%) 59.341 ms/op [Average]
  (min, avg, max) = (276.878, 302.487, 314.839), stdev = 15.411
  CI (99.9%): [243.146, 361.828] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 19.13% complete, ETA 01:22:48
# Fork: 1 of 1
# Warmup Iteration   1: 292.553 ms/op
# Warmup Iteration   2: 305.685 ms/op
# Warmup Iteration   3: 281.916 ms/op
# Warmup Iteration   4: 323.115 ms/op
# Warmup Iteration   5: 292.081 ms/op
Iteration   1: 290.350 ms/op
Iteration   2: 313.559 ms/op
Iteration   3: 290.222 ms/op
Iteration   4: 325.580 ms/op
Iteration   5: 277.173 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  299.377 ±(99.9%) 75.704 ms/op [Average]
  (min, avg, max) = (277.173, 299.377, 325.580), stdev = 19.660
  CI (99.9%): [223.673, 375.081] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 19.32% complete, ETA 01:22:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.079 ms/op
# Warmup Iteration   2: 0.067 ms/op
# Warmup Iteration   3: 0.066 ms/op
# Warmup Iteration   4: 0.066 ms/op
# Warmup Iteration   5: 0.066 ms/op
Iteration   1: 0.066 ms/op
Iteration   2: 0.066 ms/op
Iteration   3: 0.066 ms/op
Iteration   4: 0.067 ms/op
Iteration   5: 0.067 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.067 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.066, 0.067, 0.067), stdev = 0.001
  CI (99.9%): [0.064, 0.070] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 19.51% complete, ETA 01:22:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.076 ms/op
# Warmup Iteration   2: 0.067 ms/op
# Warmup Iteration   3: 0.066 ms/op
# Warmup Iteration   4: 0.066 ms/op
# Warmup Iteration   5: 0.067 ms/op
Iteration   1: 0.068 ms/op
Iteration   2: 0.066 ms/op
Iteration   3: 0.067 ms/op
Iteration   4: 0.067 ms/op
Iteration   5: 0.068 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.067 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.066, 0.067, 0.068), stdev = 0.001
  CI (99.9%): [0.064, 0.070] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 19.70% complete, ETA 01:22:08
# Fork: 1 of 1
# Warmup Iteration   1: 2.163 ms/op
# Warmup Iteration   2: 1.859 ms/op
# Warmup Iteration   3: 1.844 ms/op
# Warmup Iteration   4: 1.919 ms/op
# Warmup Iteration   5: 1.834 ms/op
Iteration   1: 1.873 ms/op
Iteration   2: 1.930 ms/op
Iteration   3: 1.885 ms/op
Iteration   4: 1.903 ms/op
Iteration   5: 1.882 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1.895 ±(99.9%) 0.087 ms/op [Average]
  (min, avg, max) = (1.873, 1.895, 1.930), stdev = 0.023
  CI (99.9%): [1.807, 1.982] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 19.89% complete, ETA 01:21:52
# Fork: 1 of 1
# Warmup Iteration   1: 2.030 ms/op
# Warmup Iteration   2: 1.911 ms/op
# Warmup Iteration   3: 1.849 ms/op
# Warmup Iteration   4: 1.879 ms/op
# Warmup Iteration   5: 1.864 ms/op
Iteration   1: 1.852 ms/op
Iteration   2: 1.843 ms/op
Iteration   3: 1.848 ms/op
Iteration   4: 1.850 ms/op
Iteration   5: 1.822 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1.843 ±(99.9%) 0.047 ms/op [Average]
  (min, avg, max) = (1.822, 1.843, 1.852), stdev = 0.012
  CI (99.9%): [1.796, 1.890] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 20.08% complete, ETA 01:21:36
# Fork: 1 of 1
# Warmup Iteration   1: 649.797 ms/op
# Warmup Iteration   2: 627.015 ms/op
# Warmup Iteration   3: 666.175 ms/op
# Warmup Iteration   4: 660.695 ms/op
# Warmup Iteration   5: 644.823 ms/op
Iteration   1: 687.089 ms/op
Iteration   2: 583.581 ms/op
Iteration   3: 624.250 ms/op
Iteration   4: 652.895 ms/op
Iteration   5: 575.996 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  624.762 ±(99.9%) 180.101 ms/op [Average]
  (min, avg, max) = (575.996, 624.762, 687.089), stdev = 46.772
  CI (99.9%): [444.661, 804.863] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 20.27% complete, ETA 01:21:34
# Fork: 1 of 1
# Warmup Iteration   1: 650.988 ms/op
# Warmup Iteration   2: 643.639 ms/op
# Warmup Iteration   3: 596.752 ms/op
# Warmup Iteration   4: 653.686 ms/op
# Warmup Iteration   5: 568.688 ms/op
Iteration   1: 654.781 ms/op
Iteration   2: 714.115 ms/op
Iteration   3: 617.535 ms/op
Iteration   4: 683.092 ms/op
Iteration   5: 583.018 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  650.508 ±(99.9%) 199.789 ms/op [Average]
  (min, avg, max) = (583.018, 650.508, 714.115), stdev = 51.884
  CI (99.9%): [450.720, 850.297] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 20.45% complete, ETA 01:21:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.155 ms/op
# Warmup Iteration   2: 0.131 ms/op
# Warmup Iteration   3: 0.131 ms/op
# Warmup Iteration   4: 0.131 ms/op
# Warmup Iteration   5: 0.129 ms/op
Iteration   1: 0.129 ms/op
Iteration   2: 0.130 ms/op
Iteration   3: 0.130 ms/op
Iteration   4: 0.129 ms/op
Iteration   5: 0.132 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.130 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.129, 0.130, 0.132), stdev = 0.002
  CI (99.9%): [0.124, 0.136] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 20.64% complete, ETA 01:21:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.143 ms/op
# Warmup Iteration   2: 0.131 ms/op
# Warmup Iteration   3: 0.135 ms/op
# Warmup Iteration   4: 0.131 ms/op
# Warmup Iteration   5: 0.128 ms/op
Iteration   1: 0.127 ms/op
Iteration   2: 0.128 ms/op
Iteration   3: 0.132 ms/op
Iteration   4: 0.130 ms/op
Iteration   5: 0.127 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.129 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.127, 0.129, 0.132), stdev = 0.002
  CI (99.9%): [0.120, 0.138] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 20.83% complete, ETA 01:20:59
# Fork: 1 of 1
# Warmup Iteration   1: 4.605 ms/op
# Warmup Iteration   2: 3.759 ms/op
# Warmup Iteration   3: 3.564 ms/op
# Warmup Iteration   4: 3.555 ms/op
# Warmup Iteration   5: 3.744 ms/op
Iteration   1: 3.841 ms/op
Iteration   2: 3.745 ms/op
Iteration   3: 3.540 ms/op
Iteration   4: 3.497 ms/op
Iteration   5: 3.495 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  3.624 ±(99.9%) 0.614 ms/op [Average]
  (min, avg, max) = (3.495, 3.624, 3.841), stdev = 0.160
  CI (99.9%): [3.009, 4.238] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 21.02% complete, ETA 01:20:43
# Fork: 1 of 1
# Warmup Iteration   1: 4.253 ms/op
# Warmup Iteration   2: 3.542 ms/op
# Warmup Iteration   3: 3.552 ms/op
# Warmup Iteration   4: 3.527 ms/op
# Warmup Iteration   5: 3.476 ms/op
Iteration   1: 3.547 ms/op
Iteration   2: 3.501 ms/op
Iteration   3: 3.517 ms/op
Iteration   4: 3.519 ms/op
Iteration   5: 3.494 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  3.516 ±(99.9%) 0.079 ms/op [Average]
  (min, avg, max) = (3.494, 3.516, 3.547), stdev = 0.021
  CI (99.9%): [3.437, 3.595] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 21.21% complete, ETA 01:20:27
# Fork: 1 of 1
# Warmup Iteration   1: 1461.285 ms/op
# Warmup Iteration   2: 1487.780 ms/op
# Warmup Iteration   3: 1546.114 ms/op
# Warmup Iteration   4: 1309.424 ms/op
# Warmup Iteration   5: 1708.220 ms/op
Iteration   1: 1414.663 ms/op
Iteration   2: 1627.850 ms/op
Iteration   3: 1559.176 ms/op
Iteration   4: 1078.038 ms/op
Iteration   5: 1440.504 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1424.046 ±(99.9%) 816.565 ms/op [Average]
  (min, avg, max) = (1078.038, 1424.046, 1627.850), stdev = 212.059
  CI (99.9%): [607.481, 2240.612] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 21.40% complete, ETA 01:20:30
# Fork: 1 of 1
# Warmup Iteration   1: 1296.606 ms/op
# Warmup Iteration   2: 1168.912 ms/op
# Warmup Iteration   3: 1294.971 ms/op
# Warmup Iteration   4: 1399.655 ms/op
# Warmup Iteration   5: 1178.266 ms/op
Iteration   1: 1344.664 ms/op
Iteration   2: 1900.988 ms/op
Iteration   3: 1120.733 ms/op
Iteration   4: 1393.330 ms/op
Iteration   5: 1401.262 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1432.195 ±(99.9%) 1100.813 ms/op [Average]
  (min, avg, max) = (1120.733, 1432.195, 1900.988), stdev = 285.878
  CI (99.9%): [331.383, 2533.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 21.59% complete, ETA 01:20:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.319 ms/op
# Warmup Iteration   2: 0.263 ms/op
# Warmup Iteration   3: 0.261 ms/op
# Warmup Iteration   4: 0.259 ms/op
# Warmup Iteration   5: 0.258 ms/op
Iteration   1: 0.258 ms/op
Iteration   2: 0.259 ms/op
Iteration   3: 0.262 ms/op
Iteration   4: 0.262 ms/op
Iteration   5: 0.261 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.260 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.258, 0.260, 0.262), stdev = 0.002
  CI (99.9%): [0.253, 0.268] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 21.78% complete, ETA 01:20:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.297 ms/op
# Warmup Iteration   2: 0.266 ms/op
# Warmup Iteration   3: 0.256 ms/op
# Warmup Iteration   4: 0.260 ms/op
# Warmup Iteration   5: 0.262 ms/op
Iteration   1: 0.263 ms/op
Iteration   2: 0.265 ms/op
Iteration   3: 0.261 ms/op
Iteration   4: 0.259 ms/op
Iteration   5: 0.265 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.262 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.259, 0.262, 0.265), stdev = 0.003
  CI (99.9%): [0.253, 0.272] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 21.97% complete, ETA 01:19:58
# Fork: 1 of 1
# Warmup Iteration   1: 9.134 ms/op
# Warmup Iteration   2: 7.501 ms/op
# Warmup Iteration   3: 7.391 ms/op
# Warmup Iteration   4: 7.441 ms/op
# Warmup Iteration   5: 7.393 ms/op
Iteration   1: 7.473 ms/op
Iteration   2: 7.469 ms/op
Iteration   3: 7.492 ms/op
Iteration   4: 7.478 ms/op
Iteration   5: 7.444 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  7.471 ±(99.9%) 0.066 ms/op [Average]
  (min, avg, max) = (7.444, 7.471, 7.492), stdev = 0.017
  CI (99.9%): [7.405, 7.537] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 22.16% complete, ETA 01:19:42
# Fork: 1 of 1
# Warmup Iteration   1: 9.029 ms/op
# Warmup Iteration   2: 7.437 ms/op
# Warmup Iteration   3: 7.489 ms/op
# Warmup Iteration   4: 7.497 ms/op
# Warmup Iteration   5: 7.455 ms/op
Iteration   1: 7.473 ms/op
Iteration   2: 7.400 ms/op
Iteration   3: 7.440 ms/op
Iteration   4: 7.372 ms/op
Iteration   5: 7.345 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  7.406 ±(99.9%) 0.198 ms/op [Average]
  (min, avg, max) = (7.345, 7.406, 7.473), stdev = 0.051
  CI (99.9%): [7.208, 7.604] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 22.35% complete, ETA 01:19:27
# Fork: 1 of 1
# Warmup Iteration   1: 2582.145 ms/op
# Warmup Iteration   2: 3269.726 ms/op
# Warmup Iteration   3: 2873.251 ms/op
# Warmup Iteration   4: 2809.104 ms/op
# Warmup Iteration   5: 2793.349 ms/op
Iteration   1: 2762.225 ms/op
Iteration   2: 2777.413 ms/op
Iteration   3: 2642.486 ms/op
Iteration   4: 2807.099 ms/op
Iteration   5: 2905.676 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  2778.980 ±(99.9%) 364.066 ms/op [Average]
  (min, avg, max) = (2642.486, 2778.980, 2905.676), stdev = 94.547
  CI (99.9%): [2414.913, 3143.046] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 22.54% complete, ETA 01:20:20
# Fork: 1 of 1
# Warmup Iteration   1: 2716.098 ms/op
# Warmup Iteration   2: 2813.714 ms/op
# Warmup Iteration   3: 2775.079 ms/op
# Warmup Iteration   4: 2776.079 ms/op
# Warmup Iteration   5: 2734.164 ms/op
Iteration   1: 2583.724 ms/op
Iteration   2: 2798.297 ms/op
Iteration   3: 2701.537 ms/op
Iteration   4: 2727.932 ms/op
Iteration   5: 2762.656 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  2714.829 ±(99.9%) 315.138 ms/op [Average]
  (min, avg, max) = (2583.724, 2714.829, 2798.297), stdev = 81.840
  CI (99.9%): [2399.691, 3029.967] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 22.73% complete, ETA 01:21:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.595 ms/op
# Warmup Iteration   2: 0.522 ms/op
# Warmup Iteration   3: 0.510 ms/op
# Warmup Iteration   4: 0.502 ms/op
# Warmup Iteration   5: 0.507 ms/op
Iteration   1: 0.519 ms/op
Iteration   2: 0.511 ms/op
Iteration   3: 0.514 ms/op
Iteration   4: 0.516 ms/op
Iteration   5: 0.519 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.516 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.511, 0.516, 0.519), stdev = 0.003
  CI (99.9%): [0.503, 0.528] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 22.92% complete, ETA 01:20:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.575 ms/op
# Warmup Iteration   2: 0.514 ms/op
# Warmup Iteration   3: 0.510 ms/op
# Warmup Iteration   4: 0.516 ms/op
# Warmup Iteration   5: 0.516 ms/op
Iteration   1: 0.528 ms/op
Iteration   2: 0.525 ms/op
Iteration   3: 0.515 ms/op
Iteration   4: 0.520 ms/op
Iteration   5: 0.520 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.522 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.515, 0.522, 0.528), stdev = 0.005
  CI (99.9%): [0.502, 0.541] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 23.11% complete, ETA 01:20:35
# Fork: 1 of 1
# Warmup Iteration   1: 20.102 ms/op
# Warmup Iteration   2: 15.466 ms/op
# Warmup Iteration   3: 14.387 ms/op
# Warmup Iteration   4: 14.210 ms/op
# Warmup Iteration   5: 14.173 ms/op
Iteration   1: 14.163 ms/op
Iteration   2: 14.294 ms/op
Iteration   3: 14.431 ms/op
Iteration   4: 14.106 ms/op
Iteration   5: 14.199 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  14.239 ±(99.9%) 0.490 ms/op [Average]
  (min, avg, max) = (14.106, 14.239, 14.431), stdev = 0.127
  CI (99.9%): [13.748, 14.729] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 23.30% complete, ETA 01:20:19
# Fork: 1 of 1
# Warmup Iteration   1: 21.386 ms/op
# Warmup Iteration   2: 17.698 ms/op
# Warmup Iteration   3: 14.926 ms/op
# Warmup Iteration   4: 15.038 ms/op
# Warmup Iteration   5: 14.851 ms/op
Iteration   1: 14.620 ms/op
Iteration   2: 14.367 ms/op
Iteration   3: 14.236 ms/op
Iteration   4: 13.922 ms/op
Iteration   5: 13.939 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  14.217 ±(99.9%) 1.138 ms/op [Average]
  (min, avg, max) = (13.922, 14.217, 14.620), stdev = 0.296
  CI (99.9%): [13.079, 15.355] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 23.48% complete, ETA 01:20:04
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:100)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 23.67% complete, ETA 01:20:06
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:100)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 23.86% complete, ETA 01:20:11
# Fork: 1 of 1
# Warmup Iteration   1: 1.613 ms/op
# Warmup Iteration   2: 1.311 ms/op
# Warmup Iteration   3: 1.289 ms/op
# Warmup Iteration   4: 2.147 ms/op
# Warmup Iteration   5: 1.063 ms/op
Iteration   1: 1.035 ms/op
Iteration   2: 1.020 ms/op
Iteration   3: 0.980 ms/op
Iteration   4: 0.970 ms/op
Iteration   5: 0.955 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.992 ±(99.9%) 0.131 ms/op [Average]
  (min, avg, max) = (0.955, 0.992, 1.035), stdev = 0.034
  CI (99.9%): [0.861, 1.123] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 24.05% complete, ETA 01:19:54
# Fork: 1 of 1
# Warmup Iteration   1: 1.078 ms/op
# Warmup Iteration   2: 1.092 ms/op
# Warmup Iteration   3: 0.972 ms/op
# Warmup Iteration   4: 0.945 ms/op
# Warmup Iteration   5: 0.942 ms/op
Iteration   1: 0.943 ms/op
Iteration   2: 0.928 ms/op
Iteration   3: 0.948 ms/op
Iteration   4: 0.939 ms/op
Iteration   5: 1.112 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.974 ±(99.9%) 0.299 ms/op [Average]
  (min, avg, max) = (0.928, 0.974, 1.112), stdev = 0.078
  CI (99.9%): [0.675, 1.273] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 24.24% complete, ETA 01:19:38
# Fork: 1 of 1
# Warmup Iteration   1: 48.478 ms/op
# Warmup Iteration   2: 29.483 ms/op
# Warmup Iteration   3: 35.313 ms/op
# Warmup Iteration   4: 29.706 ms/op
# Warmup Iteration   5: 44.718 ms/op
Iteration   1: 68.318 ms/op
Iteration   2: 65.734 ms/op
Iteration   3: 57.246 ms/op
Iteration   4: 63.596 ms/op
Iteration   5: 34.113 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  57.801 ±(99.9%) 53.376 ms/op [Average]
  (min, avg, max) = (34.113, 57.801, 68.318), stdev = 13.861
  CI (99.9%): [4.426, 111.177] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 24.43% complete, ETA 01:19:23
# Fork: 1 of 1
# Warmup Iteration   1: 72.867 ms/op
# Warmup Iteration   2: 52.649 ms/op
# Warmup Iteration   3: 36.628 ms/op
# Warmup Iteration   4: 34.740 ms/op
# Warmup Iteration   5: 36.535 ms/op
Iteration   1: 64.431 ms/op
Iteration   2: 54.911 ms/op
Iteration   3: 57.781 ms/op
Iteration   4: 51.441 ms/op
Iteration   5: 51.317 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  55.976 ±(99.9%) 20.928 ms/op [Average]
  (min, avg, max) = (51.317, 55.976, 64.431), stdev = 5.435
  CI (99.9%): [35.048, 76.905] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 24.62% complete, ETA 01:19:07
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:100)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 24.81% complete, ETA 01:19:12
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:100)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 25.00% complete, ETA 01:19:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 25.19% complete, ETA 01:19:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 25.38% complete, ETA 01:18:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 25.57% complete, ETA 01:18:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 25.76% complete, ETA 01:18:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 25.95% complete, ETA 01:17:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 26.14% complete, ETA 01:17:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 26.33% complete, ETA 01:17:22
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 26.52% complete, ETA 01:17:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 26.70% complete, ETA 01:16:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 26.89% complete, ETA 01:16:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 27.08% complete, ETA 01:16:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 27.27% complete, ETA 01:16:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 27.46% complete, ETA 01:15:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 27.65% complete, ETA 01:15:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 27.84% complete, ETA 01:15:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 28.03% complete, ETA 01:15:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 28.22% complete, ETA 01:14:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 28.41% complete, ETA 01:14:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 28.60% complete, ETA 01:14:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 28.79% complete, ETA 01:14:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 28.98% complete, ETA 01:13:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 29.17% complete, ETA 01:13:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.003, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 29.36% complete, ETA 01:13:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.005 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.003, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 29.55% complete, ETA 01:13:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 29.73% complete, ETA 01:12:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 29.92% complete, ETA 01:12:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.004, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 30.11% complete, ETA 01:12:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.004, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 30.30% complete, ETA 01:12:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.007 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.007, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.007, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 30.49% complete, ETA 01:11:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.007 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.007, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.007, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 30.68% complete, ETA 01:11:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.006 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 30.87% complete, ETA 01:11:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.006 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 31.06% complete, ETA 01:11:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.008 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.008, 0.008, 0.008), stdev = 0.001
  CI (99.9%): [0.008, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 31.25% complete, ETA 01:10:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.008 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.008, 0.008, 0.008), stdev = 0.001
  CI (99.9%): [0.008, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 31.44% complete, ETA 01:10:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.015 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.015, 0.015, 0.015), stdev = 0.001
  CI (99.9%): [0.014, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 31.63% complete, ETA 01:10:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.016 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.015, 0.016, 0.016), stdev = 0.001
  CI (99.9%): [0.014, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 31.82% complete, ETA 01:10:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.013 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.012, 0.013, 0.013), stdev = 0.001
  CI (99.9%): [0.011, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 32.01% complete, ETA 01:09:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.013 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.013, 0.013, 0.014), stdev = 0.001
  CI (99.9%): [0.013, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 32.20% complete, ETA 01:09:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.018 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.018 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.017, 0.018, 0.018), stdev = 0.001
  CI (99.9%): [0.017, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 32.39% complete, ETA 01:09:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.016 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.016, 0.016, 0.017), stdev = 0.001
  CI (99.9%): [0.016, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 32.58% complete, ETA 01:09:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.030 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.029 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.029 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.029, 0.029, 0.029), stdev = 0.001
  CI (99.9%): [0.028, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 32.77% complete, ETA 01:08:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.036 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.038 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.044 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.043 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.037, 0.043, 0.048), stdev = 0.005
  CI (99.9%): [0.023, 0.063] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 32.95% complete, ETA 01:08:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.023 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.023, 0.023, 0.024), stdev = 0.001
  CI (99.9%): [0.022, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 33.14% complete, ETA 01:08:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.028 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.025, 0.028, 0.031), stdev = 0.002
  CI (99.9%): [0.018, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 33.33% complete, ETA 01:08:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.033 ms/op
# Warmup Iteration   4: 0.033 ms/op
# Warmup Iteration   5: 0.035 ms/op
Iteration   1: 0.035 ms/op
Iteration   2: 0.034 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.034 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.034 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.033, 0.034, 0.035), stdev = 0.001
  CI (99.9%): [0.031, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 33.52% complete, ETA 01:07:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.033 ms/op
# Warmup Iteration   5: 0.034 ms/op
Iteration   1: 0.034 ms/op
Iteration   2: 0.036 ms/op
Iteration   3: 0.035 ms/op
Iteration   4: 0.035 ms/op
Iteration   5: 0.036 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.035 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.034, 0.035, 0.036), stdev = 0.001
  CI (99.9%): [0.031, 0.039] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 33.71% complete, ETA 01:07:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.067 ms/op
# Warmup Iteration   2: 0.058 ms/op
# Warmup Iteration   3: 0.060 ms/op
# Warmup Iteration   4: 0.059 ms/op
# Warmup Iteration   5: 0.063 ms/op
Iteration   1: 0.058 ms/op
Iteration   2: 0.063 ms/op
Iteration   3: 0.075 ms/op
Iteration   4: 0.062 ms/op
Iteration   5: 0.071 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.066 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.058, 0.066, 0.075), stdev = 0.007
  CI (99.9%): [0.039, 0.093] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 33.90% complete, ETA 01:07:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 ms/op
# Warmup Iteration   2: 0.059 ms/op
# Warmup Iteration   3: 0.057 ms/op
# Warmup Iteration   4: 0.058 ms/op
# Warmup Iteration   5: 0.057 ms/op
Iteration   1: 0.058 ms/op
Iteration   2: 0.059 ms/op
Iteration   3: 0.060 ms/op
Iteration   4: 0.066 ms/op
Iteration   5: 0.065 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.062 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.058, 0.062, 0.066), stdev = 0.004
  CI (99.9%): [0.048, 0.076] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 34.09% complete, ETA 01:07:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.048 ms/op
# Warmup Iteration   3: 0.047 ms/op
# Warmup Iteration   4: 0.047 ms/op
# Warmup Iteration   5: 0.049 ms/op
Iteration   1: 0.047 ms/op
Iteration   2: 0.054 ms/op
Iteration   3: 0.053 ms/op
Iteration   4: 0.057 ms/op
Iteration   5: 0.050 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.052 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.047, 0.052, 0.057), stdev = 0.004
  CI (99.9%): [0.039, 0.066] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 34.28% complete, ETA 01:07:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.052 ms/op
# Warmup Iteration   2: 0.052 ms/op
# Warmup Iteration   3: 0.053 ms/op
# Warmup Iteration   4: 0.050 ms/op
# Warmup Iteration   5: 0.050 ms/op
Iteration   1: 0.056 ms/op
Iteration   2: 0.055 ms/op
Iteration   3: 0.055 ms/op
Iteration   4: 0.052 ms/op
Iteration   5: 0.069 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.057 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (0.052, 0.057, 0.069), stdev = 0.007
  CI (99.9%): [0.031, 0.084] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 34.47% complete, ETA 01:06:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.090 ms/op
# Warmup Iteration   2: 0.067 ms/op
# Warmup Iteration   3: 0.064 ms/op
# Warmup Iteration   4: 0.064 ms/op
# Warmup Iteration   5: 0.065 ms/op
Iteration   1: 0.070 ms/op
Iteration   2: 0.085 ms/op
Iteration   3: 0.079 ms/op
Iteration   4: 0.085 ms/op
Iteration   5: 0.078 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.080 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.070, 0.080, 0.085), stdev = 0.006
  CI (99.9%): [0.055, 0.104] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 34.66% complete, ETA 01:06:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.088 ms/op
# Warmup Iteration   2: 0.091 ms/op
# Warmup Iteration   3: 0.100 ms/op
# Warmup Iteration   4: 0.082 ms/op
# Warmup Iteration   5: 0.072 ms/op
Iteration   1: 0.071 ms/op
Iteration   2: 0.075 ms/op
Iteration   3: 0.074 ms/op
Iteration   4: 0.071 ms/op
Iteration   5: 0.074 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.073 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.071, 0.073, 0.075), stdev = 0.002
  CI (99.9%): [0.066, 0.080] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 34.85% complete, ETA 01:06:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.214 ms/op
# Warmup Iteration   2: 0.155 ms/op
# Warmup Iteration   3: 0.136 ms/op
# Warmup Iteration   4: 0.141 ms/op
# Warmup Iteration   5: 0.148 ms/op
Iteration   1: 0.134 ms/op
Iteration   2: 0.127 ms/op
Iteration   3: 0.136 ms/op
Iteration   4: 0.128 ms/op
Iteration   5: 0.123 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.130 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.123, 0.130, 0.136), stdev = 0.005
  CI (99.9%): [0.109, 0.150] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 35.04% complete, ETA 01:06:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.173 ms/op
# Warmup Iteration   2: 0.128 ms/op
# Warmup Iteration   3: 0.159 ms/op
# Warmup Iteration   4: 0.158 ms/op
# Warmup Iteration   5: 0.184 ms/op
Iteration   1: 0.181 ms/op
Iteration   2: 0.371 ms/op
Iteration   3: 0.253 ms/op
Iteration   4: 0.293 ms/op
Iteration   5: 0.416 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.303 ±(99.9%) 0.360 ms/op [Average]
  (min, avg, max) = (0.181, 0.303, 0.416), stdev = 0.094
  CI (99.9%): [? 0, 0.663] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 35.23% complete, ETA 01:05:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.390 ms/op
# Warmup Iteration   2: 0.323 ms/op
# Warmup Iteration   3: 0.364 ms/op
# Warmup Iteration   4: 0.419 ms/op
# Warmup Iteration   5: 0.240 ms/op
Iteration   1: 0.181 ms/op
Iteration   2: 0.164 ms/op
Iteration   3: 0.200 ms/op
Iteration   4: 0.256 ms/op
Iteration   5: 0.237 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.208 ±(99.9%) 0.147 ms/op [Average]
  (min, avg, max) = (0.164, 0.208, 0.256), stdev = 0.038
  CI (99.9%): [0.061, 0.354] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 35.42% complete, ETA 01:05:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.243 ms/op
# Warmup Iteration   2: 0.232 ms/op
# Warmup Iteration   3: 0.376 ms/op
# Warmup Iteration   4: 0.315 ms/op
# Warmup Iteration   5: 0.305 ms/op
Iteration   1: 0.468 ms/op
Iteration   2: 0.312 ms/op
Iteration   3: 0.375 ms/op
Iteration   4: 0.344 ms/op
Iteration   5: 0.533 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.406 ±(99.9%) 0.353 ms/op [Average]
  (min, avg, max) = (0.312, 0.406, 0.533), stdev = 0.092
  CI (99.9%): [0.054, 0.759] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 35.61% complete, ETA 01:05:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.638 ms/op
# Warmup Iteration   2: 0.443 ms/op
# Warmup Iteration   3: 0.364 ms/op
# Warmup Iteration   4: 0.207 ms/op
# Warmup Iteration   5: 0.173 ms/op
Iteration   1: 0.174 ms/op
Iteration   2: 0.170 ms/op
Iteration   3: 0.165 ms/op
Iteration   4: 0.169 ms/op
Iteration   5: 0.171 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.170 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.165, 0.170, 0.174), stdev = 0.003
  CI (99.9%): [0.157, 0.182] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 35.80% complete, ETA 01:05:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.206 ms/op
# Warmup Iteration   2: 0.175 ms/op
# Warmup Iteration   3: 0.182 ms/op
# Warmup Iteration   4: 0.202 ms/op
# Warmup Iteration   5: 0.210 ms/op
Iteration   1: 0.165 ms/op
Iteration   2: 0.143 ms/op
Iteration   3: 0.143 ms/op
Iteration   4: 0.153 ms/op
Iteration   5: 0.181 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.157 ±(99.9%) 0.062 ms/op [Average]
  (min, avg, max) = (0.143, 0.157, 0.181), stdev = 0.016
  CI (99.9%): [0.096, 0.219] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 35.98% complete, ETA 01:05:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.596 ms/op
# Warmup Iteration   2: 0.524 ms/op
# Warmup Iteration   3: 0.468 ms/op
# Warmup Iteration   4: 0.432 ms/op
# Warmup Iteration   5: 0.506 ms/op
Iteration   1: 0.503 ms/op
Iteration   2: 0.461 ms/op
Iteration   3: 0.431 ms/op
Iteration   4: 0.423 ms/op
Iteration   5: 0.448 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.453 ±(99.9%) 0.121 ms/op [Average]
  (min, avg, max) = (0.423, 0.453, 0.503), stdev = 0.031
  CI (99.9%): [0.332, 0.575] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 36.17% complete, ETA 01:04:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.510 ms/op
# Warmup Iteration   2: 0.448 ms/op
# Warmup Iteration   3: 0.412 ms/op
# Warmup Iteration   4: 0.406 ms/op
# Warmup Iteration   5: 0.410 ms/op
Iteration   1: 0.400 ms/op
Iteration   2: 0.424 ms/op
Iteration   3: 0.404 ms/op
Iteration   4: 0.435 ms/op
Iteration   5: 0.404 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.413 ±(99.9%) 0.059 ms/op [Average]
  (min, avg, max) = (0.400, 0.413, 0.435), stdev = 0.015
  CI (99.9%): [0.354, 0.473] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 36.36% complete, ETA 01:04:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.257 ms/op
# Warmup Iteration   2: 0.240 ms/op
# Warmup Iteration   3: 0.252 ms/op
# Warmup Iteration   4: 0.233 ms/op
# Warmup Iteration   5: 0.233 ms/op
Iteration   1: 0.222 ms/op
Iteration   2: 0.221 ms/op
Iteration   3: 0.239 ms/op
Iteration   4: 0.282 ms/op
Iteration   5: 0.267 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.246 ±(99.9%) 0.106 ms/op [Average]
  (min, avg, max) = (0.221, 0.246, 0.282), stdev = 0.027
  CI (99.9%): [0.140, 0.352] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 36.55% complete, ETA 01:04:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.231 ms/op
# Warmup Iteration   2: 0.210 ms/op
# Warmup Iteration   3: 0.212 ms/op
# Warmup Iteration   4: 0.211 ms/op
# Warmup Iteration   5: 0.218 ms/op
Iteration   1: 0.220 ms/op
Iteration   2: 0.229 ms/op
Iteration   3: 0.219 ms/op
Iteration   4: 0.213 ms/op
Iteration   5: 0.244 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.225 ±(99.9%) 0.046 ms/op [Average]
  (min, avg, max) = (0.213, 0.225, 0.244), stdev = 0.012
  CI (99.9%): [0.179, 0.271] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 36.74% complete, ETA 01:04:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.342 ms/op
# Warmup Iteration   2: 0.286 ms/op
# Warmup Iteration   3: 0.301 ms/op
# Warmup Iteration   4: 0.311 ms/op
# Warmup Iteration   5: 0.347 ms/op
Iteration   1: 0.296 ms/op
Iteration   2: 0.284 ms/op
Iteration   3: 0.274 ms/op
Iteration   4: 0.280 ms/op
Iteration   5: 0.292 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.285 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.274, 0.285, 0.296), stdev = 0.009
  CI (99.9%): [0.251, 0.319] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 36.93% complete, ETA 01:04:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.321 ms/op
# Warmup Iteration   2: 0.293 ms/op
# Warmup Iteration   3: 0.279 ms/op
# Warmup Iteration   4: 0.306 ms/op
# Warmup Iteration   5: 0.297 ms/op
Iteration   1: 0.309 ms/op
Iteration   2: 0.299 ms/op
Iteration   3: 0.348 ms/op
Iteration   4: 0.299 ms/op
Iteration   5: 0.306 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.312 ±(99.9%) 0.078 ms/op [Average]
  (min, avg, max) = (0.299, 0.312, 0.348), stdev = 0.020
  CI (99.9%): [0.234, 0.390] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 37.12% complete, ETA 01:03:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.923 ms/op
# Warmup Iteration   2: 0.820 ms/op
# Warmup Iteration   3: 0.640 ms/op
# Warmup Iteration   4: 0.822 ms/op
# Warmup Iteration   5: 0.763 ms/op
Iteration   1: 0.921 ms/op
Iteration   2: 0.895 ms/op
Iteration   3: 1.128 ms/op
Iteration   4: 1.335 ms/op
Iteration   5: 0.817 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  1.019 ±(99.9%) 0.812 ms/op [Average]
  (min, avg, max) = (0.817, 1.019, 1.335), stdev = 0.211
  CI (99.9%): [0.207, 1.831] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 37.31% complete, ETA 01:03:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.894 ms/op
# Warmup Iteration   2: 0.699 ms/op
# Warmup Iteration   3: 0.693 ms/op
# Warmup Iteration   4: 0.742 ms/op
# Warmup Iteration   5: 0.824 ms/op
Iteration   1: 0.720 ms/op
Iteration   2: 0.717 ms/op
Iteration   3: 0.857 ms/op
Iteration   4: 0.896 ms/op
Iteration   5: 1.072 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.853 ±(99.9%) 0.564 ms/op [Average]
  (min, avg, max) = (0.717, 0.853, 1.072), stdev = 0.147
  CI (99.9%): [0.288, 1.417] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 37.50% complete, ETA 01:03:22
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 37.69% complete, ETA 01:03:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 37.88% complete, ETA 01:02:56
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 38.07% complete, ETA 01:02:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 38.26% complete, ETA 01:02:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 38.45% complete, ETA 01:02:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 38.64% complete, ETA 01:02:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 38.83% complete, ETA 01:01:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 39.02% complete, ETA 01:01:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 39.20% complete, ETA 01:01:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 39.39% complete, ETA 01:01:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 39.58% complete, ETA 01:01:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 39.77% complete, ETA 01:00:47
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 39.96% complete, ETA 01:00:34
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 40.15% complete, ETA 01:00:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 40.34% complete, ETA 01:00:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 40.53% complete, ETA 00:59:55
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 40.72% complete, ETA 00:59:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 40.91% complete, ETA 00:59:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 41.10% complete, ETA 00:59:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 41.29% complete, ETA 00:59:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 41.48% complete, ETA 00:58:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 41.67% complete, ETA 00:58:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 41.86% complete, ETA 00:58:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 42.05% complete, ETA 00:58:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 42.23% complete, ETA 00:58:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 42.42% complete, ETA 00:57:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 42.61% complete, ETA 00:57:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 42.80% complete, ETA 00:57:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 42.99% complete, ETA 00:57:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 43.18% complete, ETA 00:56:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 43.37% complete, ETA 00:56:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 43.56% complete, ETA 00:56:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 43.75% complete, ETA 00:56:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 43.94% complete, ETA 00:56:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 44.13% complete, ETA 00:55:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.003, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 44.32% complete, ETA 00:55:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.006 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.004, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 44.51% complete, ETA 00:55:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.005 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.004, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 44.70% complete, ETA 00:55:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.006 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 44.89% complete, ETA 00:55:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.006 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.005, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 45.08% complete, ETA 00:54:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.006 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 45.27% complete, ETA 00:54:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.007 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.005, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 45.45% complete, ETA 00:54:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.011 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.010, 0.011, 0.011), stdev = 0.001
  CI (99.9%): [0.010, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 45.64% complete, ETA 00:54:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.011 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.011, 0.011, 0.013), stdev = 0.001
  CI (99.9%): [0.008, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 45.83% complete, ETA 00:54:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.014 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.013, 0.014, 0.014), stdev = 0.001
  CI (99.9%): [0.012, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 46.02% complete, ETA 00:53:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.014 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.013, 0.014, 0.015), stdev = 0.001
  CI (99.9%): [0.012, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 46.21% complete, ETA 00:53:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.016 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.016, 0.016, 0.016), stdev = 0.001
  CI (99.9%): [0.015, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 46.40% complete, ETA 00:53:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.014 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.014, 0.014, 0.014), stdev = 0.001
  CI (99.9%): [0.012, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 46.59% complete, ETA 00:53:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.021 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.021, 0.021, 0.021), stdev = 0.001
  CI (99.9%): [0.021, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 46.78% complete, ETA 00:53:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.020 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.020, 0.020, 0.020), stdev = 0.001
  CI (99.9%): [0.020, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 46.97% complete, ETA 00:52:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.022 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.022, 0.022, 0.023), stdev = 0.001
  CI (99.9%): [0.021, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 47.16% complete, ETA 00:52:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.023 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.023, 0.023, 0.023), stdev = 0.001
  CI (99.9%): [0.022, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 47.35% complete, ETA 00:52:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.028 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.024 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.024, 0.024, 0.024), stdev = 0.001
  CI (99.9%): [0.023, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 47.54% complete, ETA 00:52:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.025 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.025, 0.025, 0.025), stdev = 0.001
  CI (99.9%): [0.024, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 47.73% complete, ETA 00:52:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.040 ms/op
# Warmup Iteration   2: 0.039 ms/op
# Warmup Iteration   3: 0.041 ms/op
# Warmup Iteration   4: 0.040 ms/op
# Warmup Iteration   5: 0.038 ms/op
Iteration   1: 0.039 ms/op
Iteration   2: 0.038 ms/op
Iteration   3: 0.038 ms/op
Iteration   4: 0.039 ms/op
Iteration   5: 0.038 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.039 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.038, 0.039, 0.039), stdev = 0.001
  CI (99.9%): [0.037, 0.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 47.92% complete, ETA 00:51:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.040 ms/op
# Warmup Iteration   2: 0.040 ms/op
# Warmup Iteration   3: 0.039 ms/op
# Warmup Iteration   4: 0.040 ms/op
# Warmup Iteration   5: 0.039 ms/op
Iteration   1: 0.039 ms/op
Iteration   2: 0.039 ms/op
Iteration   3: 0.039 ms/op
Iteration   4: 0.039 ms/op
Iteration   5: 0.039 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.039 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.039, 0.039, 0.039), stdev = 0.001
  CI (99.9%): [0.038, 0.039] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 48.11% complete, ETA 00:51:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.044 ms/op
# Warmup Iteration   3: 0.044 ms/op
# Warmup Iteration   4: 0.044 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.049 ms/op
Iteration   5: 0.049 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.048 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.047, 0.048, 0.049), stdev = 0.001
  CI (99.9%): [0.045, 0.052] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 48.30% complete, ETA 00:51:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.051 ms/op
Iteration   2: 0.049 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.049 ms/op
Iteration   5: 0.049 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.049 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.048, 0.049, 0.051), stdev = 0.001
  CI (99.9%): [0.045, 0.053] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 48.48% complete, ETA 00:51:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.064 ms/op
# Warmup Iteration   2: 0.048 ms/op
# Warmup Iteration   3: 0.048 ms/op
# Warmup Iteration   4: 0.055 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.051 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.050 ms/op
Iteration   4: 0.050 ms/op
Iteration   5: 0.050 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.050 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.050, 0.050, 0.051), stdev = 0.001
  CI (99.9%): [0.049, 0.052] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 48.67% complete, ETA 00:50:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.072 ms/op
# Warmup Iteration   2: 0.052 ms/op
# Warmup Iteration   3: 0.052 ms/op
# Warmup Iteration   4: 0.052 ms/op
# Warmup Iteration   5: 0.052 ms/op
Iteration   1: 0.052 ms/op
Iteration   2: 0.053 ms/op
Iteration   3: 0.053 ms/op
Iteration   4: 0.053 ms/op
Iteration   5: 0.053 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.053 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.052, 0.053, 0.053), stdev = 0.001
  CI (99.9%): [0.051, 0.054] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 48.86% complete, ETA 00:50:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.086 ms/op
# Warmup Iteration   2: 0.081 ms/op
# Warmup Iteration   3: 0.081 ms/op
# Warmup Iteration   4: 0.081 ms/op
# Warmup Iteration   5: 0.081 ms/op
Iteration   1: 0.082 ms/op
Iteration   2: 0.082 ms/op
Iteration   3: 0.083 ms/op
Iteration   4: 0.084 ms/op
Iteration   5: 0.088 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.084 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.082, 0.084, 0.088), stdev = 0.003
  CI (99.9%): [0.074, 0.094] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 49.05% complete, ETA 00:50:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.090 ms/op
# Warmup Iteration   2: 0.082 ms/op
# Warmup Iteration   3: 0.083 ms/op
# Warmup Iteration   4: 0.082 ms/op
# Warmup Iteration   5: 0.082 ms/op
Iteration   1: 0.082 ms/op
Iteration   2: 0.082 ms/op
Iteration   3: 0.082 ms/op
Iteration   4: 0.082 ms/op
Iteration   5: 0.086 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.083 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.082, 0.083, 0.086), stdev = 0.002
  CI (99.9%): [0.076, 0.090] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 49.24% complete, ETA 00:50:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.102 ms/op
# Warmup Iteration   2: 0.091 ms/op
# Warmup Iteration   3: 0.092 ms/op
# Warmup Iteration   4: 0.092 ms/op
# Warmup Iteration   5: 0.091 ms/op
Iteration   1: 0.091 ms/op
Iteration   2: 0.091 ms/op
Iteration   3: 0.090 ms/op
Iteration   4: 0.091 ms/op
Iteration   5: 0.091 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.091 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.090, 0.091, 0.091), stdev = 0.001
  CI (99.9%): [0.090, 0.092] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 49.43% complete, ETA 00:50:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.105 ms/op
# Warmup Iteration   2: 0.091 ms/op
# Warmup Iteration   3: 0.094 ms/op
# Warmup Iteration   4: 0.097 ms/op
# Warmup Iteration   5: 0.095 ms/op
Iteration   1: 0.095 ms/op
Iteration   2: 0.100 ms/op
Iteration   3: 0.096 ms/op
Iteration   4: 0.096 ms/op
Iteration   5: 0.095 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.096 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.095, 0.096, 0.100), stdev = 0.002
  CI (99.9%): [0.089, 0.104] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 49.62% complete, ETA 00:49:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.144 ms/op
# Warmup Iteration   2: 0.123 ms/op
# Warmup Iteration   3: 0.104 ms/op
# Warmup Iteration   4: 0.103 ms/op
# Warmup Iteration   5: 0.102 ms/op
Iteration   1: 0.101 ms/op
Iteration   2: 0.102 ms/op
Iteration   3: 0.106 ms/op
Iteration   4: 0.107 ms/op
Iteration   5: 0.109 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.105 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.101, 0.105, 0.109), stdev = 0.003
  CI (99.9%): [0.092, 0.117] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 49.81% complete, ETA 00:49:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.164 ms/op
# Warmup Iteration   2: 0.110 ms/op
# Warmup Iteration   3: 0.110 ms/op
# Warmup Iteration   4: 0.109 ms/op
# Warmup Iteration   5: 0.109 ms/op
Iteration   1: 0.110 ms/op
Iteration   2: 0.109 ms/op
Iteration   3: 0.109 ms/op
Iteration   4: 0.112 ms/op
Iteration   5: 0.111 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.110 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.109, 0.110, 0.112), stdev = 0.001
  CI (99.9%): [0.106, 0.115] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 50.00% complete, ETA 00:49:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 50.19% complete, ETA 00:49:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 50.38% complete, ETA 00:49:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 50.57% complete, ETA 00:49:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 50.76% complete, ETA 00:48:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 50.95% complete, ETA 00:48:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 51.14% complete, ETA 00:48:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 51.33% complete, ETA 00:48:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 51.52% complete, ETA 00:48:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 51.70% complete, ETA 00:47:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 51.89% complete, ETA 00:47:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.002, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 52.08% complete, ETA 00:47:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 52.27% complete, ETA 00:47:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 52.46% complete, ETA 00:47:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.003 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.009), stdev = 0.003
  CI (99.9%): [? 0, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 52.65% complete, ETA 00:46:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 52.84% complete, ETA 00:46:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 53.03% complete, ETA 00:46:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.005 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.002, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 53.22% complete, ETA 00:46:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.005 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 53.41% complete, ETA 00:46:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 53.60% complete, ETA 00:45:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 53.79% complete, ETA 00:45:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.006 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.002, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 53.98% complete, ETA 00:45:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.006 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.002, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 54.17% complete, ETA 00:45:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.010 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.008, 0.010, 0.011), stdev = 0.001
  CI (99.9%): [0.005, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 54.36% complete, ETA 00:45:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.011 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.009, 0.011, 0.014), stdev = 0.002
  CI (99.9%): [0.004, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 54.55% complete, ETA 00:45:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.009 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.006, 0.009, 0.018), stdev = 0.005
  CI (99.9%): [? 0, 0.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 54.73% complete, ETA 00:44:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.008 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.009), stdev = 0.002
  CI (99.9%): [0.001, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 54.92% complete, ETA 00:44:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.012 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.009, 0.012, 0.021), stdev = 0.005
  CI (99.9%): [? 0, 0.032] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 55.11% complete, ETA 00:44:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.012 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.009, 0.012, 0.020), stdev = 0.005
  CI (99.9%): [? 0, 0.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 55.30% complete, ETA 00:44:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.018 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.020 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.016, 0.020, 0.022), stdev = 0.002
  CI (99.9%): [0.011, 0.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 55.49% complete, ETA 00:44:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.020 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.018, 0.020, 0.023), stdev = 0.002
  CI (99.9%): [0.012, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 55.68% complete, ETA 00:43:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.017 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.013, 0.017, 0.022), stdev = 0.004
  CI (99.9%): [0.003, 0.031] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 55.87% complete, ETA 00:43:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.016 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.020), stdev = 0.003
  CI (99.9%): [0.006, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 56.06% complete, ETA 00:43:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.023 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.019, 0.023, 0.032), stdev = 0.005
  CI (99.9%): [0.003, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 56.25% complete, ETA 00:43:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.022 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.017, 0.022, 0.031), stdev = 0.006
  CI (99.9%): [? 0, 0.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 56.44% complete, ETA 00:43:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.041 ms/op
# Warmup Iteration   2: 0.033 ms/op
# Warmup Iteration   3: 0.034 ms/op
# Warmup Iteration   4: 0.036 ms/op
# Warmup Iteration   5: 0.034 ms/op
Iteration   1: 0.039 ms/op
Iteration   2: 0.037 ms/op
Iteration   3: 0.035 ms/op
Iteration   4: 0.041 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.037 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.031, 0.037, 0.041), stdev = 0.004
  CI (99.9%): [0.022, 0.052] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 56.63% complete, ETA 00:42:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.042 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.043 ms/op
Iteration   1: 0.034 ms/op
Iteration   2: 0.037 ms/op
Iteration   3: 0.033 ms/op
Iteration   4: 0.038 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.035 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.031, 0.035, 0.038), stdev = 0.003
  CI (99.9%): [0.024, 0.046] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 56.82% complete, ETA 00:42:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.028 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.051 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.030 ±(99.9%) 0.046 ms/op [Average]
  (min, avg, max) = (0.023, 0.030, 0.051), stdev = 0.012
  CI (99.9%): [? 0, 0.076] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 57.01% complete, ETA 00:42:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.029 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.027 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.033 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.031 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.028 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.024, 0.028, 0.033), stdev = 0.004
  CI (99.9%): [0.011, 0.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 57.20% complete, ETA 00:42:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.038 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.038 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.034 ms/op
Iteration   2: 0.044 ms/op
Iteration   3: 0.036 ms/op
Iteration   4: 0.038 ms/op
Iteration   5: 0.091 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.049 ±(99.9%) 0.093 ms/op [Average]
  (min, avg, max) = (0.034, 0.049, 0.091), stdev = 0.024
  CI (99.9%): [? 0, 0.142] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 57.39% complete, ETA 00:42:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.040 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.042 ms/op
# Warmup Iteration   4: 0.032 ms/op
# Warmup Iteration   5: 0.047 ms/op
Iteration   1: 0.040 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.040 ms/op
Iteration   5: 0.079 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.048 ±(99.9%) 0.070 ms/op [Average]
  (min, avg, max) = (0.034, 0.048, 0.079), stdev = 0.018
  CI (99.9%): [? 0, 0.117] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 57.58% complete, ETA 00:41:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.080 ms/op
# Warmup Iteration   2: 0.066 ms/op
# Warmup Iteration   3: 0.066 ms/op
# Warmup Iteration   4: 0.073 ms/op
# Warmup Iteration   5: 0.068 ms/op
Iteration   1: 0.083 ms/op
Iteration   2: 0.075 ms/op
Iteration   3: 0.074 ms/op
Iteration   4: 0.075 ms/op
Iteration   5: 0.063 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.074 ±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.063, 0.074, 0.083), stdev = 0.007
  CI (99.9%): [0.046, 0.102] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 57.77% complete, ETA 00:41:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.095 ms/op
# Warmup Iteration   2: 0.079 ms/op
# Warmup Iteration   3: 0.079 ms/op
# Warmup Iteration   4: 0.088 ms/op
# Warmup Iteration   5: 0.077 ms/op
Iteration   1: 0.117 ms/op
Iteration   2: 0.090 ms/op
Iteration   3: 0.082 ms/op
Iteration   4: 0.074 ms/op
Iteration   5: 0.108 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.094 ±(99.9%) 0.068 ms/op [Average]
  (min, avg, max) = (0.074, 0.094, 0.117), stdev = 0.018
  CI (99.9%): [0.026, 0.162] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 57.95% complete, ETA 00:41:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.065 ms/op
# Warmup Iteration   2: 0.066 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.084 ms/op
# Warmup Iteration   5: 0.072 ms/op
Iteration   1: 0.055 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.101 ms/op
Iteration   4: 0.055 ms/op
Iteration   5: 0.055 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.066 ±(99.9%) 0.077 ms/op [Average]
  (min, avg, max) = (0.055, 0.066, 0.101), stdev = 0.020
  CI (99.9%): [? 0, 0.142] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 58.14% complete, ETA 00:41:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.069 ms/op
# Warmup Iteration   2: 0.067 ms/op
# Warmup Iteration   3: 0.057 ms/op
# Warmup Iteration   4: 0.090 ms/op
# Warmup Iteration   5: 0.076 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.061 ms/op
Iteration   3: 0.078 ms/op
Iteration   4: 0.088 ms/op
Iteration   5: 0.052 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.067 ±(99.9%) 0.058 ms/op [Average]
  (min, avg, max) = (0.052, 0.067, 0.088), stdev = 0.015
  CI (99.9%): [0.009, 0.126] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 58.33% complete, ETA 00:41:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.098 ms/op
# Warmup Iteration   2: 0.082 ms/op
# Warmup Iteration   3: 0.083 ms/op
# Warmup Iteration   4: 0.075 ms/op
# Warmup Iteration   5: 0.100 ms/op
Iteration   1: 0.136 ms/op
Iteration   2: 0.109 ms/op
Iteration   3: 0.084 ms/op
Iteration   4: 0.130 ms/op
Iteration   5: 0.091 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.110 ±(99.9%) 0.089 ms/op [Average]
  (min, avg, max) = (0.084, 0.110, 0.136), stdev = 0.023
  CI (99.9%): [0.021, 0.199] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 58.52% complete, ETA 00:41:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.100 ms/op
# Warmup Iteration   2: 0.082 ms/op
# Warmup Iteration   3: 0.094 ms/op
# Warmup Iteration   4: 0.091 ms/op
# Warmup Iteration   5: 0.070 ms/op
Iteration   1: 0.152 ms/op
Iteration   2: 0.095 ms/op
Iteration   3: 0.089 ms/op
Iteration   4: 0.121 ms/op
Iteration   5: 0.085 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.108 ±(99.9%) 0.108 ms/op [Average]
  (min, avg, max) = (0.085, 0.108, 0.152), stdev = 0.028
  CI (99.9%): [? 0, 0.217] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 58.71% complete, ETA 00:40:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.221 ms/op
# Warmup Iteration   2: 0.142 ms/op
# Warmup Iteration   3: 0.151 ms/op
# Warmup Iteration   4: 0.184 ms/op
# Warmup Iteration   5: 0.163 ms/op
Iteration   1: 0.174 ms/op
Iteration   2: 0.163 ms/op
Iteration   3: 0.165 ms/op
Iteration   4: 0.149 ms/op
Iteration   5: 0.193 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.169 ±(99.9%) 0.063 ms/op [Average]
  (min, avg, max) = (0.149, 0.169, 0.193), stdev = 0.016
  CI (99.9%): [0.106, 0.231] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 58.90% complete, ETA 00:40:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.208 ms/op
# Warmup Iteration   2: 0.147 ms/op
# Warmup Iteration   3: 0.153 ms/op
# Warmup Iteration   4: 0.168 ms/op
# Warmup Iteration   5: 0.160 ms/op
Iteration   1: 0.155 ms/op
Iteration   2: 0.174 ms/op
Iteration   3: 0.133 ms/op
Iteration   4: 0.138 ms/op
Iteration   5: 0.136 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.147 ±(99.9%) 0.066 ms/op [Average]
  (min, avg, max) = (0.133, 0.147, 0.174), stdev = 0.017
  CI (99.9%): [0.081, 0.213] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 59.09% complete, ETA 00:40:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.110 ms/op
# Warmup Iteration   2: 0.122 ms/op
# Warmup Iteration   3: 0.103 ms/op
# Warmup Iteration   4: 0.141 ms/op
# Warmup Iteration   5: 0.155 ms/op
Iteration   1: 0.159 ms/op
Iteration   2: 0.158 ms/op
Iteration   3: 0.145 ms/op
Iteration   4: 0.636 ms/op
Iteration   5: 0.191 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.258 ±(99.9%) 0.816 ms/op [Average]
  (min, avg, max) = (0.145, 0.258, 0.636), stdev = 0.212
  CI (99.9%): [? 0, 1.074] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 59.28% complete, ETA 00:40:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.235 ms/op
# Warmup Iteration   2: 0.239 ms/op
# Warmup Iteration   3: 0.219 ms/op
# Warmup Iteration   4: 0.183 ms/op
# Warmup Iteration   5: 0.165 ms/op
Iteration   1: 0.277 ms/op
Iteration   2: 0.489 ms/op
Iteration   3: 0.265 ms/op
Iteration   4: 0.160 ms/op
Iteration   5: 0.141 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.266 ±(99.9%) 0.532 ms/op [Average]
  (min, avg, max) = (0.141, 0.266, 0.489), stdev = 0.138
  CI (99.9%): [? 0, 0.799] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 59.47% complete, ETA 00:40:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.199 ms/op
# Warmup Iteration   2: 0.145 ms/op
# Warmup Iteration   3: 0.147 ms/op
# Warmup Iteration   4: 0.143 ms/op
# Warmup Iteration   5: 0.204 ms/op
Iteration   1: 0.182 ms/op
Iteration   2: 0.134 ms/op
Iteration   3: 0.180 ms/op
Iteration   4: 0.128 ms/op
Iteration   5: 0.255 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.176 ±(99.9%) 0.196 ms/op [Average]
  (min, avg, max) = (0.128, 0.176, 0.255), stdev = 0.051
  CI (99.9%): [? 0, 0.372] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 59.66% complete, ETA 00:39:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.149 ms/op
# Warmup Iteration   2: 0.125 ms/op
# Warmup Iteration   3: 0.166 ms/op
# Warmup Iteration   4: 0.118 ms/op
# Warmup Iteration   5: 0.208 ms/op
Iteration   1: 0.140 ms/op
Iteration   2: 0.129 ms/op
Iteration   3: 0.196 ms/op
Iteration   4: 0.205 ms/op
Iteration   5: 0.219 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.178 ±(99.9%) 0.156 ms/op [Average]
  (min, avg, max) = (0.129, 0.178, 0.219), stdev = 0.040
  CI (99.9%): [0.022, 0.333] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 59.85% complete, ETA 00:39:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.351 ms/op
# Warmup Iteration   2: 0.266 ms/op
# Warmup Iteration   3: 0.260 ms/op
# Warmup Iteration   4: 0.348 ms/op
# Warmup Iteration   5: 0.425 ms/op
Iteration   1: 0.277 ms/op
Iteration   2: 0.328 ms/op
Iteration   3: 0.256 ms/op
Iteration   4: 0.371 ms/op
Iteration   5: 0.318 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.310 ±(99.9%) 0.174 ms/op [Average]
  (min, avg, max) = (0.256, 0.310, 0.371), stdev = 0.045
  CI (99.9%): [0.136, 0.484] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 60.04% complete, ETA 00:39:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.323 ms/op
# Warmup Iteration   2: 0.268 ms/op
# Warmup Iteration   3: 0.272 ms/op
# Warmup Iteration   4: 0.291 ms/op
# Warmup Iteration   5: 0.274 ms/op
Iteration   1: 0.295 ms/op
Iteration   2: 0.280 ms/op
Iteration   3: 0.286 ms/op
Iteration   4: 0.308 ms/op
Iteration   5: 0.301 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.294 ±(99.9%) 0.043 ms/op [Average]
  (min, avg, max) = (0.280, 0.294, 0.308), stdev = 0.011
  CI (99.9%): [0.251, 0.337] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 60.23% complete, ETA 00:39:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.221 ms/op
# Warmup Iteration   2: 0.236 ms/op
# Warmup Iteration   3: 0.198 ms/op
# Warmup Iteration   4: 0.244 ms/op
# Warmup Iteration   5: 0.241 ms/op
Iteration   1: 0.192 ms/op
Iteration   2: 0.383 ms/op
Iteration   3: 0.228 ms/op
Iteration   4: 0.175 ms/op
Iteration   5: 0.209 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.238 ±(99.9%) 0.322 ms/op [Average]
  (min, avg, max) = (0.175, 0.238, 0.383), stdev = 0.084
  CI (99.9%): [? 0, 0.559] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 60.42% complete, ETA 00:39:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.229 ms/op
# Warmup Iteration   2: 0.242 ms/op
# Warmup Iteration   3: 0.203 ms/op
# Warmup Iteration   4: 0.242 ms/op
# Warmup Iteration   5: 0.225 ms/op
Iteration   1: 0.194 ms/op
Iteration   2: 0.325 ms/op
Iteration   3: 0.278 ms/op
Iteration   4: 0.222 ms/op
Iteration   5: 0.178 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.239 ±(99.9%) 0.235 ms/op [Average]
  (min, avg, max) = (0.178, 0.239, 0.325), stdev = 0.061
  CI (99.9%): [0.004, 0.475] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 60.61% complete, ETA 00:38:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.307 ms/op
# Warmup Iteration   2: 0.272 ms/op
# Warmup Iteration   3: 0.358 ms/op
# Warmup Iteration   4: 0.256 ms/op
# Warmup Iteration   5: 0.378 ms/op
Iteration   1: 0.337 ms/op
Iteration   2: 0.266 ms/op
Iteration   3: 0.363 ms/op
Iteration   4: 0.295 ms/op
Iteration   5: 0.718 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.396 ±(99.9%) 0.708 ms/op [Average]
  (min, avg, max) = (0.266, 0.396, 0.718), stdev = 0.184
  CI (99.9%): [? 0, 1.104] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 60.80% complete, ETA 00:38:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.320 ms/op
# Warmup Iteration   2: 0.271 ms/op
# Warmup Iteration   3: 0.364 ms/op
# Warmup Iteration   4: 0.264 ms/op
# Warmup Iteration   5: 0.358 ms/op
Iteration   1: 0.348 ms/op
Iteration   2: 0.285 ms/op
Iteration   3: 0.358 ms/op
Iteration   4: 0.310 ms/op
Iteration   5: 0.579 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.376 ±(99.9%) 0.451 ms/op [Average]
  (min, avg, max) = (0.285, 0.376, 0.579), stdev = 0.117
  CI (99.9%): [? 0, 0.826] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 60.98% complete, ETA 00:38:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.729 ms/op
# Warmup Iteration   2: 0.525 ms/op
# Warmup Iteration   3: 0.530 ms/op
# Warmup Iteration   4: 0.657 ms/op
# Warmup Iteration   5: 0.711 ms/op
Iteration   1: 0.567 ms/op
Iteration   2: 0.812 ms/op
Iteration   3: 0.579 ms/op
Iteration   4: 0.507 ms/op
Iteration   5: 0.642 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.622 ±(99.9%) 0.451 ms/op [Average]
  (min, avg, max) = (0.507, 0.622, 0.812), stdev = 0.117
  CI (99.9%): [0.171, 1.072] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 61.17% complete, ETA 00:38:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.847 ms/op
# Warmup Iteration   2: 0.589 ms/op
# Warmup Iteration   3: 0.622 ms/op
# Warmup Iteration   4: 0.867 ms/op
# Warmup Iteration   5: 0.756 ms/op
Iteration   1: 0.851 ms/op
Iteration   2: 0.645 ms/op
Iteration   3: 0.910 ms/op
Iteration   4: 0.605 ms/op
Iteration   5: 0.609 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.724 ±(99.9%) 0.559 ms/op [Average]
  (min, avg, max) = (0.605, 0.724, 0.910), stdev = 0.145
  CI (99.9%): [0.165, 1.282] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 61.36% complete, ETA 00:38:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.550 ms/op
# Warmup Iteration   2: 0.615 ms/op
# Warmup Iteration   3: 0.570 ms/op
# Warmup Iteration   4: 0.566 ms/op
# Warmup Iteration   5: 0.600 ms/op
Iteration   1: 0.626 ms/op
Iteration   2: 0.490 ms/op
Iteration   3: 0.467 ms/op
Iteration   4: 1.421 ms/op
Iteration   5: 0.576 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.716 ±(99.9%) 1.538 ms/op [Average]
  (min, avg, max) = (0.467, 0.716, 1.421), stdev = 0.399
  CI (99.9%): [? 0, 2.254] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 61.55% complete, ETA 00:38:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.555 ms/op
# Warmup Iteration   2: 0.570 ms/op
# Warmup Iteration   3: 0.486 ms/op
# Warmup Iteration   4: 0.596 ms/op
# Warmup Iteration   5: 0.591 ms/op
Iteration   1: 0.634 ms/op
Iteration   2: 0.514 ms/op
Iteration   3: 0.467 ms/op
Iteration   4: 2.583 ms/op
Iteration   5: 0.680 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.976 ±(99.9%) 3.477 ms/op [Average]
  (min, avg, max) = (0.467, 0.976, 2.583), stdev = 0.903
  CI (99.9%): [? 0, 4.452] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 61.74% complete, ETA 00:37:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.860 ms/op
# Warmup Iteration   2: 0.687 ms/op
# Warmup Iteration   3: 0.694 ms/op
# Warmup Iteration   4: 0.624 ms/op
# Warmup Iteration   5: 0.832 ms/op
Iteration   1: 1.160 ms/op
Iteration   2: 0.996 ms/op
Iteration   3: 0.786 ms/op
Iteration   4: 0.897 ms/op
Iteration   5: 1.008 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.970 ±(99.9%) 0.536 ms/op [Average]
  (min, avg, max) = (0.786, 0.970, 1.160), stdev = 0.139
  CI (99.9%): [0.434, 1.506] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 61.93% complete, ETA 00:37:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.908 ms/op
# Warmup Iteration   2: 0.721 ms/op
# Warmup Iteration   3: 0.715 ms/op
# Warmup Iteration   4: 0.615 ms/op
# Warmup Iteration   5: 0.879 ms/op
Iteration   1: 1.074 ms/op
Iteration   2: 0.957 ms/op
Iteration   3: 0.828 ms/op
Iteration   4: 0.633 ms/op
Iteration   5: 0.825 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.863 ±(99.9%) 0.636 ms/op [Average]
  (min, avg, max) = (0.633, 0.863, 1.074), stdev = 0.165
  CI (99.9%): [0.227, 1.500] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 62.12% complete, ETA 00:37:26
# Fork: 1 of 1
# Warmup Iteration   1: 1.732 ms/op
# Warmup Iteration   2: 1.187 ms/op
# Warmup Iteration   3: 1.178 ms/op
# Warmup Iteration   4: 1.318 ms/op
# Warmup Iteration   5: 1.304 ms/op
Iteration   1: 1.391 ms/op
Iteration   2: 1.289 ms/op
Iteration   3: 1.361 ms/op
Iteration   4: 1.212 ms/op
Iteration   5: 1.471 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  1.345 ±(99.9%) 0.380 ms/op [Average]
  (min, avg, max) = (1.212, 1.345, 1.471), stdev = 0.099
  CI (99.9%): [0.964, 1.725] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 62.31% complete, ETA 00:37:14
# Fork: 1 of 1
# Warmup Iteration   1: 1.714 ms/op
# Warmup Iteration   2: 1.255 ms/op
# Warmup Iteration   3: 1.182 ms/op
# Warmup Iteration   4: 1.299 ms/op
# Warmup Iteration   5: 1.294 ms/op
Iteration   1: 1.307 ms/op
Iteration   2: 1.347 ms/op
Iteration   3: 1.037 ms/op
Iteration   4: 1.218 ms/op
Iteration   5: 1.518 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  1.285 ±(99.9%) 0.679 ms/op [Average]
  (min, avg, max) = (1.037, 1.285, 1.518), stdev = 0.176
  CI (99.9%): [0.607, 1.964] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 62.50% complete, ETA 00:37:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.004 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.004), stdev = 0.002
  CI (99.9%): [? 0, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 62.69% complete, ETA 00:36:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 62.88% complete, ETA 00:36:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.006), stdev = 0.002
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 63.07% complete, ETA 00:36:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.007 ±(99.9%) 0.055 ms/op [Average]
  (min, avg, max) = (? 10??, 0.007, 0.032), stdev = 0.014
  CI (99.9%): [? 0, 0.062] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 63.26% complete, ETA 00:36:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 63.45% complete, ETA 00:36:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 63.64% complete, ETA 00:35:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.002
  CI (99.9%): [? 0, 0.031] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 63.83% complete, ETA 00:35:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 64.02% complete, ETA 00:35:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 64.20% complete, ETA 00:35:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 64.39% complete, ETA 00:35:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 64.58% complete, ETA 00:35:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 64.77% complete, ETA 00:34:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 64.96% complete, ETA 00:34:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.006), stdev = 0.002
  CI (99.9%): [? 0, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 65.15% complete, ETA 00:34:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 65.34% complete, ETA 00:34:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 65.53% complete, ETA 00:34:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 65.72% complete, ETA 00:34:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 65.91% complete, ETA 00:33:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.002, 0.005, 0.017), stdev = 0.007
  CI (99.9%): [? 0, 0.031] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 66.10% complete, ETA 00:33:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.004 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.002, 0.004, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 66.29% complete, ETA 00:33:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 66.48% complete, ETA 00:33:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.002, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 66.67% complete, ETA 00:33:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [0.001, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 66.86% complete, ETA 00:32:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.006 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.010), stdev = 0.002
  CI (99.9%): [? 0, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 67.05% complete, ETA 00:32:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.006 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.009), stdev = 0.003
  CI (99.9%): [? 0, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 67.23% complete, ETA 00:32:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.006 ±(99.9%) 0.072 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.011), stdev = 0.004
  CI (99.9%): [? 0, 0.079] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 67.42% complete, ETA 00:32:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.007 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.012), stdev = 0.003
  CI (99.9%): [? 0, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 67.61% complete, ETA 00:32:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.008 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.014), stdev = 0.003
  CI (99.9%): [? 0, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 67.80% complete, ETA 00:31:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.011 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.009, 0.011, 0.013), stdev = 0.002
  CI (99.9%): [0.005, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 67.99% complete, ETA 00:31:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.011 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.009, 0.011, 0.014), stdev = 0.002
  CI (99.9%): [0.004, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 68.18% complete, ETA 00:31:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.035 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.015 ±(99.9%) 0.043 ms/op [Average]
  (min, avg, max) = (0.009, 0.015, 0.035), stdev = 0.011
  CI (99.9%): [? 0, 0.058] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 68.37% complete, ETA 00:31:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.013 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.008, 0.013, 0.024), stdev = 0.006
  CI (99.9%): [? 0, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 68.56% complete, ETA 00:31:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.018 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.013, 0.018, 0.028), stdev = 0.006
  CI (99.9%): [? 0, 0.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 68.75% complete, ETA 00:31:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.015 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.012, 0.015, 0.021), stdev = 0.003
  CI (99.9%): [0.001, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 68.94% complete, ETA 00:30:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.035 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.024 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (0.018, 0.024, 0.035), stdev = 0.007
  CI (99.9%): [? 0, 0.049] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 69.13% complete, ETA 00:30:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.023 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.018, 0.023, 0.029), stdev = 0.004
  CI (99.9%): [0.005, 0.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 69.32% complete, ETA 00:30:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.033 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.077 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.031 ±(99.9%) 0.101 ms/op [Average]
  (min, avg, max) = (0.016, 0.031, 0.077), stdev = 0.026
  CI (99.9%): [? 0, 0.132] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 69.51% complete, ETA 00:30:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.127 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.040 ±(99.9%) 0.186 ms/op [Average]
  (min, avg, max) = (0.016, 0.040, 0.127), stdev = 0.048
  CI (99.9%): [? 0, 0.227] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 69.70% complete, ETA 00:30:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.029 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.027 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.022, 0.027, 0.029), stdev = 0.003
  CI (99.9%): [0.014, 0.039] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 69.89% complete, ETA 00:29:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.033 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.038 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.028 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.024, 0.028, 0.038), stdev = 0.006
  CI (99.9%): [0.005, 0.050] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 70.08% complete, ETA 00:29:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.055 ms/op
# Warmup Iteration   2: 0.044 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.042 ms/op
# Warmup Iteration   5: 0.055 ms/op
Iteration   1: 0.059 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.067 ms/op
Iteration   5: 0.043 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.054 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.043, 0.054, 0.067), stdev = 0.010
  CI (99.9%): [0.015, 0.093] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 70.27% complete, ETA 00:29:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.063 ms/op
# Warmup Iteration   2: 0.047 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.064 ms/op
# Warmup Iteration   5: 0.056 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.088 ms/op
Iteration   3: 0.051 ms/op
Iteration   4: 0.069 ms/op
Iteration   5: 0.054 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.062 ±(99.9%) 0.064 ms/op [Average]
  (min, avg, max) = (0.048, 0.062, 0.088), stdev = 0.017
  CI (99.9%): [? 0, 0.126] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 70.45% complete, ETA 00:29:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.035 ms/op
# Warmup Iteration   3: 0.057 ms/op
# Warmup Iteration   4: 0.034 ms/op
# Warmup Iteration   5: 0.082 ms/op
Iteration   1: 0.035 ms/op
Iteration   2: 0.035 ms/op
Iteration   3: 0.042 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.156 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.063 ±(99.9%) 0.202 ms/op [Average]
  (min, avg, max) = (0.035, 0.063, 0.156), stdev = 0.052
  CI (99.9%): [? 0, 0.264] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 70.64% complete, ETA 00:29:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.038 ms/op
# Warmup Iteration   3: 0.051 ms/op
# Warmup Iteration   4: 0.035 ms/op
# Warmup Iteration   5: 0.042 ms/op
Iteration   1: 0.110 ms/op
Iteration   2: 0.034 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.048 ms/op
Iteration   5: 0.047 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.055 ±(99.9%) 0.121 ms/op [Average]
  (min, avg, max) = (0.034, 0.055, 0.110), stdev = 0.031
  CI (99.9%): [? 0, 0.177] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 70.83% complete, ETA 00:29:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.059 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.057 ms/op
# Warmup Iteration   4: 0.082 ms/op
# Warmup Iteration   5: 0.063 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.070 ms/op
Iteration   3: 0.092 ms/op
Iteration   4: 0.049 ms/op
Iteration   5: 0.059 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.064 ±(99.9%) 0.069 ms/op [Average]
  (min, avg, max) = (0.049, 0.064, 0.092), stdev = 0.018
  CI (99.9%): [? 0, 0.133] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 71.02% complete, ETA 00:28:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.050 ms/op
# Warmup Iteration   2: 0.044 ms/op
# Warmup Iteration   3: 0.070 ms/op
# Warmup Iteration   4: 0.056 ms/op
# Warmup Iteration   5: 0.049 ms/op
Iteration   1: 0.058 ms/op
Iteration   2: 0.104 ms/op
Iteration   3: 0.046 ms/op
Iteration   4: 0.055 ms/op
Iteration   5: 0.060 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.065 ±(99.9%) 0.088 ms/op [Average]
  (min, avg, max) = (0.046, 0.065, 0.104), stdev = 0.023
  CI (99.9%): [? 0, 0.153] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 71.21% complete, ETA 00:28:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.132 ms/op
# Warmup Iteration   2: 0.099 ms/op
# Warmup Iteration   3: 0.096 ms/op
# Warmup Iteration   4: 0.106 ms/op
# Warmup Iteration   5: 0.082 ms/op
Iteration   1: 0.112 ms/op
Iteration   2: 0.107 ms/op
Iteration   3: 0.088 ms/op
Iteration   4: 0.087 ms/op
Iteration   5: 0.127 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.104 ±(99.9%) 0.065 ms/op [Average]
  (min, avg, max) = (0.087, 0.104, 0.127), stdev = 0.017
  CI (99.9%): [0.039, 0.170] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 71.40% complete, ETA 00:28:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.123 ms/op
# Warmup Iteration   2: 0.107 ms/op
# Warmup Iteration   3: 0.103 ms/op
# Warmup Iteration   4: 0.111 ms/op
# Warmup Iteration   5: 0.095 ms/op
Iteration   1: 0.122 ms/op
Iteration   2: 0.110 ms/op
Iteration   3: 0.111 ms/op
Iteration   4: 0.094 ms/op
Iteration   5: 0.118 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.111 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.094, 0.111, 0.122), stdev = 0.011
  CI (99.9%): [0.071, 0.152] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 71.59% complete, ETA 00:28:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.068 ms/op
# Warmup Iteration   3: 0.069 ms/op
# Warmup Iteration   4: 0.089 ms/op
# Warmup Iteration   5: 0.059 ms/op
Iteration   1: 0.059 ms/op
Iteration   2: 0.072 ms/op
Iteration   3: 0.173 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.101 ±(99.9%) 1.142 ms/op [Average]
  (min, avg, max) = (0.059, 0.101, 0.173), stdev = 0.063
  CI (99.9%): [? 0, 1.243] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 71.78% complete, ETA 00:28:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.073 ms/op
# Warmup Iteration   2: 0.064 ms/op
# Warmup Iteration   3: 0.099 ms/op
# Warmup Iteration   4: 0.061 ms/op
# Warmup Iteration   5: 0.174 ms/op
Iteration   1: 0.066 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.069 ms/op
Iteration   4: 0.205 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.099 ±(99.9%) 0.456 ms/op [Average]
  (min, avg, max) = (0.057, 0.099, 0.205), stdev = 0.071
  CI (99.9%): [? 0, 0.555] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 71.97% complete, ETA 00:27:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.105 ms/op
# Warmup Iteration   2: 0.083 ms/op
# Warmup Iteration   3: 0.122 ms/op
# Warmup Iteration   4: 0.098 ms/op
# Warmup Iteration   5: 0.084 ms/op
Iteration   1: 0.152 ms/op
Iteration   2: 0.087 ms/op
Iteration   3: 0.092 ms/op
Iteration   4: 0.101 ms/op
Iteration   5: 0.091 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.105 ±(99.9%) 0.103 ms/op [Average]
  (min, avg, max) = (0.087, 0.105, 0.152), stdev = 0.027
  CI (99.9%): [0.002, 0.208] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 72.16% complete, ETA 00:27:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.097 ms/op
# Warmup Iteration   2: 0.083 ms/op
# Warmup Iteration   3: 0.132 ms/op
# Warmup Iteration   4: 0.099 ms/op
# Warmup Iteration   5: 0.090 ms/op
Iteration   1: 0.139 ms/op
Iteration   2: 0.101 ms/op
Iteration   3: 0.104 ms/op
Iteration   4: 0.104 ms/op
Iteration   5: 0.094 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.108 ±(99.9%) 0.068 ms/op [Average]
  (min, avg, max) = (0.094, 0.108, 0.139), stdev = 0.018
  CI (99.9%): [0.040, 0.177] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 72.35% complete, ETA 00:27:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.261 ms/op
# Warmup Iteration   2: 0.209 ms/op
# Warmup Iteration   3: 0.184 ms/op
# Warmup Iteration   4: 0.239 ms/op
# Warmup Iteration   5: 0.185 ms/op
Iteration   1: 0.207 ms/op
Iteration   2: 0.296 ms/op
Iteration   3: 0.208 ms/op
Iteration   4: 0.295 ms/op
Iteration   5: 0.200 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.241 ±(99.9%) 0.191 ms/op [Average]
  (min, avg, max) = (0.200, 0.241, 0.296), stdev = 0.050
  CI (99.9%): [0.050, 0.432] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 72.54% complete, ETA 00:27:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.264 ms/op
# Warmup Iteration   2: 0.223 ms/op
# Warmup Iteration   3: 0.217 ms/op
# Warmup Iteration   4: 0.227 ms/op
# Warmup Iteration   5: 0.201 ms/op
Iteration   1: 0.217 ms/op
Iteration   2: 0.327 ms/op
Iteration   3: 0.209 ms/op
Iteration   4: 0.193 ms/op
Iteration   5: 0.326 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.254 ±(99.9%) 0.255 ms/op [Average]
  (min, avg, max) = (0.193, 0.254, 0.327), stdev = 0.066
  CI (99.9%): [? 0, 0.510] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 72.73% complete, ETA 00:27:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.152 ms/op
# Warmup Iteration   2: 0.136 ms/op
# Warmup Iteration   3: 0.277 ms/op
# Warmup Iteration   4: 0.129 ms/op
# Warmup Iteration   5: 0.280 ms/op
Iteration   1: 0.140 ms/op
Iteration   2: 0.121 ms/op
Iteration   3: 0.163 ms/op
Iteration   4: 0.217 ms/op
Iteration   5: 0.769 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.282 ±(99.9%) 1.058 ms/op [Average]
  (min, avg, max) = (0.121, 0.282, 0.769), stdev = 0.275
  CI (99.9%): [? 0, 1.340] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 72.92% complete, ETA 00:26:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.220 ms/op
# Warmup Iteration   2: 0.157 ms/op
# Warmup Iteration   3: 0.240 ms/op
# Warmup Iteration   4: 0.146 ms/op
# Warmup Iteration   5: 0.179 ms/op
Iteration   1: 0.358 ms/op
Iteration   2: 0.140 ms/op
Iteration   3: 0.181 ms/op
Iteration   4: 0.210 ms/op
Iteration   5: 0.186 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.215 ±(99.9%) 0.323 ms/op [Average]
  (min, avg, max) = (0.140, 0.215, 0.358), stdev = 0.084
  CI (99.9%): [? 0, 0.538] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 73.11% complete, ETA 00:26:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.203 ms/op
# Warmup Iteration   2: 0.166 ms/op
# Warmup Iteration   3: 0.270 ms/op
# Warmup Iteration   4: 0.215 ms/op
# Warmup Iteration   5: 0.175 ms/op
Iteration   1: 0.278 ms/op
Iteration   2: 0.200 ms/op
Iteration   3: 0.196 ms/op
Iteration   4: 0.226 ms/op
Iteration   5: 0.183 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.217 ±(99.9%) 0.146 ms/op [Average]
  (min, avg, max) = (0.183, 0.217, 0.278), stdev = 0.038
  CI (99.9%): [0.071, 0.362] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 73.30% complete, ETA 00:26:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.220 ms/op
# Warmup Iteration   2: 0.172 ms/op
# Warmup Iteration   3: 0.231 ms/op
# Warmup Iteration   4: 0.290 ms/op
# Warmup Iteration   5: 0.249 ms/op
Iteration   1: 0.191 ms/op
Iteration   2: 0.375 ms/op
Iteration   3: 0.231 ms/op
Iteration   4: 0.219 ms/op
Iteration   5: 0.240 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.251 ±(99.9%) 0.275 ms/op [Average]
  (min, avg, max) = (0.191, 0.251, 0.375), stdev = 0.071
  CI (99.9%): [? 0, 0.527] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 73.48% complete, ETA 00:26:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.584 ms/op
# Warmup Iteration   2: 0.461 ms/op
# Warmup Iteration   3: 0.432 ms/op
# Warmup Iteration   4: 0.553 ms/op
# Warmup Iteration   5: 0.422 ms/op
Iteration   1: 0.428 ms/op
Iteration   2: 0.478 ms/op
Iteration   3: 0.760 ms/op
Iteration   4: 0.480 ms/op
Iteration   5: 0.395 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.508 ±(99.9%) 0.559 ms/op [Average]
  (min, avg, max) = (0.395, 0.508, 0.760), stdev = 0.145
  CI (99.9%): [? 0, 1.067] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 73.67% complete, ETA 00:26:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.527 ms/op
# Warmup Iteration   2: 0.487 ms/op
# Warmup Iteration   3: 0.433 ms/op
# Warmup Iteration   4: 0.513 ms/op
# Warmup Iteration   5: 0.430 ms/op
Iteration   1: 0.518 ms/op
Iteration   2: 0.484 ms/op
Iteration   3: 0.727 ms/op
Iteration   4: 0.449 ms/op
Iteration   5: 0.473 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.530 ±(99.9%) 0.434 ms/op [Average]
  (min, avg, max) = (0.449, 0.530, 0.727), stdev = 0.113
  CI (99.9%): [0.096, 0.964] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 73.86% complete, ETA 00:26:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.276 ms/op
# Warmup Iteration   2: 0.276 ms/op
# Warmup Iteration   3: 0.280 ms/op
# Warmup Iteration   4: 0.371 ms/op
# Warmup Iteration   5: 0.242 ms/op
Iteration   1: 0.230 ms/op
Iteration   2: 0.282 ms/op
Iteration   3: 0.748 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.420 ±(99.9%) 5.203 ms/op [Average]
  (min, avg, max) = (0.230, 0.420, 0.748), stdev = 0.285
  CI (99.9%): [? 0, 5.623] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 74.05% complete, ETA 00:25:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.276 ms/op
# Warmup Iteration   2: 0.248 ms/op
# Warmup Iteration   3: 0.415 ms/op
# Warmup Iteration   4: 0.247 ms/op
# Warmup Iteration   5: 0.734 ms/op
Iteration   1: 0.258 ms/op
Iteration   2: 0.245 ms/op
Iteration   3: 0.293 ms/op
Iteration   4: 0.709 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.376 ±(99.9%) 1.441 ms/op [Average]
  (min, avg, max) = (0.245, 0.376, 0.709), stdev = 0.223
  CI (99.9%): [? 0, 1.817] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 74.24% complete, ETA 00:25:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.423 ms/op
# Warmup Iteration   2: 0.337 ms/op
# Warmup Iteration   3: 0.524 ms/op
# Warmup Iteration   4: 0.398 ms/op
# Warmup Iteration   5: 0.377 ms/op
Iteration   1: 0.443 ms/op
Iteration   2: 0.826 ms/op
Iteration   3: 0.339 ms/op
Iteration   4: 0.415 ms/op
Iteration   5: 0.399 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.484 ±(99.9%) 0.750 ms/op [Average]
  (min, avg, max) = (0.339, 0.484, 0.826), stdev = 0.195
  CI (99.9%): [? 0, 1.234] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 74.43% complete, ETA 00:25:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.378 ms/op
# Warmup Iteration   2: 0.332 ms/op
# Warmup Iteration   3: 0.517 ms/op
# Warmup Iteration   4: 0.417 ms/op
# Warmup Iteration   5: 0.371 ms/op
Iteration   1: 0.413 ms/op
Iteration   2: 0.887 ms/op
Iteration   3: 0.357 ms/op
Iteration   4: 0.433 ms/op
Iteration   5: 0.417 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.501 ±(99.9%) 0.838 ms/op [Average]
  (min, avg, max) = (0.357, 0.501, 0.887), stdev = 0.218
  CI (99.9%): [? 0, 1.339] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 74.62% complete, ETA 00:25:20
# Fork: 1 of 1
# Warmup Iteration   1: 1.149 ms/op
# Warmup Iteration   2: 0.965 ms/op
# Warmup Iteration   3: 0.891 ms/op
# Warmup Iteration   4: 1.072 ms/op
# Warmup Iteration   5: 0.877 ms/op
Iteration   1: 1.014 ms/op
Iteration   2: 1.042 ms/op
Iteration   3: 1.724 ms/op
Iteration   4: 1.040 ms/op
Iteration   5: 0.966 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  1.157 ±(99.9%) 1.225 ms/op [Average]
  (min, avg, max) = (0.966, 1.157, 1.724), stdev = 0.318
  CI (99.9%): [? 0, 2.382] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 74.81% complete, ETA 00:25:08
# Fork: 1 of 1
# Warmup Iteration   1: 1.396 ms/op
# Warmup Iteration   2: 0.991 ms/op
# Warmup Iteration   3: 1.013 ms/op
# Warmup Iteration   4: 1.206 ms/op
# Warmup Iteration   5: 1.068 ms/op
Iteration   1: 1.212 ms/op
Iteration   2: 1.146 ms/op
Iteration   3: 1.397 ms/op
Iteration   4: 1.175 ms/op
Iteration   5: 1.474 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  1.281 ±(99.9%) 0.561 ms/op [Average]
  (min, avg, max) = (1.146, 1.281, 1.474), stdev = 0.146
  CI (99.9%): [0.720, 1.842] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 75.00% complete, ETA 00:24:57
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 75.19% complete, ETA 00:24:45
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 75.38% complete, ETA 00:24:33
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 75.57% complete, ETA 00:24:22
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 75.76% complete, ETA 00:24:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 75.95% complete, ETA 00:23:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 76.14% complete, ETA 00:23:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 76.33% complete, ETA 00:23:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 76.52% complete, ETA 00:23:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 76.70% complete, ETA 00:23:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 76.89% complete, ETA 00:23:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 77.08% complete, ETA 00:22:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 77.27% complete, ETA 00:22:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 77.46% complete, ETA 00:22:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 77.65% complete, ETA 00:22:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 77.84% complete, ETA 00:22:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 78.03% complete, ETA 00:21:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 78.22% complete, ETA 00:21:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.004, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 78.41% complete, ETA 00:21:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 78.60% complete, ETA 00:21:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 78.79% complete, ETA 00:21:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.002, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 78.98% complete, ETA 00:20:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 79.17% complete, ETA 00:20:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.007 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.007, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.007, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 79.36% complete, ETA 00:20:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.008 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.008, 0.008, 0.008), stdev = 0.001
  CI (99.9%): [0.008, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 79.55% complete, ETA 00:20:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.005 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.004, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 79.73% complete, ETA 00:20:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.004, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 79.92% complete, ETA 00:19:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.006 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.005, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 80.11% complete, ETA 00:19:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.005 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 80.30% complete, ETA 00:19:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.013 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.013, 0.013, 0.013), stdev = 0.001
  CI (99.9%): [0.012, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 80.49% complete, ETA 00:19:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.016 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.015, 0.016, 0.016), stdev = 0.001
  CI (99.9%): [0.015, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 80.68% complete, ETA 00:19:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.008 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.008, 0.008, 0.008), stdev = 0.001
  CI (99.9%): [0.007, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 80.87% complete, ETA 00:18:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.008 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.008, 0.008, 0.009), stdev = 0.001
  CI (99.9%): [0.008, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 81.06% complete, ETA 00:18:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.011 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.011, 0.011, 0.011), stdev = 0.001
  CI (99.9%): [0.011, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 81.25% complete, ETA 00:18:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.011 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.011, 0.011, 0.011), stdev = 0.001
  CI (99.9%): [0.011, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 81.44% complete, ETA 00:18:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.027 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.026 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.026 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.026, 0.026, 0.027), stdev = 0.001
  CI (99.9%): [0.025, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 81.63% complete, ETA 00:18:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.032 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.032 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.032 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.032, 0.032, 0.032), stdev = 0.001
  CI (99.9%): [0.031, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 81.82% complete, ETA 00:18:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.017 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.016, 0.017, 0.017), stdev = 0.001
  CI (99.9%): [0.016, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 82.01% complete, ETA 00:17:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.018 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.017, 0.018, 0.018), stdev = 0.001
  CI (99.9%): [0.016, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 82.20% complete, ETA 00:17:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.024 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.024, 0.024, 0.025), stdev = 0.001
  CI (99.9%): [0.024, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 82.39% complete, ETA 00:17:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.023 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.023, 0.023, 0.023), stdev = 0.001
  CI (99.9%): [0.022, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 82.58% complete, ETA 00:17:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.071 ms/op
# Warmup Iteration   2: 0.057 ms/op
# Warmup Iteration   3: 0.053 ms/op
# Warmup Iteration   4: 0.052 ms/op
# Warmup Iteration   5: 0.052 ms/op
Iteration   1: 0.053 ms/op
Iteration   2: 0.053 ms/op
Iteration   3: 0.054 ms/op
Iteration   4: 0.053 ms/op
Iteration   5: 0.053 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.053 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.053, 0.053, 0.054), stdev = 0.001
  CI (99.9%): [0.052, 0.054] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 82.77% complete, ETA 00:17:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.076 ms/op
# Warmup Iteration   2: 0.066 ms/op
# Warmup Iteration   3: 0.064 ms/op
# Warmup Iteration   4: 0.064 ms/op
# Warmup Iteration   5: 0.063 ms/op
Iteration   1: 0.063 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.067 ms/op
Iteration   4: 0.064 ms/op
Iteration   5: 0.064 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.064 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.063, 0.064, 0.067), stdev = 0.001
  CI (99.9%): [0.059, 0.070] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 82.95% complete, ETA 00:16:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.033 ms/op
# Warmup Iteration   4: 0.033 ms/op
# Warmup Iteration   5: 0.033 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.032 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.032, 0.032, 0.033), stdev = 0.001
  CI (99.9%): [0.031, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 83.14% complete, ETA 00:16:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.032 ms/op
# Warmup Iteration   4: 0.033 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.032 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.032, 0.032, 0.033), stdev = 0.001
  CI (99.9%): [0.032, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 83.33% complete, ETA 00:16:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.044 ms/op
# Warmup Iteration   3: 0.044 ms/op
# Warmup Iteration   4: 0.044 ms/op
# Warmup Iteration   5: 0.044 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.046 ms/op
Iteration   3: 0.046 ms/op
Iteration   4: 0.046 ms/op
Iteration   5: 0.046 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.046 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.045, 0.046, 0.046), stdev = 0.001
  CI (99.9%): [0.045, 0.046] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 83.52% complete, ETA 00:16:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.044 ms/op
# Warmup Iteration   2: 0.041 ms/op
# Warmup Iteration   3: 0.041 ms/op
# Warmup Iteration   4: 0.041 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: 0.042 ms/op
Iteration   2: 0.042 ms/op
Iteration   3: 0.042 ms/op
Iteration   4: 0.042 ms/op
Iteration   5: 0.042 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.042 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.042, 0.042, 0.042), stdev = 0.001
  CI (99.9%): [0.041, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 83.71% complete, ETA 00:16:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.117 ms/op
# Warmup Iteration   2: 0.112 ms/op
# Warmup Iteration   3: 0.105 ms/op
# Warmup Iteration   4: 0.104 ms/op
# Warmup Iteration   5: 0.105 ms/op
Iteration   1: 0.106 ms/op
Iteration   2: 0.105 ms/op
Iteration   3: 0.104 ms/op
Iteration   4: 0.105 ms/op
Iteration   5: 0.106 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.105 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.104, 0.105, 0.106), stdev = 0.001
  CI (99.9%): [0.103, 0.107] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 83.90% complete, ETA 00:15:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.149 ms/op
# Warmup Iteration   2: 0.137 ms/op
# Warmup Iteration   3: 0.131 ms/op
# Warmup Iteration   4: 0.132 ms/op
# Warmup Iteration   5: 0.130 ms/op
Iteration   1: 0.130 ms/op
Iteration   2: 0.129 ms/op
Iteration   3: 0.131 ms/op
Iteration   4: 0.131 ms/op
Iteration   5: 0.130 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.130 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.129, 0.130, 0.131), stdev = 0.001
  CI (99.9%): [0.127, 0.133] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 84.09% complete, ETA 00:15:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.067 ms/op
# Warmup Iteration   2: 0.064 ms/op
# Warmup Iteration   3: 0.065 ms/op
# Warmup Iteration   4: 0.066 ms/op
# Warmup Iteration   5: 0.065 ms/op
Iteration   1: 0.065 ms/op
Iteration   2: 0.065 ms/op
Iteration   3: 0.066 ms/op
Iteration   4: 0.073 ms/op
Iteration   5: 0.075 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.069 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.065, 0.069, 0.075), stdev = 0.005
  CI (99.9%): [0.051, 0.087] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 84.28% complete, ETA 00:15:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.061 ms/op
# Warmup Iteration   2: 0.059 ms/op
# Warmup Iteration   3: 0.060 ms/op
# Warmup Iteration   4: 0.062 ms/op
# Warmup Iteration   5: 0.060 ms/op
Iteration   1: 0.060 ms/op
Iteration   2: 0.060 ms/op
Iteration   3: 0.067 ms/op
Iteration   4: 0.067 ms/op
Iteration   5: 0.068 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.064 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.060, 0.064, 0.068), stdev = 0.004
  CI (99.9%): [0.048, 0.080] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 84.47% complete, ETA 00:15:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.095 ms/op
# Warmup Iteration   2: 0.089 ms/op
# Warmup Iteration   3: 0.089 ms/op
# Warmup Iteration   4: 0.089 ms/op
# Warmup Iteration   5: 0.088 ms/op
Iteration   1: 0.089 ms/op
Iteration   2: 0.087 ms/op
Iteration   3: 0.087 ms/op
Iteration   4: 0.088 ms/op
Iteration   5: 0.089 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.088 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.087, 0.088, 0.089), stdev = 0.001
  CI (99.9%): [0.085, 0.091] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 84.66% complete, ETA 00:15:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.089 ms/op
# Warmup Iteration   2: 0.083 ms/op
# Warmup Iteration   3: 0.083 ms/op
# Warmup Iteration   4: 0.083 ms/op
# Warmup Iteration   5: 0.083 ms/op
Iteration   1: 0.085 ms/op
Iteration   2: 0.083 ms/op
Iteration   3: 0.084 ms/op
Iteration   4: 0.083 ms/op
Iteration   5: 0.085 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.084 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.083, 0.084, 0.085), stdev = 0.001
  CI (99.9%): [0.080, 0.088] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 84.85% complete, ETA 00:14:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.234 ms/op
# Warmup Iteration   2: 0.218 ms/op
# Warmup Iteration   3: 0.210 ms/op
# Warmup Iteration   4: 0.208 ms/op
# Warmup Iteration   5: 0.207 ms/op
Iteration   1: 0.210 ms/op
Iteration   2: 0.209 ms/op
Iteration   3: 0.211 ms/op
Iteration   4: 0.207 ms/op
Iteration   5: 0.210 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.209 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.207, 0.209, 0.211), stdev = 0.001
  CI (99.9%): [0.203, 0.215] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 85.04% complete, ETA 00:14:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.278 ms/op
# Warmup Iteration   2: 0.277 ms/op
# Warmup Iteration   3: 0.255 ms/op
# Warmup Iteration   4: 0.253 ms/op
# Warmup Iteration   5: 0.257 ms/op
Iteration   1: 0.253 ms/op
Iteration   2: 0.255 ms/op
Iteration   3: 0.259 ms/op
Iteration   4: 0.257 ms/op
Iteration   5: 0.258 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.257 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.253, 0.257, 0.259), stdev = 0.002
  CI (99.9%): [0.247, 0.266] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 85.23% complete, ETA 00:14:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.130 ms/op
# Warmup Iteration   2: 0.125 ms/op
# Warmup Iteration   3: 0.126 ms/op
# Warmup Iteration   4: 0.126 ms/op
# Warmup Iteration   5: 0.128 ms/op
Iteration   1: 0.125 ms/op
Iteration   2: 0.124 ms/op
Iteration   3: 0.129 ms/op
Iteration   4: 0.127 ms/op
Iteration   5: 0.128 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.127 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.124, 0.127, 0.129), stdev = 0.002
  CI (99.9%): [0.119, 0.134] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 85.42% complete, ETA 00:14:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.119 ms/op
# Warmup Iteration   2: 0.116 ms/op
# Warmup Iteration   3: 0.115 ms/op
# Warmup Iteration   4: 0.115 ms/op
# Warmup Iteration   5: 0.117 ms/op
Iteration   1: 0.115 ms/op
Iteration   2: 0.117 ms/op
Iteration   3: 0.118 ms/op
Iteration   4: 0.116 ms/op
Iteration   5: 0.116 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.116 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.115, 0.116, 0.118), stdev = 0.001
  CI (99.9%): [0.112, 0.121] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 85.61% complete, ETA 00:14:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.191 ms/op
# Warmup Iteration   2: 0.180 ms/op
# Warmup Iteration   3: 0.180 ms/op
# Warmup Iteration   4: 0.179 ms/op
# Warmup Iteration   5: 0.180 ms/op
Iteration   1: 0.180 ms/op
Iteration   2: 0.180 ms/op
Iteration   3: 0.179 ms/op
Iteration   4: 0.178 ms/op
Iteration   5: 0.178 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.179 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.178, 0.179, 0.180), stdev = 0.001
  CI (99.9%): [0.174, 0.184] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 85.80% complete, ETA 00:14:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.174 ms/op
# Warmup Iteration   2: 0.165 ms/op
# Warmup Iteration   3: 0.166 ms/op
# Warmup Iteration   4: 0.166 ms/op
# Warmup Iteration   5: 0.164 ms/op
Iteration   1: 0.167 ms/op
Iteration   2: 0.165 ms/op
Iteration   3: 0.166 ms/op
Iteration   4: 0.164 ms/op
Iteration   5: 0.164 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.165 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.164, 0.165, 0.167), stdev = 0.001
  CI (99.9%): [0.160, 0.170] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 85.98% complete, ETA 00:13:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.470 ms/op
# Warmup Iteration   2: 0.448 ms/op
# Warmup Iteration   3: 0.418 ms/op
# Warmup Iteration   4: 0.422 ms/op
# Warmup Iteration   5: 0.421 ms/op
Iteration   1: 0.424 ms/op
Iteration   2: 0.427 ms/op
Iteration   3: 0.420 ms/op
Iteration   4: 0.424 ms/op
Iteration   5: 0.425 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.424 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.420, 0.424, 0.427), stdev = 0.003
  CI (99.9%): [0.413, 0.434] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 86.17% complete, ETA 00:13:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.567 ms/op
# Warmup Iteration   2: 0.545 ms/op
# Warmup Iteration   3: 0.508 ms/op
# Warmup Iteration   4: 0.525 ms/op
# Warmup Iteration   5: 0.528 ms/op
Iteration   1: 0.522 ms/op
Iteration   2: 0.524 ms/op
Iteration   3: 0.521 ms/op
Iteration   4: 0.529 ms/op
Iteration   5: 0.521 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.523 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.521, 0.523, 0.529), stdev = 0.003
  CI (99.9%): [0.511, 0.536] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 86.36% complete, ETA 00:13:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.295 ms/op
# Warmup Iteration   2: 0.277 ms/op
# Warmup Iteration   3: 0.277 ms/op
# Warmup Iteration   4: 0.279 ms/op
# Warmup Iteration   5: 0.280 ms/op
Iteration   1: 0.281 ms/op
Iteration   2: 0.279 ms/op
Iteration   3: 0.280 ms/op
Iteration   4: 0.284 ms/op
Iteration   5: 0.282 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.281 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.279, 0.281, 0.284), stdev = 0.002
  CI (99.9%): [0.274, 0.289] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 86.55% complete, ETA 00:13:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.294 ms/op
# Warmup Iteration   2: 0.270 ms/op
# Warmup Iteration   3: 0.267 ms/op
# Warmup Iteration   4: 0.270 ms/op
# Warmup Iteration   5: 0.270 ms/op
Iteration   1: 0.268 ms/op
Iteration   2: 0.267 ms/op
Iteration   3: 0.263 ms/op
Iteration   4: 0.255 ms/op
Iteration   5: 0.256 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.262 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.255, 0.262, 0.268), stdev = 0.006
  CI (99.9%): [0.239, 0.285] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 86.74% complete, ETA 00:13:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.413 ms/op
# Warmup Iteration   2: 0.379 ms/op
# Warmup Iteration   3: 0.381 ms/op
# Warmup Iteration   4: 0.380 ms/op
# Warmup Iteration   5: 0.381 ms/op
Iteration   1: 0.383 ms/op
Iteration   2: 0.379 ms/op
Iteration   3: 0.381 ms/op
Iteration   4: 0.379 ms/op
Iteration   5: 0.380 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.381 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.379, 0.381, 0.383), stdev = 0.001
  CI (99.9%): [0.375, 0.386] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 86.93% complete, ETA 00:12:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.356 ms/op
# Warmup Iteration   2: 0.328 ms/op
# Warmup Iteration   3: 0.324 ms/op
# Warmup Iteration   4: 0.321 ms/op
# Warmup Iteration   5: 0.321 ms/op
Iteration   1: 0.324 ms/op
Iteration   2: 0.322 ms/op
Iteration   3: 0.323 ms/op
Iteration   4: 0.320 ms/op
Iteration   5: 0.322 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.322 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.320, 0.322, 0.324), stdev = 0.002
  CI (99.9%): [0.316, 0.328] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 87.12% complete, ETA 00:12:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.937 ms/op
# Warmup Iteration   2: 0.864 ms/op
# Warmup Iteration   3: 0.840 ms/op
# Warmup Iteration   4: 0.845 ms/op
# Warmup Iteration   5: 0.834 ms/op
Iteration   1: 0.842 ms/op
Iteration   2: 0.863 ms/op
Iteration   3: 0.840 ms/op
Iteration   4: 0.828 ms/op
Iteration   5: 0.839 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.843 ±(99.9%) 0.050 ms/op [Average]
  (min, avg, max) = (0.828, 0.843, 0.863), stdev = 0.013
  CI (99.9%): [0.793, 0.892] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 87.31% complete, ETA 00:12:31
# Fork: 1 of 1
# Warmup Iteration   1: 1.149 ms/op
# Warmup Iteration   2: 1.082 ms/op
# Warmup Iteration   3: 1.013 ms/op
# Warmup Iteration   4: 1.006 ms/op
# Warmup Iteration   5: 1.018 ms/op
Iteration   1: 1.013 ms/op
Iteration   2: 1.041 ms/op
Iteration   3: 1.018 ms/op
Iteration   4: 1.009 ms/op
Iteration   5: 1.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  1.017 ±(99.9%) 0.054 ms/op [Average]
  (min, avg, max) = (1.005, 1.017, 1.041), stdev = 0.014
  CI (99.9%): [0.964, 1.071] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 87.50% complete, ETA 00:12:20
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 87.69% complete, ETA 00:12:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 87.88% complete, ETA 00:11:57
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 88.07% complete, ETA 00:11:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 88.26% complete, ETA 00:11:35
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 88.45% complete, ETA 00:11:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 88.64% complete, ETA 00:11:12
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 88.83% complete, ETA 00:11:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 89.02% complete, ETA 00:10:49
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 89.20% complete, ETA 00:10:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 89.39% complete, ETA 00:10:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 89.58% complete, ETA 00:10:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 89.77% complete, ETA 00:10:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 89.96% complete, ETA 00:09:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 90.15% complete, ETA 00:09:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 90.34% complete, ETA 00:09:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 90.53% complete, ETA 00:09:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 90.72% complete, ETA 00:09:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 90.91% complete, ETA 00:08:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 91.10% complete, ETA 00:08:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 91.29% complete, ETA 00:08:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 91.48% complete, ETA 00:08:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 91.67% complete, ETA 00:08:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 91.86% complete, ETA 00:08:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 92.05% complete, ETA 00:07:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 92.23% complete, ETA 00:07:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.004, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 92.42% complete, ETA 00:07:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 92.61% complete, ETA 00:07:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 92.80% complete, ETA 00:07:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.005 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.004, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 92.99% complete, ETA 00:06:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.005 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 93.18% complete, ETA 00:06:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.007 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.007, 0.007, 0.008), stdev = 0.001
  CI (99.9%): [0.007, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 93.37% complete, ETA 00:06:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.005 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 93.56% complete, ETA 00:06:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.004, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 93.75% complete, ETA 00:06:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.004, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 93.94% complete, ETA 00:05:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.010 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.010, 0.010, 0.010), stdev = 0.001
  CI (99.9%): [0.010, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 94.13% complete, ETA 00:05:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.011 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.011, 0.011, 0.011), stdev = 0.001
  CI (99.9%): [0.011, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 94.32% complete, ETA 00:05:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.016 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.016, 0.016, 0.016), stdev = 0.001
  CI (99.9%): [0.015, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 94.51% complete, ETA 00:05:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.010 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.010, 0.010, 0.010), stdev = 0.001
  CI (99.9%): [0.009, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 94.70% complete, ETA 00:05:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.009 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.008, 0.009, 0.009), stdev = 0.001
  CI (99.9%): [0.008, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 94.89% complete, ETA 00:05:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.008 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.008, 0.008, 0.009), stdev = 0.001
  CI (99.9%): [0.008, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 95.08% complete, ETA 00:04:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.026 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.026 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.026, 0.026, 0.027), stdev = 0.001
  CI (99.9%): [0.025, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 95.27% complete, ETA 00:04:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.030 ms/op
# Warmup Iteration   4: 0.030 ms/op
# Warmup Iteration   5: 0.030 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.030 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.031 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.030, 0.031, 0.032), stdev = 0.001
  CI (99.9%): [0.028, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 95.45% complete, ETA 00:04:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.032 ms/op
# Warmup Iteration   4: 0.032 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.032 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.032 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.031, 0.032, 0.032), stdev = 0.001
  CI (99.9%): [0.031, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 95.64% complete, ETA 00:04:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.020 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.020, 0.020, 0.020), stdev = 0.001
  CI (99.9%): [0.020, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 95.83% complete, ETA 00:04:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.016 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.016, 0.016, 0.017), stdev = 0.001
  CI (99.9%): [0.016, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 96.02% complete, ETA 00:03:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.017 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.017, 0.017, 0.017), stdev = 0.001
  CI (99.9%): [0.016, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 96.21% complete, ETA 00:03:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.064 ms/op
# Warmup Iteration   2: 0.052 ms/op
# Warmup Iteration   3: 0.052 ms/op
# Warmup Iteration   4: 0.052 ms/op
# Warmup Iteration   5: 0.051 ms/op
Iteration   1: 0.052 ms/op
Iteration   2: 0.055 ms/op
Iteration   3: 0.054 ms/op
Iteration   4: 0.055 ms/op
Iteration   5: 0.055 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.054 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.052, 0.054, 0.055), stdev = 0.001
  CI (99.9%): [0.049, 0.059] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 96.40% complete, ETA 00:03:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.073 ms/op
# Warmup Iteration   2: 0.061 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.060 ms/op
# Warmup Iteration   5: 0.061 ms/op
Iteration   1: 0.061 ms/op
Iteration   2: 0.062 ms/op
Iteration   3: 0.065 ms/op
Iteration   4: 0.066 ms/op
Iteration   5: 0.065 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.064 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.061, 0.064, 0.066), stdev = 0.002
  CI (99.9%): [0.055, 0.072] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 96.59% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.065 ms/op
# Warmup Iteration   5: 0.065 ms/op
Iteration   1: 0.066 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.064 ms/op
Iteration   4: 0.066 ms/op
Iteration   5: 0.066 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.065 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.064, 0.065, 0.066), stdev = 0.001
  CI (99.9%): [0.061, 0.069] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 96.78% complete, ETA 00:03:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.039 ms/op
# Warmup Iteration   5: 0.039 ms/op
Iteration   1: 0.039 ms/op
Iteration   2: 0.039 ms/op
Iteration   3: 0.039 ms/op
Iteration   4: 0.039 ms/op
Iteration   5: 0.039 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.039 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.039, 0.039, 0.039), stdev = 0.001
  CI (99.9%): [0.038, 0.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 96.97% complete, ETA 00:02:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.032 ms/op
# Warmup Iteration   4: 0.032 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.032 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.032 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.031, 0.032, 0.032), stdev = 0.001
  CI (99.9%): [0.031, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 97.16% complete, ETA 00:02:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.038 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.034 ms/op
Iteration   2: 0.033 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.030 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.032 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.030, 0.032, 0.034), stdev = 0.002
  CI (99.9%): [0.025, 0.038] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 97.35% complete, ETA 00:02:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.138 ms/op
# Warmup Iteration   2: 0.124 ms/op
# Warmup Iteration   3: 0.122 ms/op
# Warmup Iteration   4: 0.121 ms/op
# Warmup Iteration   5: 0.118 ms/op
Iteration   1: 0.121 ms/op
Iteration   2: 0.119 ms/op
Iteration   3: 0.117 ms/op
Iteration   4: 0.119 ms/op
Iteration   5: 0.117 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.119 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.117, 0.119, 0.121), stdev = 0.002
  CI (99.9%): [0.112, 0.125] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 97.54% complete, ETA 00:02:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.141 ms/op
# Warmup Iteration   2: 0.126 ms/op
# Warmup Iteration   3: 0.122 ms/op
# Warmup Iteration   4: 0.121 ms/op
# Warmup Iteration   5: 0.122 ms/op
Iteration   1: 0.123 ms/op
Iteration   2: 0.122 ms/op
Iteration   3: 0.124 ms/op
Iteration   4: 0.123 ms/op
Iteration   5: 0.120 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.122 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.120, 0.122, 0.124), stdev = 0.002
  CI (99.9%): [0.116, 0.128] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 97.73% complete, ETA 00:02:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.129 ms/op
Iteration   2: 0.125 ms/op
Iteration   3: 0.126 ms/op
Iteration   4: 0.126 ms/op
Iteration   5: 0.127 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.126 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.125, 0.126, 0.129), stdev = 0.001
  CI (99.9%): [0.121, 0.132] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 97.92% complete, ETA 00:02:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.052 ms/op
Iteration   2: 0.128 ms/op
Iteration   3: 0.129 ms/op
Iteration   4: 0.129 ms/op
Iteration   5: 0.127 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.113 ±(99.9%) 0.132 ms/op [Average]
  (min, avg, max) = (0.052, 0.113, 0.129), stdev = 0.034
  CI (99.9%): [? 0, 0.245] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 98.11% complete, ETA 00:01:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.071 ms/op
# Warmup Iteration   2: 0.056 ms/op
# Warmup Iteration   3: 0.057 ms/op
# Warmup Iteration   4: 0.058 ms/op
# Warmup Iteration   5: 0.057 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.062 ms/op
Iteration   3: 0.063 ms/op
Iteration   4: 0.062 ms/op
Iteration   5: 0.062 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.061 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.057, 0.061, 0.063), stdev = 0.002
  CI (99.9%): [0.052, 0.070] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 98.30% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.066 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.058 ms/op
# Warmup Iteration   5: 0.059 ms/op
Iteration   1: 0.059 ms/op
Iteration   2: 0.061 ms/op
Iteration   3: 0.062 ms/op
Iteration   4: 0.061 ms/op
Iteration   5: 0.062 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.061 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.059, 0.061, 0.062), stdev = 0.001
  CI (99.9%): [0.056, 0.066] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 98.48% complete, ETA 00:01:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.314 ms/op
# Warmup Iteration   2: 0.290 ms/op
# Warmup Iteration   3: 0.280 ms/op
# Warmup Iteration   4: 0.275 ms/op
# Warmup Iteration   5: 0.282 ms/op
Iteration   1: 0.280 ms/op
Iteration   2: 0.278 ms/op
Iteration   3: 0.282 ms/op
Iteration   4: 0.280 ms/op
Iteration   5: 0.281 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.280 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.278, 0.280, 0.282), stdev = 0.002
  CI (99.9%): [0.274, 0.286] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 98.67% complete, ETA 00:01:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.339 ms/op
# Warmup Iteration   2: 0.305 ms/op
# Warmup Iteration   3: 0.301 ms/op
# Warmup Iteration   4: 0.291 ms/op
# Warmup Iteration   5: 0.301 ms/op
Iteration   1: 0.293 ms/op
Iteration   2: 0.296 ms/op
Iteration   3: 0.295 ms/op
Iteration   4: 0.297 ms/op
Iteration   5: 0.297 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.296 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.293, 0.296, 0.297), stdev = 0.002
  CI (99.9%): [0.289, 0.302] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 98.86% complete, ETA 00:01:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.094 ms/op
# Warmup Iteration   2: 0.091 ms/op
# Warmup Iteration   3: 0.092 ms/op
# Warmup Iteration   4: 0.092 ms/op
# Warmup Iteration   5: 0.093 ms/op
Iteration   1: 0.092 ms/op
Iteration   2: 0.092 ms/op
Iteration   3: 0.092 ms/op
Iteration   4: 0.092 ms/op
Iteration   5: 0.093 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.092 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.092, 0.092, 0.093), stdev = 0.001
  CI (99.9%): [0.091, 0.093] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 99.05% complete, ETA 00:00:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.094 ms/op
# Warmup Iteration   2: 0.091 ms/op
# Warmup Iteration   3: 0.094 ms/op
# Warmup Iteration   4: 0.095 ms/op
# Warmup Iteration   5: 0.093 ms/op
Iteration   1: 0.093 ms/op
Iteration   2: 0.093 ms/op
Iteration   3: 0.094 ms/op
Iteration   4: 0.094 ms/op
Iteration   5: 0.094 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.094 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.093, 0.094, 0.094), stdev = 0.001
  CI (99.9%): [0.091, 0.096] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 99.24% complete, ETA 00:00:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.132 ms/op
# Warmup Iteration   2: 0.119 ms/op
# Warmup Iteration   3: 0.120 ms/op
# Warmup Iteration   4: 0.120 ms/op
# Warmup Iteration   5: 0.118 ms/op
Iteration   1: 0.119 ms/op
Iteration   2: 0.120 ms/op
Iteration   3: 0.120 ms/op
Iteration   4: 0.120 ms/op
Iteration   5: 0.119 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.120 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.119, 0.120, 0.120), stdev = 0.001
  CI (99.9%): [0.117, 0.122] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 99.43% complete, ETA 00:00:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.125 ms/op
# Warmup Iteration   2: 0.116 ms/op
# Warmup Iteration   3: 0.116 ms/op
# Warmup Iteration   4: 0.116 ms/op
# Warmup Iteration   5: 0.117 ms/op
Iteration   1: 0.116 ms/op
Iteration   2: 0.116 ms/op
Iteration   3: 0.118 ms/op
Iteration   4: 0.116 ms/op
Iteration   5: 0.117 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.117 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.116, 0.117, 0.118), stdev = 0.001
  CI (99.9%): [0.113, 0.120] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 99.62% complete, ETA 00:00:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.688 ms/op
# Warmup Iteration   2: 0.629 ms/op
# Warmup Iteration   3: 0.605 ms/op
# Warmup Iteration   4: 0.600 ms/op
# Warmup Iteration   5: 0.605 ms/op
Iteration   1: 0.622 ms/op
Iteration   2: 0.612 ms/op
Iteration   3: 0.594 ms/op
Iteration   4: 0.596 ms/op
Iteration   5: 0.594 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.603 ±(99.9%) 0.050 ms/op [Average]
  (min, avg, max) = (0.594, 0.603, 0.622), stdev = 0.013
  CI (99.9%): [0.553, 0.654] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 99.81% complete, ETA 00:00:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.740 ms/op
# Warmup Iteration   2: 0.692 ms/op
# Warmup Iteration   3: 0.665 ms/op
# Warmup Iteration   4: 0.662 ms/op
# Warmup Iteration   5: 0.657 ms/op
Iteration   1: 0.656 ms/op
Iteration   2: 0.679 ms/op
Iteration   3: 0.673 ms/op
Iteration   4: 0.673 ms/op
Iteration   5: 0.684 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.673 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.656, 0.673, 0.684), stdev = 0.011
  CI (99.9%): [0.632, 0.714] (assumes normal distribution)


# Run complete. Total time: 01:37:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (nGet)  (nKeys)  (nValues)  Mode  Cnt     Score      Error  Units
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                 16       32          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                 16       32          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                 16     1000          2  avgt    5     0.037 ±    0.002  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                 16     1000          3  avgt    5     0.036 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                 16   100000          2  avgt    5     9.355 ±    3.848  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                 16   100000          3  avgt    5    11.779 ±    1.635  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                 32       32          2  avgt    5     0.003 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                 32       32          3  avgt    5     0.003 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                 32     1000          2  avgt    5     0.073 ±    0.002  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                 32     1000          3  avgt    5     0.073 ±    0.002  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                 32   100000          2  avgt    5    23.297 ±    6.013  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                 32   100000          3  avgt    5    21.731 ±    3.087  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                 64       32          2  avgt    5     0.005 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                 64       32          3  avgt    5     0.005 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                 64     1000          2  avgt    5     0.123 ±    0.002  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                 64     1000          3  avgt    5     0.140 ±    0.024  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                 64   100000          2  avgt    5    40.051 ±    8.828  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                 64   100000          3  avgt    5    39.048 ±    9.353  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                128       32          2  avgt    5     0.009 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                128       32          3  avgt    5     0.009 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                128     1000          2  avgt    5     0.235 ±    0.002  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                128     1000          3  avgt    5     0.238 ±    0.004  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                128   100000          2  avgt    5    78.250 ±   25.589  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                128   100000          3  avgt    5    78.625 ±   24.645  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                256       32          2  avgt    5     0.018 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                256       32          3  avgt    5     0.019 ±    0.004  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                256     1000          2  avgt    5     0.501 ±    0.123  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                256     1000          3  avgt    5     0.483 ±    0.013  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                256   100000          2  avgt    5   157.599 ±   45.632  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                256   100000          3  avgt    5   154.215 ±   37.872  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                512       32          2  avgt    5     0.038 ±    0.004  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                512       32          3  avgt    5     0.037 ±    0.007  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                512     1000          2  avgt    5     0.988 ±    0.186  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                512     1000          3  avgt    5     0.952 ±    0.048  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                512   100000          2  avgt    5   321.185 ±  138.893  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark                512   100000          3  avgt    5   345.161 ±  110.007  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               1024       32          2  avgt    5     0.074 ±    0.007  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               1024       32          3  avgt    5     0.074 ±    0.010  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               1024     1000          2  avgt    5     1.851 ±    0.338  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               1024     1000          3  avgt    5     2.011 ±    0.675  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               1024   100000          2  avgt    5   773.087 ±  398.385  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               1024   100000          3  avgt    5   804.070 ±  385.892  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               2048       32          2  avgt    5     0.176 ±    0.049  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               2048       32          3  avgt    5     0.154 ±    0.003  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               2048     1000          2  avgt    5     4.449 ±    1.173  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               2048     1000          3  avgt    5     3.906 ±    1.030  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               2048   100000          2  avgt    5  1246.930 ±  659.692  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               2048   100000          3  avgt    5  1346.584 ±  464.879  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               4096       32          2  avgt    5     0.290 ±    0.010  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               4096       32          3  avgt    5     0.285 ±    0.006  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               4096     1000          2  avgt    5     7.365 ±    0.864  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               4096     1000          3  avgt    5     7.163 ±    0.576  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               4096   100000          2  avgt    5  3236.302 ± 1798.533  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               4096   100000          3  avgt    5  2900.600 ±  348.681  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               8192       32          2  avgt    5     0.582 ±    0.017  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               8192       32          3  avgt    5     0.579 ±    0.014  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               8192     1000          2  avgt    5    15.360 ±    0.493  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark               8192     1000          3  avgt    5    15.574 ±    0.457  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark              16384       32          2  avgt    5     1.186 ±    0.036  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark              16384       32          3  avgt    5     1.162 ±    0.019  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark              16384     1000          2  avgt    5    29.881 ±    0.459  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmark              16384     1000          3  avgt    5    29.906 ±    0.902  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16       32          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16       32          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16     1000          2  avgt    5     0.036 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16     1000          3  avgt    5     0.037 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16   100000          2  avgt    5    11.220 ±    4.460  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16   100000          3  avgt    5    11.041 ±    4.007  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32       32          2  avgt    5     0.003 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32       32          3  avgt    5     0.003 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32     1000          2  avgt    5     0.073 ±    0.003  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32     1000          3  avgt    5     0.072 ±    0.004  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32   100000          2  avgt    5    24.227 ±    3.773  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32   100000          3  avgt    5    22.797 ±    5.730  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64       32          2  avgt    5     0.004 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64       32          3  avgt    5     0.004 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64     1000          2  avgt    5     0.126 ±    0.006  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64     1000          3  avgt    5     0.126 ±    0.002  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64   100000          2  avgt    5    41.816 ±   12.134  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64   100000          3  avgt    5    47.581 ±   34.880  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128       32          2  avgt    5     0.009 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128       32          3  avgt    5     0.008 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128     1000          2  avgt    5     0.237 ±    0.002  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128     1000          3  avgt    5     0.235 ±    0.009  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128   100000          2  avgt    5    76.598 ±   29.925  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128   100000          3  avgt    5    70.290 ±   14.127  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256       32          2  avgt    5     0.017 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256       32          3  avgt    5     0.017 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256     1000          2  avgt    5     0.471 ±    0.012  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256     1000          3  avgt    5     0.465 ±    0.022  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256   100000          2  avgt    5   175.322 ±   23.518  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256   100000          3  avgt    5   172.678 ±   49.753  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512       32          2  avgt    5     0.035 ±    0.003  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512       32          3  avgt    5     0.041 ±    0.015  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512     1000          2  avgt    5     1.348 ±    1.438  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512     1000          3  avgt    5     0.950 ±    0.048  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512   100000          2  avgt    5   302.487 ±   59.341  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512   100000          3  avgt    5   299.377 ±   75.704  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024       32          2  avgt    5     0.067 ±    0.003  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024       32          3  avgt    5     0.067 ±    0.003  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024     1000          2  avgt    5     1.895 ±    0.087  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024     1000          3  avgt    5     1.843 ±    0.047  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024   100000          2  avgt    5   624.762 ±  180.101  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024   100000          3  avgt    5   650.508 ±  199.789  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048       32          2  avgt    5     0.130 ±    0.006  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048       32          3  avgt    5     0.129 ±    0.009  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048     1000          2  avgt    5     3.624 ±    0.614  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048     1000          3  avgt    5     3.516 ±    0.079  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048   100000          2  avgt    5  1424.046 ±  816.565  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048   100000          3  avgt    5  1432.195 ± 1100.813  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096       32          2  avgt    5     0.260 ±    0.007  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096       32          3  avgt    5     0.262 ±    0.010  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096     1000          2  avgt    5     7.471 ±    0.066  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096     1000          3  avgt    5     7.406 ±    0.198  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096   100000          2  avgt    5  2778.980 ±  364.066  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096   100000          3  avgt    5  2714.829 ±  315.138  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     8192       32          2  avgt    5     0.516 ±    0.013  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     8192       32          3  avgt    5     0.522 ±    0.019  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     8192     1000          2  avgt    5    14.239 ±    0.490  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     8192     1000          3  avgt    5    14.217 ±    1.138  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous    16384       32          2  avgt    5     0.992 ±    0.131  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous    16384       32          3  avgt    5     0.974 ±    0.299  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous    16384     1000          2  avgt    5    57.801 ±   53.376  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous    16384     1000          3  avgt    5    55.976 ±   20.928  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                          16       32          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmark                          16       32          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmark                          16     1000          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmark                          16     1000          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmark                          16   100000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                          16   100000          3  avgt    5    ? 10?³             ms/op
ImmutableGetBenchmark.baselineGetBenchmark                          32       32          2  avgt    5    ? 10?³             ms/op
ImmutableGetBenchmark.baselineGetBenchmark                          32       32          3  avgt    5    ? 10?³             ms/op
ImmutableGetBenchmark.baselineGetBenchmark                          32     1000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                          32     1000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                          32   100000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                          32   100000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                          64       32          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                          64       32          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                          64     1000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                          64     1000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                          64   100000          2  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                          64   100000          3  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                         128       32          2  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                         128       32          3  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                         128     1000          2  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                         128     1000          3  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                         128   100000          2  avgt    5     0.004 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                         128   100000          3  avgt    5     0.005 ±    0.002  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                         256       32          2  avgt    5     0.003 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                         256       32          3  avgt    5     0.003 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                         256     1000          2  avgt    5     0.004 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                         256     1000          3  avgt    5     0.004 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                         256   100000          2  avgt    5     0.007 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                         256   100000          3  avgt    5     0.007 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                         512       32          2  avgt    5     0.006 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                         512       32          3  avgt    5     0.006 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                         512     1000          2  avgt    5     0.008 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                         512     1000          3  avgt    5     0.008 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                         512   100000          2  avgt    5     0.015 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                         512   100000          3  avgt    5     0.016 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        1024       32          2  avgt    5     0.013 ±    0.002  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        1024       32          3  avgt    5     0.013 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        1024     1000          2  avgt    5     0.018 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        1024     1000          3  avgt    5     0.016 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        1024   100000          2  avgt    5     0.029 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        1024   100000          3  avgt    5     0.043 ±    0.020  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        2048       32          2  avgt    5     0.023 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        2048       32          3  avgt    5     0.028 ±    0.009  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        2048     1000          2  avgt    5     0.034 ±    0.003  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        2048     1000          3  avgt    5     0.035 ±    0.004  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        2048   100000          2  avgt    5     0.066 ±    0.027  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        2048   100000          3  avgt    5     0.062 ±    0.014  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        4096       32          2  avgt    5     0.052 ±    0.014  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        4096       32          3  avgt    5     0.057 ±    0.026  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        4096     1000          2  avgt    5     0.080 ±    0.024  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        4096     1000          3  avgt    5     0.073 ±    0.007  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        4096   100000          2  avgt    5     0.130 ±    0.021  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        4096   100000          3  avgt    5     0.303 ±    0.360  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        8192       32          2  avgt    5     0.208 ±    0.147  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        8192       32          3  avgt    5     0.406 ±    0.353  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        8192     1000          2  avgt    5     0.170 ±    0.013  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        8192     1000          3  avgt    5     0.157 ±    0.062  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        8192   100000          2  avgt    5     0.453 ±    0.121  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                        8192   100000          3  avgt    5     0.413 ±    0.059  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                       16384       32          2  avgt    5     0.246 ±    0.106  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                       16384       32          3  avgt    5     0.225 ±    0.046  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                       16384     1000          2  avgt    5     0.285 ±    0.034  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                       16384     1000          3  avgt    5     0.312 ±    0.078  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                       16384   100000          2  avgt    5     1.019 ±    0.812  ms/op
ImmutableGetBenchmark.baselineGetBenchmark                       16384   100000          3  avgt    5     0.853 ±    0.564  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16       32          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16       32          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16     1000          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16     1000          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16   100000          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16   100000          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32       32          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32       32          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32     1000          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32     1000          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32   100000          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32   100000          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64       32          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64       32          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64     1000          2  avgt    5    ? 10?³             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64     1000          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64   100000          2  avgt    5    ? 10?³             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64   100000          3  avgt    5    ? 10?³             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128       32          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128       32          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128     1000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128     1000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128   100000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128   100000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256       32          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256       32          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256     1000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256     1000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256   100000          2  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256   100000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512       32          2  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512       32          3  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512     1000          2  avgt    5     0.003 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512     1000          3  avgt    5     0.003 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512   100000          2  avgt    5     0.003 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512   100000          3  avgt    5     0.003 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024       32          2  avgt    5     0.006 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024       32          3  avgt    5     0.005 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024     1000          2  avgt    5     0.006 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024     1000          3  avgt    5     0.006 ±    0.002  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024   100000          2  avgt    5     0.006 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024   100000          3  avgt    5     0.007 ±    0.002  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048       32          2  avgt    5     0.011 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048       32          3  avgt    5     0.011 ±    0.003  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048     1000          2  avgt    5     0.014 ±    0.002  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048     1000          3  avgt    5     0.014 ±    0.002  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048   100000          2  avgt    5     0.016 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048   100000          3  avgt    5     0.014 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096       32          2  avgt    5     0.021 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096       32          3  avgt    5     0.020 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096     1000          2  avgt    5     0.022 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096     1000          3  avgt    5     0.023 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096   100000          2  avgt    5     0.024 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096   100000          3  avgt    5     0.025 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192       32          2  avgt    5     0.039 ±    0.002  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192       32          3  avgt    5     0.039 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192     1000          2  avgt    5     0.048 ±    0.004  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192     1000          3  avgt    5     0.049 ±    0.004  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192   100000          2  avgt    5     0.050 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192   100000          3  avgt    5     0.053 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384       32          2  avgt    5     0.084 ±    0.010  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384       32          3  avgt    5     0.083 ±    0.007  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384     1000          2  avgt    5     0.091 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384     1000          3  avgt    5     0.096 ±    0.008  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384   100000          2  avgt    5     0.105 ±    0.012  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384   100000          3  avgt    5     0.110 ±    0.005  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark                16       32          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark                16       32          3  avgt    5     0.001 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark                16     1000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark                16     1000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark                16   100000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark                16   100000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark                32       32          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark                32       32          3  avgt    5     0.001 ±    0.003  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark                32     1000          2  avgt    5     0.002 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark                32     1000          3  avgt    5     0.002 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark                32   100000          2  avgt    5     0.003 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark                32   100000          3  avgt    5     0.004 ±    0.003  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark                64       32          2  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark                64       32          3  avgt    5     0.003 ±    0.013  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark                64     1000          2  avgt    5     0.003 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark                64     1000          3  avgt    5     0.003 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark                64   100000          2  avgt    5     0.005 ±    0.003  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark                64   100000          3  avgt    5     0.005 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark               128       32          2  avgt    5     0.004 ±    0.003  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark               128       32          3  avgt    5     0.004 ±    0.004  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark               128     1000          2  avgt    5     0.006 ±    0.003  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark               128     1000          3  avgt    5     0.006 ±    0.003  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark               128   100000          2  avgt    5     0.010 ±    0.005  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark               128   100000          3  avgt    5     0.011 ±    0.007  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark               256       32          2  avgt    5     0.009 ±    0.020  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark               256       32          3  avgt    5     0.008 ±    0.006  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark               256     1000          2  avgt    5     0.012 ±    0.020  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark               256     1000          3  avgt    5     0.012 ±    0.017  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark               256   100000          2  avgt    5     0.020 ±    0.009  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark               256   100000          3  avgt    5     0.020 ±    0.008  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark               512       32          2  avgt    5     0.017 ±    0.014  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark               512       32          3  avgt    5     0.016 ±    0.010  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark               512     1000          2  avgt    5     0.023 ±    0.020  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark               512     1000          3  avgt    5     0.022 ±    0.022  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark               512   100000          2  avgt    5     0.037 ±    0.015  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark               512   100000          3  avgt    5     0.035 ±    0.011  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              1024       32          2  avgt    5     0.030 ±    0.046  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              1024       32          3  avgt    5     0.028 ±    0.017  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              1024     1000          2  avgt    5     0.049 ±    0.093  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              1024     1000          3  avgt    5     0.048 ±    0.070  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              1024   100000          2  avgt    5     0.074 ±    0.028  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              1024   100000          3  avgt    5     0.094 ±    0.068  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              2048       32          2  avgt    5     0.066 ±    0.077  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              2048       32          3  avgt    5     0.067 ±    0.058  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              2048     1000          2  avgt    5     0.110 ±    0.089  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              2048     1000          3  avgt    5     0.108 ±    0.108  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              2048   100000          2  avgt    5     0.169 ±    0.063  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              2048   100000          3  avgt    5     0.147 ±    0.066  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              4096       32          2  avgt    5     0.258 ±    0.816  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              4096       32          3  avgt    5     0.266 ±    0.532  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              4096     1000          2  avgt    5     0.176 ±    0.196  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              4096     1000          3  avgt    5     0.178 ±    0.156  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              4096   100000          2  avgt    5     0.310 ±    0.174  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              4096   100000          3  avgt    5     0.294 ±    0.043  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              8192       32          2  avgt    5     0.238 ±    0.322  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              8192       32          3  avgt    5     0.239 ±    0.235  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              8192     1000          2  avgt    5     0.396 ±    0.708  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              8192     1000          3  avgt    5     0.376 ±    0.451  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              8192   100000          2  avgt    5     0.622 ±    0.451  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark              8192   100000          3  avgt    5     0.724 ±    0.559  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark             16384       32          2  avgt    5     0.716 ±    1.538  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark             16384       32          3  avgt    5     0.976 ±    3.477  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark             16384     1000          2  avgt    5     0.970 ±    0.536  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark             16384     1000          3  avgt    5     0.863 ±    0.636  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark             16384   100000          2  avgt    5     1.345 ±    0.380  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmark             16384   100000          3  avgt    5     1.285 ±    0.679  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16       32          2  avgt    4     0.001 ±    0.013  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16       32          3  avgt    3    ? 10?³             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16     1000          2  avgt    5     0.001 ±    0.009  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16     1000          3  avgt    5     0.007 ±    0.055  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16   100000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16   100000          3  avgt    5     0.001 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32       32          2  avgt    3     0.002 ±    0.030  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32       32          3  avgt    4     0.001 ±    0.009  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32     1000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32     1000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32   100000          2  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32   100000          3  avgt    5     0.002 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64       32          2  avgt    5     0.002 ±    0.009  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64       32          3  avgt    4     0.002 ±    0.015  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64     1000          2  avgt    5     0.002 ±    0.004  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64     1000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64   100000          2  avgt    5     0.002 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64   100000          3  avgt    5     0.003 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128       32          2  avgt    5     0.005 ±    0.025  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128       32          3  avgt    5     0.004 ±    0.007  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128     1000          2  avgt    5     0.003 ±    0.003  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128     1000          3  avgt    5     0.004 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128   100000          2  avgt    5     0.005 ±    0.004  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128   100000          3  avgt    5     0.006 ±    0.010  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256       32          2  avgt    4     0.006 ±    0.016  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256       32          3  avgt    3     0.006 ±    0.072  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256     1000          2  avgt    5     0.007 ±    0.011  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256     1000          3  avgt    5     0.008 ±    0.013  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256   100000          2  avgt    5     0.011 ±    0.006  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256   100000          3  avgt    5     0.011 ±    0.007  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512       32          2  avgt    5     0.015 ±    0.043  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512       32          3  avgt    5     0.013 ±    0.024  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512     1000          2  avgt    5     0.018 ±    0.023  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512     1000          3  avgt    5     0.015 ±    0.013  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512   100000          2  avgt    5     0.024 ±    0.026  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512   100000          3  avgt    5     0.023 ±    0.017  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024       32          2  avgt    5     0.031 ±    0.101  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024       32          3  avgt    5     0.040 ±    0.186  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024     1000          2  avgt    5     0.027 ±    0.012  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024     1000          3  avgt    5     0.028 ±    0.023  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024   100000          2  avgt    5     0.054 ±    0.039  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024   100000          3  avgt    5     0.062 ±    0.064  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048       32          2  avgt    5     0.063 ±    0.202  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048       32          3  avgt    5     0.055 ±    0.121  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048     1000          2  avgt    5     0.064 ±    0.069  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048     1000          3  avgt    5     0.065 ±    0.088  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048   100000          2  avgt    5     0.104 ±    0.065  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048   100000          3  avgt    5     0.111 ±    0.041  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096       32          2  avgt    3     0.101 ±    1.142  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096       32          3  avgt    4     0.099 ±    0.456  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096     1000          2  avgt    5     0.105 ±    0.103  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096     1000          3  avgt    5     0.108 ±    0.068  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096   100000          2  avgt    5     0.241 ±    0.191  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096   100000          3  avgt    5     0.254 ±    0.255  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192       32          2  avgt    5     0.282 ±    1.058  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192       32          3  avgt    5     0.215 ±    0.323  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192     1000          2  avgt    5     0.217 ±    0.146  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192     1000          3  avgt    5     0.251 ±    0.275  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192   100000          2  avgt    5     0.508 ±    0.559  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192   100000          3  avgt    5     0.530 ±    0.434  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384       32          2  avgt    3     0.420 ±    5.203  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384       32          3  avgt    4     0.376 ±    1.441  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384     1000          2  avgt    5     0.484 ±    0.750  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384     1000          3  avgt    5     0.501 ±    0.838  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384   100000          2  avgt    5     1.157 ±    1.225  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384   100000          3  avgt    5     1.281 ±    0.561  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                         16       32          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmark                         16       32          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmark                         16     1000          2  avgt    5    ? 10?³             ms/op
ImmutableGetBenchmark.immutableGetBenchmark                         16     1000          3  avgt    5    ? 10?³             ms/op
ImmutableGetBenchmark.immutableGetBenchmark                         16   100000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                         16   100000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                         32       32          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                         32       32          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                         32     1000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                         32     1000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                         32   100000          2  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                         32   100000          3  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                         64       32          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                         64       32          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                         64     1000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                         64     1000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                         64   100000          2  avgt    5     0.003 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                         64   100000          3  avgt    5     0.004 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                        128       32          2  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                        128       32          3  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                        128     1000          2  avgt    5     0.003 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                        128     1000          3  avgt    5     0.003 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                        128   100000          2  avgt    5     0.007 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                        128   100000          3  avgt    5     0.008 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                        256       32          2  avgt    5     0.005 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                        256       32          3  avgt    5     0.004 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                        256     1000          2  avgt    5     0.006 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                        256     1000          3  avgt    5     0.005 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                        256   100000          2  avgt    5     0.013 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                        256   100000          3  avgt    5     0.016 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                        512       32          2  avgt    5     0.008 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                        512       32          3  avgt    5     0.008 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                        512     1000          2  avgt    5     0.011 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                        512     1000          3  avgt    5     0.011 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                        512   100000          2  avgt    5     0.026 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                        512   100000          3  avgt    5     0.032 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       1024       32          2  avgt    5     0.017 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       1024       32          3  avgt    5     0.018 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       1024     1000          2  avgt    5     0.024 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       1024     1000          3  avgt    5     0.023 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       1024   100000          2  avgt    5     0.053 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       1024   100000          3  avgt    5     0.064 ±    0.005  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       2048       32          2  avgt    5     0.032 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       2048       32          3  avgt    5     0.032 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       2048     1000          2  avgt    5     0.046 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       2048     1000          3  avgt    5     0.042 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       2048   100000          2  avgt    5     0.105 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       2048   100000          3  avgt    5     0.130 ±    0.003  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       4096       32          2  avgt    5     0.069 ±    0.018  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       4096       32          3  avgt    5     0.064 ±    0.016  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       4096     1000          2  avgt    5     0.088 ±    0.003  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       4096     1000          3  avgt    5     0.084 ±    0.004  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       4096   100000          2  avgt    5     0.209 ±    0.006  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       4096   100000          3  avgt    5     0.257 ±    0.009  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       8192       32          2  avgt    5     0.127 ±    0.008  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       8192       32          3  avgt    5     0.116 ±    0.004  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       8192     1000          2  avgt    5     0.179 ±    0.005  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       8192     1000          3  avgt    5     0.165 ±    0.005  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       8192   100000          2  avgt    5     0.424 ±    0.010  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                       8192   100000          3  avgt    5     0.523 ±    0.013  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                      16384       32          2  avgt    5     0.281 ±    0.008  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                      16384       32          3  avgt    5     0.262 ±    0.023  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                      16384     1000          2  avgt    5     0.381 ±    0.005  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                      16384     1000          3  avgt    5     0.322 ±    0.006  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                      16384   100000          2  avgt    5     0.843 ±    0.050  ms/op
ImmutableGetBenchmark.immutableGetBenchmark                      16384   100000          3  avgt    5     1.017 ±    0.054  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16       32          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16       32          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16     1000          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16     1000          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16   100000          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16   100000          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32       32          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32       32          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32     1000          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32     1000          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32   100000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32   100000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64       32          2  avgt    5    ? 10?³             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64       32          3  avgt    5    ? 10?³             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64     1000          2  avgt    5    ? 10?³             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64     1000          3  avgt    5    ? 10?³             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64   100000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64   100000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128       32          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128       32          3  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128     1000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128     1000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128   100000          2  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128   100000          3  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256       32          2  avgt    5     0.003 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256       32          3  avgt    5     0.004 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256     1000          2  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256     1000          3  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256   100000          2  avgt    5     0.005 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256   100000          3  avgt    5     0.005 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512       32          2  avgt    5     0.007 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512       32          3  avgt    5     0.005 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512     1000          2  avgt    5     0.004 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512     1000          3  avgt    5     0.004 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512   100000          2  avgt    5     0.010 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512   100000          3  avgt    5     0.011 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024       32          2  avgt    5     0.016 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024       32          3  avgt    5     0.010 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024     1000          2  avgt    5     0.009 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024     1000          3  avgt    5     0.008 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024   100000          2  avgt    5     0.026 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024   100000          3  avgt    5     0.031 ±    0.003  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048       32          2  avgt    5     0.032 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048       32          3  avgt    5     0.020 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048     1000          2  avgt    5     0.016 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048     1000          3  avgt    5     0.017 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048   100000          2  avgt    5     0.054 ±    0.005  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048   100000          3  avgt    5     0.064 ±    0.009  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096       32          2  avgt    5     0.065 ±    0.004  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096       32          3  avgt    5     0.039 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096     1000          2  avgt    5     0.032 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096     1000          3  avgt    5     0.032 ±    0.007  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096   100000          2  avgt    5     0.119 ±    0.006  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096   100000          3  avgt    5     0.122 ±    0.006  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192       32          2  avgt    5     0.126 ±    0.006  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192       32          3  avgt    5     0.113 ±    0.132  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192     1000          2  avgt    5     0.061 ±    0.009  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192     1000          3  avgt    5     0.061 ±    0.005  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192   100000          2  avgt    5     0.280 ±    0.006  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192   100000          3  avgt    5     0.296 ±    0.006  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384       32          2  avgt    5     0.092 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384       32          3  avgt    5     0.094 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384     1000          2  avgt    5     0.120 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384     1000          3  avgt    5     0.117 ±    0.003  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384   100000          2  avgt    5     0.603 ±    0.050  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384   100000          3  avgt    5     0.673 ±    0.041  ms/op

Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

See https://docs.gradle.org/7.3.1/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 1h 38m 12s
13 actionable tasks: 2 executed, 11 up-to-date
