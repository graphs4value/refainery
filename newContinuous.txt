Type-safe dependency accessors is an incubating feature.
> Task :buildSrc:extractPluginRequests UP-TO-DATE
> Task :buildSrc:generatePluginAdapters UP-TO-DATE
> Task :buildSrc:compileJava UP-TO-DATE
> Task :buildSrc:compileGroovy NO-SOURCE
> Task :buildSrc:compileGroovyPlugins UP-TO-DATE
> Task :buildSrc:pluginDescriptors UP-TO-DATE
> Task :buildSrc:processResources UP-TO-DATE
> Task :buildSrc:classes UP-TO-DATE
> Task :buildSrc:jar UP-TO-DATE
> Task :buildSrc:assemble UP-TO-DATE
> Task :buildSrc:pluginUnderTestMetadata UP-TO-DATE
> Task :buildSrc:compileTestJava NO-SOURCE
> Task :buildSrc:compileTestGroovy NO-SOURCE
> Task :buildSrc:processTestResources NO-SOURCE
> Task :buildSrc:testClasses UP-TO-DATE
> Task :buildSrc:test NO-SOURCE
> Task :buildSrc:validatePlugins UP-TO-DATE
> Task :buildSrc:check UP-TO-DATE
> Task :buildSrc:build UP-TO-DATE
> Task :refinery-store:compileJava UP-TO-DATE
> Task :refinery-store:processResources NO-SOURCE
> Task :refinery-store:classes UP-TO-DATE
> Task :refinery-store:compileTestJava UP-TO-DATE
> Task :refinery-store:processTestResources NO-SOURCE
> Task :refinery-store:testClasses UP-TO-DATE
> Task :refinery-store:compileJmhJava
> Task :refinery-store:processJmhResources NO-SOURCE
> Task :refinery-store:jmhClasses

> Task :refinery-store:jmh
# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 0.00% complete, ETA 00:44:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 0.38% complete, ETA 00:45:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 0.76% complete, ETA 00:45:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.028 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.028 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.028, 0.028, 0.028), stdev = 0.001
  CI (99.9%): [0.028, 0.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 1.14% complete, ETA 00:45:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.030 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.029 ms/op
Iteration   5: 0.028 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.029 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.028, 0.029, 0.029), stdev = 0.001
  CI (99.9%): [0.028, 0.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 1.52% complete, ETA 00:45:18
# Fork: 1 of 1
# Warmup Iteration   1: 8.635 ms/op
# Warmup Iteration   2: 7.385 ms/op
# Warmup Iteration   3: 7.877 ms/op
# Warmup Iteration   4: 8.946 ms/op
# Warmup Iteration   5: 7.299 ms/op
Iteration   1: 7.938 ms/op
Iteration   2: 8.947 ms/op
Iteration   3: 7.237 ms/op
Iteration   4: 8.035 ms/op
Iteration   5: 8.459 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  8.123 ±(99.9%) 2.451 ms/op [Average]
  (min, avg, max) = (7.237, 8.123, 8.947), stdev = 0.636
  CI (99.9%): [5.673, 10.574] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 1.89% complete, ETA 00:45:27
# Fork: 1 of 1
# Warmup Iteration   1: 8.037 ms/op
# Warmup Iteration   2: 7.785 ms/op
# Warmup Iteration   3: 8.045 ms/op
# Warmup Iteration   4: 7.737 ms/op
# Warmup Iteration   5: 7.097 ms/op
Iteration   1: 7.857 ms/op
Iteration   2: 7.414 ms/op
Iteration   3: 8.430 ms/op
Iteration   4: 8.098 ms/op
Iteration   5: 7.783 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  7.916 ±(99.9%) 1.455 ms/op [Average]
  (min, avg, max) = (7.414, 7.916, 8.430), stdev = 0.378
  CI (99.9%): [6.461, 9.371] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 2.27% complete, ETA 00:45:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 2.65% complete, ETA 00:45:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 3.03% complete, ETA 00:45:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.064 ms/op
# Warmup Iteration   2: 0.057 ms/op
# Warmup Iteration   3: 0.057 ms/op
# Warmup Iteration   4: 0.057 ms/op
# Warmup Iteration   5: 0.057 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.057 ms/op
Iteration   5: 0.057 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.057 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.056, 0.057, 0.057), stdev = 0.001
  CI (99.9%): [0.056, 0.058] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 3.41% complete, ETA 00:44:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.064 ms/op
# Warmup Iteration   2: 0.057 ms/op
# Warmup Iteration   3: 0.057 ms/op
# Warmup Iteration   4: 0.057 ms/op
# Warmup Iteration   5: 0.060 ms/op
Iteration   1: 0.067 ms/op
Iteration   2: 0.070 ms/op
Iteration   3: 0.069 ms/op
Iteration   4: 0.066 ms/op
Iteration   5: 0.078 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.070 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.066, 0.070, 0.078), stdev = 0.005
  CI (99.9%): [0.052, 0.088] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 3.79% complete, ETA 00:44:35
# Fork: 1 of 1
# Warmup Iteration   1: 18.233 ms/op
# Warmup Iteration   2: 17.200 ms/op
# Warmup Iteration   3: 18.044 ms/op
# Warmup Iteration   4: 17.598 ms/op
# Warmup Iteration   5: 18.153 ms/op
Iteration   1: 18.489 ms/op
Iteration   2: 13.735 ms/op
Iteration   3: 26.744 ms/op
Iteration   4: 26.283 ms/op
Iteration   5: 29.702 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  22.991 ±(99.9%) 25.535 ms/op [Average]
  (min, avg, max) = (13.735, 22.991, 29.702), stdev = 6.631
  CI (99.9%): [? 0, 48.525] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 4.17% complete, ETA 00:44:35
# Fork: 1 of 1
# Warmup Iteration   1: 15.343 ms/op
# Warmup Iteration   2: 17.717 ms/op
# Warmup Iteration   3: 15.715 ms/op
# Warmup Iteration   4: 14.897 ms/op
# Warmup Iteration   5: 17.314 ms/op
Iteration   1: 14.578 ms/op
Iteration   2: 14.928 ms/op
Iteration   3: 22.573 ms/op
Iteration   4: 23.409 ms/op
Iteration   5: 23.705 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  19.839 ±(99.9%) 17.954 ms/op [Average]
  (min, avg, max) = (14.578, 19.839, 23.705), stdev = 4.663
  CI (99.9%): [1.885, 37.793] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 4.55% complete, ETA 00:44:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 4.92% complete, ETA 00:44:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 10??, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 5.30% complete, ETA 00:44:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.116 ms/op
# Warmup Iteration   2: 0.101 ms/op
# Warmup Iteration   3: 0.118 ms/op
# Warmup Iteration   4: 0.123 ms/op
# Warmup Iteration   5: 0.106 ms/op
Iteration   1: 0.101 ms/op
Iteration   2: 0.105 ms/op
Iteration   3: 0.128 ms/op
Iteration   4: 0.181 ms/op
Iteration   5: 0.180 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.139 ±(99.9%) 0.151 ms/op [Average]
  (min, avg, max) = (0.101, 0.139, 0.181), stdev = 0.039
  CI (99.9%): [? 0, 0.291] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 5.68% complete, ETA 00:43:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.132 ms/op
# Warmup Iteration   2: 0.121 ms/op
# Warmup Iteration   3: 0.122 ms/op
# Warmup Iteration   4: 0.125 ms/op
# Warmup Iteration   5: 0.136 ms/op
Iteration   1: 0.154 ms/op
Iteration   2: 0.113 ms/op
Iteration   3: 0.132 ms/op
Iteration   4: 0.198 ms/op
Iteration   5: 0.173 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.154 ±(99.9%) 0.129 ms/op [Average]
  (min, avg, max) = (0.113, 0.154, 0.198), stdev = 0.034
  CI (99.9%): [0.025, 0.283] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 6.06% complete, ETA 00:43:40
# Fork: 1 of 1
# Warmup Iteration   1: 32.336 ms/op
# Warmup Iteration   2: 28.008 ms/op
# Warmup Iteration   3: 30.169 ms/op
# Warmup Iteration   4: 32.576 ms/op
# Warmup Iteration   5: 32.627 ms/op
Iteration   1: 31.031 ms/op
Iteration   2: 30.836 ms/op
Iteration   3: 41.496 ms/op
Iteration   4: 52.736 ms/op
Iteration   5: 40.529 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  39.326 ±(99.9%) 34.809 ms/op [Average]
  (min, avg, max) = (30.836, 39.326, 52.736), stdev = 9.040
  CI (99.9%): [4.517, 74.134] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 6.44% complete, ETA 00:43:37
# Fork: 1 of 1
# Warmup Iteration   1: 33.095 ms/op
# Warmup Iteration   2: 32.778 ms/op
# Warmup Iteration   3: 29.767 ms/op
# Warmup Iteration   4: 31.100 ms/op
# Warmup Iteration   5: 30.884 ms/op
Iteration   1: 29.242 ms/op
Iteration   2: 31.466 ms/op
Iteration   3: 37.689 ms/op
Iteration   4: 48.330 ms/op
Iteration   5: 51.151 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  39.575 ±(99.9%) 37.862 ms/op [Average]
  (min, avg, max) = (29.242, 39.575, 51.151), stdev = 9.833
  CI (99.9%): [1.713, 77.438] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 6.82% complete, ETA 00:43:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.010 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.007, 0.010, 0.012), stdev = 0.003
  CI (99.9%): [? 0, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 7.20% complete, ETA 00:43:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.010 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.008, 0.010, 0.014), stdev = 0.003
  CI (99.9%): [? 10??, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 7.58% complete, ETA 00:43:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.240 ms/op
# Warmup Iteration   2: 0.216 ms/op
# Warmup Iteration   3: 0.210 ms/op
# Warmup Iteration   4: 0.207 ms/op
# Warmup Iteration   5: 0.210 ms/op
Iteration   1: 0.209 ms/op
Iteration   2: 0.210 ms/op
Iteration   3: 0.263 ms/op
Iteration   4: 0.353 ms/op
Iteration   5: 0.354 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.278 ±(99.9%) 0.280 ms/op [Average]
  (min, avg, max) = (0.209, 0.278, 0.354), stdev = 0.073
  CI (99.9%): [? 0, 0.558] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 7.95% complete, ETA 00:43:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.238 ms/op
# Warmup Iteration   2: 0.209 ms/op
# Warmup Iteration   3: 0.211 ms/op
# Warmup Iteration   4: 0.210 ms/op
# Warmup Iteration   5: 0.209 ms/op
Iteration   1: 0.213 ms/op
Iteration   2: 0.210 ms/op
Iteration   3: 0.245 ms/op
Iteration   4: 0.325 ms/op
Iteration   5: 0.354 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.269 ±(99.9%) 0.255 ms/op [Average]
  (min, avg, max) = (0.210, 0.269, 0.354), stdev = 0.066
  CI (99.9%): [0.014, 0.525] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 8.33% complete, ETA 00:42:48
# Fork: 1 of 1
# Warmup Iteration   1: 61.836 ms/op
# Warmup Iteration   2: 54.049 ms/op
# Warmup Iteration   3: 57.569 ms/op
# Warmup Iteration   4: 74.075 ms/op
# Warmup Iteration   5: 82.483 ms/op
Iteration   1: 87.124 ms/op
Iteration   2: 77.092 ms/op
Iteration   3: 107.827 ms/op
Iteration   4: 101.488 ms/op
Iteration   5: 90.161 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  92.738 ±(99.9%) 46.654 ms/op [Average]
  (min, avg, max) = (77.092, 92.738, 107.827), stdev = 12.116
  CI (99.9%): [46.084, 139.393] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 8.71% complete, ETA 00:42:44
# Fork: 1 of 1
# Warmup Iteration   1: 73.263 ms/op
# Warmup Iteration   2: 71.625 ms/op
# Warmup Iteration   3: 66.111 ms/op
# Warmup Iteration   4: 72.613 ms/op
# Warmup Iteration   5: 70.291 ms/op
Iteration   1: 78.737 ms/op
Iteration   2: 62.600 ms/op
Iteration   3: 135.020 ms/op
Iteration   4: 130.864 ms/op
Iteration   5: 113.252 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  104.095 ±(99.9%) 123.605 ms/op [Average]
  (min, avg, max) = (62.600, 104.095, 135.020), stdev = 32.100
  CI (99.9%): [? 0, 227.700] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 9.09% complete, ETA 00:42:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.027 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.021 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.016, 0.021, 0.027), stdev = 0.005
  CI (99.9%): [0.002, 0.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 9.47% complete, ETA 00:42:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.019 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.015, 0.019, 0.024), stdev = 0.004
  CI (99.9%): [0.003, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 9.85% complete, ETA 00:42:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.467 ms/op
# Warmup Iteration   2: 0.425 ms/op
# Warmup Iteration   3: 0.430 ms/op
# Warmup Iteration   4: 0.419 ms/op
# Warmup Iteration   5: 0.423 ms/op
Iteration   1: 0.416 ms/op
Iteration   2: 0.414 ms/op
Iteration   3: 0.520 ms/op
Iteration   4: 0.714 ms/op
Iteration   5: 0.747 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.562 ±(99.9%) 0.617 ms/op [Average]
  (min, avg, max) = (0.414, 0.562, 0.747), stdev = 0.160
  CI (99.9%): [? 0, 1.179] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 10.23% complete, ETA 00:42:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.472 ms/op
# Warmup Iteration   2: 0.426 ms/op
# Warmup Iteration   3: 0.424 ms/op
# Warmup Iteration   4: 0.424 ms/op
# Warmup Iteration   5: 0.423 ms/op
Iteration   1: 0.421 ms/op
Iteration   2: 0.421 ms/op
Iteration   3: 0.498 ms/op
Iteration   4: 0.742 ms/op
Iteration   5: 0.719 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.560 ±(99.9%) 0.611 ms/op [Average]
  (min, avg, max) = (0.421, 0.560, 0.742), stdev = 0.159
  CI (99.9%): [? 0, 1.171] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 10.61% complete, ETA 00:41:51
# Fork: 1 of 1
# Warmup Iteration   1: 127.698 ms/op
# Warmup Iteration   2: 118.580 ms/op
# Warmup Iteration   3: 126.932 ms/op
# Warmup Iteration   4: 110.563 ms/op
# Warmup Iteration   5: 129.314 ms/op
Iteration   1: 127.318 ms/op
Iteration   2: 124.478 ms/op
Iteration   3: 173.270 ms/op
Iteration   4: 209.432 ms/op
Iteration   5: 197.190 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  166.338 ±(99.9%) 150.763 ms/op [Average]
  (min, avg, max) = (124.478, 166.338, 209.432), stdev = 39.153
  CI (99.9%): [15.574, 317.101] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 10.98% complete, ETA 00:41:49
# Fork: 1 of 1
# Warmup Iteration   1: 126.908 ms/op
# Warmup Iteration   2: 118.976 ms/op
# Warmup Iteration   3: 115.060 ms/op
# Warmup Iteration   4: 112.392 ms/op
# Warmup Iteration   5: 113.545 ms/op
Iteration   1: 123.028 ms/op
Iteration   2: 114.106 ms/op
Iteration   3: 199.162 ms/op
Iteration   4: 171.295 ms/op
Iteration   5: 174.807 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  156.480 ±(99.9%) 140.055 ms/op [Average]
  (min, avg, max) = (114.106, 156.480, 199.162), stdev = 36.372
  CI (99.9%): [16.424, 296.535] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 11.36% complete, ETA 00:41:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.030 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.047 ms/op
Iteration   5: 0.045 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.036 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.028, 0.036, 0.047), stdev = 0.009
  CI (99.9%): [? 10?³, 0.072] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 11.74% complete, ETA 00:41:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.030 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.033 ms/op
Iteration   4: 0.044 ms/op
Iteration   5: 0.050 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.037 ±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (0.028, 0.037, 0.050), stdev = 0.010
  CI (99.9%): [? 0, 0.074] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 12.12% complete, ETA 00:41:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.939 ms/op
# Warmup Iteration   2: 0.863 ms/op
# Warmup Iteration   3: 0.838 ms/op
# Warmup Iteration   4: 0.839 ms/op
# Warmup Iteration   5: 0.827 ms/op
Iteration   1: 0.837 ms/op
Iteration   2: 0.849 ms/op
Iteration   3: 0.887 ms/op
Iteration   4: 1.311 ms/op
Iteration   5: 1.387 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1.054 ±(99.9%) 1.044 ms/op [Average]
  (min, avg, max) = (0.837, 1.054, 1.387), stdev = 0.271
  CI (99.9%): [0.010, 2.098] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 12.50% complete, ETA 00:41:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.945 ms/op
# Warmup Iteration   2: 0.850 ms/op
# Warmup Iteration   3: 0.826 ms/op
# Warmup Iteration   4: 0.831 ms/op
# Warmup Iteration   5: 0.853 ms/op
Iteration   1: 0.836 ms/op
Iteration   2: 0.830 ms/op
Iteration   3: 1.001 ms/op
Iteration   4: 1.401 ms/op
Iteration   5: 1.439 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1.102 ±(99.9%) 1.151 ms/op [Average]
  (min, avg, max) = (0.830, 1.102, 1.439), stdev = 0.299
  CI (99.9%): [? 0, 2.253] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 12.88% complete, ETA 00:40:55
# Fork: 1 of 1
# Warmup Iteration   1: 262.670 ms/op
# Warmup Iteration   2: 225.558 ms/op
# Warmup Iteration   3: 272.650 ms/op
# Warmup Iteration   4: 237.832 ms/op
# Warmup Iteration   5: 306.075 ms/op
Iteration   1: 334.802 ms/op
Iteration   2: 373.466 ms/op
Iteration   3: 446.710 ms/op
Iteration   4: 388.569 ms/op
Iteration   5: 386.052 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  385.920 ±(99.9%) 154.873 ms/op [Average]
  (min, avg, max) = (334.802, 385.920, 446.710), stdev = 40.220
  CI (99.9%): [231.047, 540.793] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 13.26% complete, ETA 00:40:56
# Fork: 1 of 1
# Warmup Iteration   1: 311.469 ms/op
# Warmup Iteration   2: 315.362 ms/op
# Warmup Iteration   3: 323.614 ms/op
# Warmup Iteration   4: 313.067 ms/op
# Warmup Iteration   5: 307.856 ms/op
Iteration   1: 338.085 ms/op
Iteration   2: 481.221 ms/op
Iteration   3: 412.823 ms/op
Iteration   4: 389.380 ms/op
Iteration   5: 374.928 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  399.287 ±(99.9%) 204.969 ms/op [Average]
  (min, avg, max) = (338.085, 399.287, 481.221), stdev = 53.230
  CI (99.9%): [194.318, 604.256] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 13.64% complete, ETA 00:40:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.061 ms/op
# Warmup Iteration   3: 0.060 ms/op
# Warmup Iteration   4: 0.060 ms/op
# Warmup Iteration   5: 0.060 ms/op
Iteration   1: 0.060 ms/op
Iteration   2: 0.061 ms/op
Iteration   3: 0.075 ms/op
Iteration   4: 0.103 ms/op
Iteration   5: 0.104 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.080 ±(99.9%) 0.083 ms/op [Average]
  (min, avg, max) = (0.060, 0.080, 0.104), stdev = 0.022
  CI (99.9%): [? 0, 0.164] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 14.02% complete, ETA 00:40:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.065 ms/op
# Warmup Iteration   2: 0.059 ms/op
# Warmup Iteration   3: 0.060 ms/op
# Warmup Iteration   4: 0.063 ms/op
# Warmup Iteration   5: 0.065 ms/op
Iteration   1: 0.064 ms/op
Iteration   2: 0.065 ms/op
Iteration   3: 0.082 ms/op
Iteration   4: 0.110 ms/op
Iteration   5: 0.092 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.083 ±(99.9%) 0.074 ms/op [Average]
  (min, avg, max) = (0.064, 0.083, 0.110), stdev = 0.019
  CI (99.9%): [0.009, 0.156] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 14.39% complete, ETA 00:40:34
# Fork: 1 of 1
# Warmup Iteration   1: 1.968 ms/op
# Warmup Iteration   2: 1.752 ms/op
# Warmup Iteration   3: 1.895 ms/op
# Warmup Iteration   4: 1.843 ms/op
# Warmup Iteration   5: 1.846 ms/op
Iteration   1: 1.870 ms/op
Iteration   2: 1.898 ms/op
Iteration   3: 2.411 ms/op
Iteration   4: 3.284 ms/op
Iteration   5: 2.940 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  2.481 ±(99.9%) 2.415 ms/op [Average]
  (min, avg, max) = (1.870, 2.481, 3.284), stdev = 0.627
  CI (99.9%): [0.066, 4.896] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 14.77% complete, ETA 00:40:22
# Fork: 1 of 1
# Warmup Iteration   1: 1.943 ms/op
# Warmup Iteration   2: 1.952 ms/op
# Warmup Iteration   3: 1.933 ms/op
# Warmup Iteration   4: 1.934 ms/op
# Warmup Iteration   5: 1.938 ms/op
Iteration   1: 1.933 ms/op
Iteration   2: 1.950 ms/op
Iteration   3: 2.439 ms/op
Iteration   4: 3.374 ms/op
Iteration   5: 2.651 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  2.469 ±(99.9%) 2.285 ms/op [Average]
  (min, avg, max) = (1.933, 2.469, 3.374), stdev = 0.594
  CI (99.9%): [0.184, 4.755] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 15.15% complete, ETA 00:40:10
# Fork: 1 of 1
# Warmup Iteration   1: 684.157 ms/op
# Warmup Iteration   2: 756.892 ms/op
# Warmup Iteration   3: 713.562 ms/op
# Warmup Iteration   4: 692.107 ms/op
# Warmup Iteration   5: 743.725 ms/op
Iteration   1: 1003.175 ms/op
Iteration   2: 934.720 ms/op
Iteration   3: 760.682 ms/op
Iteration   4: 854.274 ms/op
Iteration   5: 802.569 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  871.084 ±(99.9%) 378.575 ms/op [Average]
  (min, avg, max) = (760.682, 871.084, 1003.175), stdev = 98.315
  CI (99.9%): [492.509, 1249.659] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 15.53% complete, ETA 00:40:35
# Fork: 1 of 1
# Warmup Iteration   1: 619.228 ms/op
# Warmup Iteration   2: 565.783 ms/op
# Warmup Iteration   3: 658.418 ms/op
# Warmup Iteration   4: 629.463 ms/op
# Warmup Iteration   5: 547.514 ms/op
Iteration   1: 679.638 ms/op
Iteration   2: 827.956 ms/op
Iteration   3: 841.427 ms/op
Iteration   4: 769.560 ms/op
Iteration   5: 793.693 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  782.455 ±(99.9%) 246.651 ms/op [Average]
  (min, avg, max) = (679.638, 782.455, 841.427), stdev = 64.055
  CI (99.9%): [535.804, 1029.106] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 15.91% complete, ETA 00:40:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.125 ms/op
# Warmup Iteration   2: 0.111 ms/op
# Warmup Iteration   3: 0.111 ms/op
# Warmup Iteration   4: 0.109 ms/op
# Warmup Iteration   5: 0.110 ms/op
Iteration   1: 0.110 ms/op
Iteration   2: 0.110 ms/op
Iteration   3: 0.131 ms/op
Iteration   4: 0.199 ms/op
Iteration   5: 0.194 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.149 ±(99.9%) 0.171 ms/op [Average]
  (min, avg, max) = (0.110, 0.149, 0.199), stdev = 0.045
  CI (99.9%): [? 0, 0.320] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 16.29% complete, ETA 00:40:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.130 ms/op
# Warmup Iteration   2: 0.116 ms/op
# Warmup Iteration   3: 0.117 ms/op
# Warmup Iteration   4: 0.119 ms/op
# Warmup Iteration   5: 0.116 ms/op
Iteration   1: 0.115 ms/op
Iteration   2: 0.115 ms/op
Iteration   3: 0.129 ms/op
Iteration   4: 0.206 ms/op
Iteration   5: 0.210 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.155 ±(99.9%) 0.188 ms/op [Average]
  (min, avg, max) = (0.115, 0.155, 0.210), stdev = 0.049
  CI (99.9%): [? 0, 0.343] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 16.67% complete, ETA 00:40:16
# Fork: 1 of 1
# Warmup Iteration   1: 3.816 ms/op
# Warmup Iteration   2: 3.437 ms/op
# Warmup Iteration   3: 3.425 ms/op
# Warmup Iteration   4: 3.395 ms/op
# Warmup Iteration   5: 3.340 ms/op
Iteration   1: 3.407 ms/op
Iteration   2: 3.562 ms/op
Iteration   3: 3.909 ms/op
Iteration   4: 5.618 ms/op
Iteration   5: 5.747 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  4.449 ±(99.9%) 4.397 ms/op [Average]
  (min, avg, max) = (3.407, 4.449, 5.747), stdev = 1.142
  CI (99.9%): [0.052, 8.846] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 17.05% complete, ETA 00:40:02
# Fork: 1 of 1
# Warmup Iteration   1: 3.797 ms/op
# Warmup Iteration   2: 3.360 ms/op
# Warmup Iteration   3: 3.349 ms/op
# Warmup Iteration   4: 3.648 ms/op
# Warmup Iteration   5: 3.462 ms/op
Iteration   1: 3.363 ms/op
Iteration   2: 3.378 ms/op
Iteration   3: 3.820 ms/op
Iteration   4: 5.295 ms/op
Iteration   5: 5.458 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  4.263 ±(99.9%) 3.984 ms/op [Average]
  (min, avg, max) = (3.363, 4.263, 5.458), stdev = 1.035
  CI (99.9%): [0.279, 8.247] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 17.42% complete, ETA 00:39:49
# Fork: 1 of 1
# Warmup Iteration   1: 1074.481 ms/op
# Warmup Iteration   2: 1032.303 ms/op
# Warmup Iteration   3: 1114.578 ms/op
# Warmup Iteration   4: 1211.055 ms/op
# Warmup Iteration   5: 923.987 ms/op
Iteration   1: 1044.196 ms/op
Iteration   2: 1309.669 ms/op
Iteration   3: 1413.616 ms/op
Iteration   4: 1528.780 ms/op
Iteration   5: 1657.502 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1390.752 ±(99.9%) 897.715 ms/op [Average]
  (min, avg, max) = (1044.196, 1390.752, 1657.502), stdev = 233.134
  CI (99.9%): [493.037, 2288.468] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 17.80% complete, ETA 00:39:52
# Fork: 1 of 1
# Warmup Iteration   1: 1040.603 ms/op
# Warmup Iteration   2: 1055.514 ms/op
# Warmup Iteration   3: 1020.464 ms/op
# Warmup Iteration   4: 1312.141 ms/op
# Warmup Iteration   5: 1641.325 ms/op
Iteration   1: 1536.200 ms/op
Iteration   2: 1611.627 ms/op
Iteration   3: 1617.193 ms/op
Iteration   4: 1750.003 ms/op
Iteration   5: 1836.272 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1670.259 ±(99.9%) 464.258 ms/op [Average]
  (min, avg, max) = (1536.200, 1670.259, 1836.272), stdev = 120.566
  CI (99.9%): [1206.001, 2134.517] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 18.18% complete, ETA 00:40:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.250 ms/op
# Warmup Iteration   2: 0.222 ms/op
# Warmup Iteration   3: 0.222 ms/op
# Warmup Iteration   4: 0.221 ms/op
# Warmup Iteration   5: 0.223 ms/op
Iteration   1: 0.222 ms/op
Iteration   2: 0.221 ms/op
Iteration   3: 0.283 ms/op
Iteration   4: 0.402 ms/op
Iteration   5: 0.341 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.294 ±(99.9%) 0.301 ms/op [Average]
  (min, avg, max) = (0.221, 0.294, 0.402), stdev = 0.078
  CI (99.9%): [? 0, 0.595] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 18.56% complete, ETA 00:39:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.261 ms/op
# Warmup Iteration   2: 0.237 ms/op
# Warmup Iteration   3: 0.232 ms/op
# Warmup Iteration   4: 0.230 ms/op
# Warmup Iteration   5: 0.230 ms/op
Iteration   1: 0.231 ms/op
Iteration   2: 0.228 ms/op
Iteration   3: 0.291 ms/op
Iteration   4: 0.404 ms/op
Iteration   5: 0.409 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.313 ±(99.9%) 0.345 ms/op [Average]
  (min, avg, max) = (0.228, 0.313, 0.409), stdev = 0.090
  CI (99.9%): [? 0, 0.657] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 18.94% complete, ETA 00:39:40
# Fork: 1 of 1
# Warmup Iteration   1: 7.747 ms/op
# Warmup Iteration   2: 6.624 ms/op
# Warmup Iteration   3: 6.736 ms/op
# Warmup Iteration   4: 6.652 ms/op
# Warmup Iteration   5: 7.122 ms/op
Iteration   1: 6.863 ms/op
Iteration   2: 6.928 ms/op
Iteration   3: 8.812 ms/op
Iteration   4: 11.757 ms/op
Iteration   5: 11.232 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  9.118 ±(99.9%) 8.908 ms/op [Average]
  (min, avg, max) = (6.863, 9.118, 11.757), stdev = 2.313
  CI (99.9%): [0.210, 18.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 19.32% complete, ETA 00:39:26
# Fork: 1 of 1
# Warmup Iteration   1: 7.999 ms/op
# Warmup Iteration   2: 6.656 ms/op
# Warmup Iteration   3: 6.719 ms/op
# Warmup Iteration   4: 7.095 ms/op
# Warmup Iteration   5: 7.112 ms/op
Iteration   1: 7.104 ms/op
Iteration   2: 7.045 ms/op
Iteration   3: 8.572 ms/op
Iteration   4: 11.675 ms/op
Iteration   5: 10.190 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  8.917 ±(99.9%) 7.735 ms/op [Average]
  (min, avg, max) = (7.045, 8.917, 11.675), stdev = 2.009
  CI (99.9%): [1.182, 16.652] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 19.70% complete, ETA 00:39:13
# Fork: 1 of 1
# Warmup Iteration   1: 2596.736 ms/op
# Warmup Iteration   2: 3435.784 ms/op
# Warmup Iteration   3: 3975.734 ms/op
# Warmup Iteration   4: 4071.261 ms/op
# Warmup Iteration   5: 4174.005 ms/op
Iteration   1: 4071.019 ms/op
Iteration   2: 4362.894 ms/op
Iteration   3: 4492.426 ms/op
Iteration   4: 4397.667 ms/op
Iteration   5: 4875.085 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  4439.818 ±(99.9%) 1115.910 ms/op [Average]
  (min, avg, max) = (4071.019, 4439.818, 4875.085), stdev = 289.798
  CI (99.9%): [3323.909, 5555.728] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 20.08% complete, ETA 00:41:06
# Fork: 1 of 1
# Warmup Iteration   1: 3799.942 ms/op
# Warmup Iteration   2: 3249.497 ms/op
# Warmup Iteration   3: 4689.498 ms/op
# Warmup Iteration   4: 4528.175 ms/op
# Warmup Iteration   5: 3394.859 ms/op
Iteration   1: 4354.917 ms/op
Iteration   2: 3439.769 ms/op
Iteration   3: 3920.132 ms/op
Iteration   4: 3635.416 ms/op
Iteration   5: 3995.284 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  3869.104 ±(99.9%) 1352.501 ms/op [Average]
  (min, avg, max) = (3439.769, 3869.104, 4354.917), stdev = 351.240
  CI (99.9%): [2516.603, 5221.605] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 20.45% complete, ETA 00:42:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.508 ms/op
# Warmup Iteration   2: 0.464 ms/op
# Warmup Iteration   3: 0.456 ms/op
# Warmup Iteration   4: 0.451 ms/op
# Warmup Iteration   5: 0.456 ms/op
Iteration   1: 0.453 ms/op
Iteration   2: 0.456 ms/op
Iteration   3: 0.567 ms/op
Iteration   4: 0.752 ms/op
Iteration   5: 0.815 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.609 ±(99.9%) 0.646 ms/op [Average]
  (min, avg, max) = (0.453, 0.609, 0.815), stdev = 0.168
  CI (99.9%): [? 0, 1.254] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 20.83% complete, ETA 00:42:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.500 ms/op
# Warmup Iteration   2: 0.439 ms/op
# Warmup Iteration   3: 0.440 ms/op
# Warmup Iteration   4: 0.442 ms/op
# Warmup Iteration   5: 0.452 ms/op
Iteration   1: 0.450 ms/op
Iteration   2: 0.443 ms/op
Iteration   3: 0.533 ms/op
Iteration   4: 0.782 ms/op
Iteration   5: 0.810 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.604 ±(99.9%) 0.691 ms/op [Average]
  (min, avg, max) = (0.443, 0.604, 0.810), stdev = 0.179
  CI (99.9%): [? 0, 1.294] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 21.21% complete, ETA 00:42:07
# Fork: 1 of 1
# Warmup Iteration   1: 18.636 ms/op
# Warmup Iteration   2: 13.726 ms/op
# Warmup Iteration   3: 13.229 ms/op
# Warmup Iteration   4: 13.628 ms/op
# Warmup Iteration   5: 13.701 ms/op
Iteration   1: 13.440 ms/op
Iteration   2: 13.454 ms/op
Iteration   3: 15.770 ms/op
Iteration   4: 21.537 ms/op
Iteration   5: 22.476 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  17.335 ±(99.9%) 16.869 ms/op [Average]
  (min, avg, max) = (13.440, 17.335, 22.476), stdev = 4.381
  CI (99.9%): [0.466, 34.204] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 21.59% complete, ETA 00:41:50
# Fork: 1 of 1
# Warmup Iteration   1: 18.640 ms/op
# Warmup Iteration   2: 14.019 ms/op
# Warmup Iteration   3: 13.484 ms/op
# Warmup Iteration   4: 13.598 ms/op
# Warmup Iteration   5: 13.463 ms/op
Iteration   1: 13.719 ms/op
Iteration   2: 13.548 ms/op
Iteration   3: 16.411 ms/op
Iteration   4: 22.080 ms/op
Iteration   5: 23.574 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  17.866 ±(99.9%) 18.092 ms/op [Average]
  (min, avg, max) = (13.548, 17.866, 23.574), stdev = 4.699
  CI (99.9%): [? 0, 35.959] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 21.97% complete, ETA 00:41:32
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:104)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 22.35% complete, ETA 00:41:29
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:104)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 22.73% complete, ETA 00:41:48
# Fork: 1 of 1
# Warmup Iteration   1: 1.798 ms/op
# Warmup Iteration   2: 1.156 ms/op
# Warmup Iteration   3: 1.032 ms/op
# Warmup Iteration   4: 0.985 ms/op
# Warmup Iteration   5: 0.915 ms/op
Iteration   1: 0.912 ms/op
Iteration   2: 0.888 ms/op
Iteration   3: 1.324 ms/op
Iteration   4: 1.546 ms/op
Iteration   5: 1.656 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1.265 ±(99.9%) 1.364 ms/op [Average]
  (min, avg, max) = (0.888, 1.265, 1.656), stdev = 0.354
  CI (99.9%): [? 0, 2.629] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 23.11% complete, ETA 00:41:30
# Fork: 1 of 1
# Warmup Iteration   1: 1.022 ms/op
# Warmup Iteration   2: 0.978 ms/op
# Warmup Iteration   3: 1.051 ms/op
# Warmup Iteration   4: 0.967 ms/op
# Warmup Iteration   5: 0.952 ms/op
Iteration   1: 1.046 ms/op
Iteration   2: 1.067 ms/op
Iteration   3: 1.306 ms/op
Iteration   4: 1.884 ms/op
Iteration   5: 1.657 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1.392 ±(99.9%) 1.421 ms/op [Average]
  (min, avg, max) = (1.046, 1.392, 1.884), stdev = 0.369
  CI (99.9%): [? 0, 2.813] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 23.48% complete, ETA 00:41:12
# Fork: 1 of 1
# Warmup Iteration   1: 40.926 ms/op
# Warmup Iteration   2: 30.522 ms/op
# Warmup Iteration   3: 29.508 ms/op
# Warmup Iteration   4: 29.539 ms/op
# Warmup Iteration   5: 32.574 ms/op
Iteration   1: 30.904 ms/op
Iteration   2: 30.909 ms/op
Iteration   3: 41.018 ms/op
Iteration   4: 54.860 ms/op
Iteration   5: 40.287 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  39.596 ±(99.9%) 37.851 ms/op [Average]
  (min, avg, max) = (30.904, 39.596, 54.860), stdev = 9.830
  CI (99.9%): [1.745, 77.447] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 23.86% complete, ETA 00:40:55
# Fork: 1 of 1
# Warmup Iteration   1: 50.149 ms/op
# Warmup Iteration   2: 29.875 ms/op
# Warmup Iteration   3: 30.311 ms/op
# Warmup Iteration   4: 30.617 ms/op
# Warmup Iteration   5: 29.969 ms/op
Iteration   1: 30.367 ms/op
Iteration   2: 30.107 ms/op
Iteration   3: 40.385 ms/op
Iteration   4: 54.517 ms/op
Iteration   5: 47.209 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  40.517 ±(99.9%) 40.942 ms/op [Average]
  (min, avg, max) = (30.107, 40.517, 54.517), stdev = 10.632
  CI (99.9%): [? 0, 81.459] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 24.24% complete, ETA 00:40:38
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:104)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 24.62% complete, ETA 00:40:46
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:104)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 25.00% complete, ETA 00:40:55
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 25.38% complete, ETA 00:40:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 25.76% complete, ETA 00:40:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 26.14% complete, ETA 00:40:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 26.52% complete, ETA 00:39:44
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 26.89% complete, ETA 00:39:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 27.27% complete, ETA 00:39:10
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 27.65% complete, ETA 00:38:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 28.03% complete, ETA 00:38:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 28.41% complete, ETA 00:38:20
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 28.79% complete, ETA 00:38:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 29.17% complete, ETA 00:37:47
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 29.55% complete, ETA 00:37:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 29.92% complete, ETA 00:37:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 30.30% complete, ETA 00:36:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 30.68% complete, ETA 00:36:44
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 31.06% complete, ETA 00:36:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 31.44% complete, ETA 00:36:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 31.82% complete, ETA 00:35:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 32.20% complete, ETA 00:35:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 32.58% complete, ETA 00:35:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 32.95% complete, ETA 00:35:12
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 33.33% complete, ETA 00:34:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 33.71% complete, ETA 00:34:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 34.09% complete, ETA 00:34:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 34.47% complete, ETA 00:34:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 34.85% complete, ETA 00:33:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 35.23% complete, ETA 00:33:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 35.61% complete, ETA 00:33:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 35.98% complete, ETA 00:33:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 36.36% complete, ETA 00:33:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 36.74% complete, ETA 00:32:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 37.12% complete, ETA 00:32:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 37.50% complete, ETA 00:32:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 37.88% complete, ETA 00:32:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10?³, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 38.26% complete, ETA 00:31:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 38.64% complete, ETA 00:31:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 39.02% complete, ETA 00:31:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 39.39% complete, ETA 00:31:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.005 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.001, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 39.77% complete, ETA 00:30:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 40.15% complete, ETA 00:30:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 40.53% complete, ETA 00:30:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 40.91% complete, ETA 00:30:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.008 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [? 10??, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 41.29% complete, ETA 00:30:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.008 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [? 0, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 41.67% complete, ETA 00:29:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.010 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.007, 0.010, 0.013), stdev = 0.003
  CI (99.9%): [? 0, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 42.05% complete, ETA 00:29:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.009 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.012), stdev = 0.002
  CI (99.9%): [? 0, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 42.42% complete, ETA 00:29:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.009 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.012), stdev = 0.002
  CI (99.9%): [? 0, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 42.80% complete, ETA 00:29:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.009 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.011), stdev = 0.002
  CI (99.9%): [0.001, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 43.18% complete, ETA 00:28:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.014 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.011, 0.014, 0.018), stdev = 0.003
  CI (99.9%): [0.003, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 43.56% complete, ETA 00:28:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.016 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.013, 0.016, 0.019), stdev = 0.003
  CI (99.9%): [0.004, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 43.94% complete, ETA 00:28:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.018 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.027 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.020 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.015, 0.020, 0.027), stdev = 0.006
  CI (99.9%): [? 0, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 44.32% complete, ETA 00:28:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.020 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.022 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.016, 0.022, 0.028), stdev = 0.005
  CI (99.9%): [0.004, 0.039] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 44.70% complete, ETA 00:28:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.018 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.013, 0.018, 0.022), stdev = 0.003
  CI (99.9%): [0.004, 0.031] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 45.08% complete, ETA 00:27:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.019 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.014, 0.019, 0.023), stdev = 0.005
  CI (99.9%): [0.001, 0.036] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 45.45% complete, ETA 00:27:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.038 ms/op
Iteration   5: 0.035 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.029 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (0.023, 0.029, 0.038), stdev = 0.007
  CI (99.9%): [0.004, 0.055] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 45.83% complete, ETA 00:27:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.035 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.029 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (0.023, 0.029, 0.037), stdev = 0.007
  CI (99.9%): [0.003, 0.055] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 46.21% complete, ETA 00:27:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.034 ms/op
# Warmup Iteration   5: 0.033 ms/op
Iteration   1: 0.035 ms/op
Iteration   2: 0.034 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.055 ms/op
Iteration   5: 0.057 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.043 ±(99.9%) 0.044 ms/op [Average]
  (min, avg, max) = (0.034, 0.043, 0.057), stdev = 0.012
  CI (99.9%): [? 0, 0.088] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 46.59% complete, ETA 00:27:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.031 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.034 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.036 ms/op
Iteration   4: 0.051 ms/op
Iteration   5: 0.049 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.039 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.029, 0.039, 0.051), stdev = 0.010
  CI (99.9%): [? 10??, 0.079] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 46.97% complete, ETA 00:26:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.040 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.040 ms/op
# Warmup Iteration   4: 0.032 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.027 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.046 ms/op
Iteration   5: 0.045 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.035 ±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (0.026, 0.035, 0.046), stdev = 0.010
  CI (99.9%): [? 0, 0.072] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 47.35% complete, ETA 00:26:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.050 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.030 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.049 ms/op
Iteration   5: 0.043 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.037 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.028, 0.037, 0.049), stdev = 0.009
  CI (99.9%): [0.001, 0.072] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 47.73% complete, ETA 00:26:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.044 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.052 ms/op
Iteration   4: 0.080 ms/op
Iteration   5: 0.080 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.061 ±(99.9%) 0.066 ms/op [Average]
  (min, avg, max) = (0.047, 0.061, 0.080), stdev = 0.017
  CI (99.9%): [? 0, 0.127] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 48.11% complete, ETA 00:26:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.043 ms/op
# Warmup Iteration   4: 0.044 ms/op
# Warmup Iteration   5: 0.049 ms/op
Iteration   1: 0.050 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.058 ms/op
Iteration   4: 0.084 ms/op
Iteration   5: 0.078 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.064 ±(99.9%) 0.063 ms/op [Average]
  (min, avg, max) = (0.048, 0.064, 0.084), stdev = 0.016
  CI (99.9%): [? 10??, 0.127] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 48.48% complete, ETA 00:26:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.065 ms/op
# Warmup Iteration   2: 0.052 ms/op
# Warmup Iteration   3: 0.054 ms/op
# Warmup Iteration   4: 0.061 ms/op
# Warmup Iteration   5: 0.066 ms/op
Iteration   1: 0.098 ms/op
Iteration   2: 0.099 ms/op
Iteration   3: 0.110 ms/op
Iteration   4: 0.136 ms/op
Iteration   5: 0.104 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.110 ±(99.9%) 0.061 ms/op [Average]
  (min, avg, max) = (0.098, 0.110, 0.136), stdev = 0.016
  CI (99.9%): [0.048, 0.171] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 48.86% complete, ETA 00:25:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.062 ms/op
# Warmup Iteration   2: 0.058 ms/op
# Warmup Iteration   3: 0.061 ms/op
# Warmup Iteration   4: 0.064 ms/op
# Warmup Iteration   5: 0.067 ms/op
Iteration   1: 0.077 ms/op
Iteration   2: 0.067 ms/op
Iteration   3: 0.096 ms/op
Iteration   4: 0.127 ms/op
Iteration   5: 0.117 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.097 ±(99.9%) 0.098 ms/op [Average]
  (min, avg, max) = (0.067, 0.097, 0.127), stdev = 0.025
  CI (99.9%): [? 0, 0.195] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 49.24% complete, ETA 00:25:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.079 ms/op
# Warmup Iteration   2: 0.068 ms/op
# Warmup Iteration   3: 0.068 ms/op
# Warmup Iteration   4: 0.069 ms/op
# Warmup Iteration   5: 0.070 ms/op
Iteration   1: 0.069 ms/op
Iteration   2: 0.068 ms/op
Iteration   3: 0.091 ms/op
Iteration   4: 0.103 ms/op
Iteration   5: 0.098 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.086 ±(99.9%) 0.063 ms/op [Average]
  (min, avg, max) = (0.068, 0.086, 0.103), stdev = 0.016
  CI (99.9%): [0.023, 0.149] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 49.62% complete, ETA 00:25:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.100 ms/op
# Warmup Iteration   2: 0.069 ms/op
# Warmup Iteration   3: 0.077 ms/op
# Warmup Iteration   4: 0.075 ms/op
# Warmup Iteration   5: 0.070 ms/op
Iteration   1: 0.076 ms/op
Iteration   2: 0.066 ms/op
Iteration   3: 0.085 ms/op
Iteration   4: 0.106 ms/op
Iteration   5: 0.094 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.085 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (0.066, 0.085, 0.106), stdev = 0.016
  CI (99.9%): [0.025, 0.146] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 50.00% complete, ETA 00:25:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: 0.001 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 50.38% complete, ETA 00:25:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: 0.001 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 50.76% complete, ETA 00:24:50
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.002 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 51.14% complete, ETA 00:24:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.002 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 51.52% complete, ETA 00:24:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 51.89% complete, ETA 00:24:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 52.27% complete, ETA 00:24:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: 0.005 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.005 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 52.65% complete, ETA 00:23:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: 0.002 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 53.03% complete, ETA 00:23:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.040 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.014 ±(99.9%) 0.417 ms/op [Average]
  (min, avg, max) = (0.001, 0.014, 0.040), stdev = 0.023
  CI (99.9%): [? 0, 0.430] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 53.41% complete, ETA 00:23:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 53.79% complete, ETA 00:23:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 54.17% complete, ETA 00:23:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 54.55% complete, ETA 00:22:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.003 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 54.92% complete, ETA 00:22:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.010 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 55.30% complete, ETA 00:22:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 55.68% complete, ETA 00:22:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.002
  CI (99.9%): [? 0, 0.036] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 56.06% complete, ETA 00:22:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 56.44% complete, ETA 00:22:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 56.82% complete, ETA 00:21:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.010 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 57.20% complete, ETA 00:21:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.005 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 57.58% complete, ETA 00:21:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.004 ±(99.9%) 0.052 ms/op [Average]
  (min, avg, max) = (0.002, 0.004, 0.007), stdev = 0.003
  CI (99.9%): [? 0, 0.055] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 57.95% complete, ETA 00:21:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.040 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.012 ±(99.9%) 0.120 ms/op [Average]
  (min, avg, max) = (0.002, 0.012, 0.040), stdev = 0.019
  CI (99.9%): [? 0, 0.132] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 58.33% complete, ETA 00:21:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 58.71% complete, ETA 00:20:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 59.09% complete, ETA 00:20:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.010 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 59.47% complete, ETA 00:20:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.014 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 59.85% complete, ETA 00:20:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.009 ±(99.9%) 0.052 ms/op [Average]
  (min, avg, max) = (0.004, 0.009, 0.021), stdev = 0.008
  CI (99.9%): [? 0, 0.060] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 60.23% complete, ETA 00:20:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.062 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.019 ±(99.9%) 0.184 ms/op [Average]
  (min, avg, max) = (0.004, 0.019, 0.062), stdev = 0.028
  CI (99.9%): [? 0, 0.203] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 60.61% complete, ETA 00:20:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.010 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.008, 0.010, 0.012), stdev = 0.002
  CI (99.9%): [0.003, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 60.98% complete, ETA 00:19:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.011 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.017), stdev = 0.004
  CI (99.9%): [? 0, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 61.36% complete, ETA 00:19:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.019 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 61.74% complete, ETA 00:19:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.034 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.020 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 62.12% complete, ETA 00:19:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.196 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.047 ±(99.9%) 0.320 ms/op [Average]
  (min, avg, max) = (0.008, 0.047, 0.196), stdev = 0.083
  CI (99.9%): [? 0, 0.367] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 62.50% complete, ETA 00:19:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.068 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.022 ±(99.9%) 0.100 ms/op [Average]
  (min, avg, max) = (0.008, 0.022, 0.068), stdev = 0.026
  CI (99.9%): [? 0, 0.122] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 62.88% complete, ETA 00:18:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.041 ms/op
Iteration   5: 0.027 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.024 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.016, 0.024, 0.041), stdev = 0.011
  CI (99.9%): [? 0, 0.065] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 63.26% complete, ETA 00:18:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.038 ms/op
Iteration   5: 0.028 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.024 ±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (0.016, 0.024, 0.038), stdev = 0.009
  CI (99.9%): [? 0, 0.058] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 63.64% complete, ETA 00:18:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.026 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 64.02% complete, ETA 00:18:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.049 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.030 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 64.39% complete, ETA 00:18:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.282 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.073 ±(99.9%) 0.450 ms/op [Average]
  (min, avg, max) = (0.016, 0.073, 0.282), stdev = 0.117
  CI (99.9%): [? 0, 0.523] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 64.77% complete, ETA 00:17:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.031 ms/op
Iteration   5: 0.403 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.099 ±(99.9%) 0.654 ms/op [Average]
  (min, avg, max) = (0.017, 0.099, 0.403), stdev = 0.170
  CI (99.9%): [? 0, 0.753] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 65.15% complete, ETA 00:17:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.039 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.039 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: 0.036 ms/op
Iteration   2: 0.039 ms/op
Iteration   3: 0.046 ms/op
Iteration   4: 0.049 ms/op
Iteration   5: 0.076 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.049 ±(99.9%) 0.061 ms/op [Average]
  (min, avg, max) = (0.036, 0.049, 0.076), stdev = 0.016
  CI (99.9%): [? 0, 0.110] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 65.53% complete, ETA 00:17:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.043 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.041 ms/op
# Warmup Iteration   5: 0.043 ms/op
Iteration   1: 0.055 ms/op
Iteration   2: 0.042 ms/op
Iteration   3: 0.052 ms/op
Iteration   4: 0.065 ms/op
Iteration   5: 0.051 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.053 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.042, 0.053, 0.065), stdev = 0.008
  CI (99.9%): [0.022, 0.084] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 65.91% complete, ETA 00:17:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.071 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.071 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 66.29% complete, ETA 00:17:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.028 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.047 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.200 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.114 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 66.67% complete, ETA 00:16:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.030 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.034 ms/op
Iteration   2: 0.035 ms/op
Iteration   3: 0.050 ms/op
Iteration   4: 0.250 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.092 ±(99.9%) 0.681 ms/op [Average]
  (min, avg, max) = (0.034, 0.092, 0.250), stdev = 0.105
  CI (99.9%): [? 0, 0.773] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 67.05% complete, ETA 00:16:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.037 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.036 ms/op
# Warmup Iteration   4: 0.034 ms/op
# Warmup Iteration   5: 0.057 ms/op
Iteration   1: 0.036 ms/op
Iteration   2: 0.034 ms/op
Iteration   3: 0.043 ms/op
Iteration   4: 0.050 ms/op
Iteration   5: 0.346 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.102 ±(99.9%) 0.525 ms/op [Average]
  (min, avg, max) = (0.034, 0.102, 0.346), stdev = 0.136
  CI (99.9%): [? 0, 0.627] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 67.42% complete, ETA 00:16:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.091 ms/op
# Warmup Iteration   2: 0.085 ms/op
# Warmup Iteration   3: 0.088 ms/op
# Warmup Iteration   4: 0.081 ms/op
# Warmup Iteration   5: 0.078 ms/op
Iteration   1: 0.104 ms/op
Iteration   2: 0.077 ms/op
Iteration   3: 0.109 ms/op
Iteration   4: 0.119 ms/op
Iteration   5: 0.095 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.101 ±(99.9%) 0.061 ms/op [Average]
  (min, avg, max) = (0.077, 0.101, 0.119), stdev = 0.016
  CI (99.9%): [0.040, 0.162] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 67.80% complete, ETA 00:16:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.099 ms/op
# Warmup Iteration   2: 0.094 ms/op
# Warmup Iteration   3: 0.095 ms/op
# Warmup Iteration   4: 0.087 ms/op
# Warmup Iteration   5: 0.085 ms/op
Iteration   1: 0.110 ms/op
Iteration   2: 0.088 ms/op
Iteration   3: 0.111 ms/op
Iteration   4: 0.125 ms/op
Iteration   5: 0.126 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.112 ±(99.9%) 0.059 ms/op [Average]
  (min, avg, max) = (0.088, 0.112, 0.126), stdev = 0.015
  CI (99.9%): [0.053, 0.171] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 68.18% complete, ETA 00:16:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.058 ms/op
# Warmup Iteration   2: 0.050 ms/op
# Warmup Iteration   3: 0.044 ms/op
# Warmup Iteration   4: 0.061 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.084 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.084 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 68.56% complete, ETA 00:15:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.054 ms/op
# Warmup Iteration   2: 0.051 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.085 ms/op
# Warmup Iteration   5: 0.047 ms/op
Iteration   1: 0.050 ms/op
Iteration   2: 3.022 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  1.536 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 68.94% complete, ETA 00:15:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.072 ms/op
# Warmup Iteration   2: 0.075 ms/op
# Warmup Iteration   3: 0.063 ms/op
# Warmup Iteration   4: 0.073 ms/op
# Warmup Iteration   5: 0.080 ms/op
Iteration   1: 0.071 ms/op
Iteration   2: 0.072 ms/op
Iteration   3: 0.087 ms/op
Iteration   4: 0.278 ms/op
Iteration   5: 0.469 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.196 ±(99.9%) 0.678 ms/op [Average]
  (min, avg, max) = (0.071, 0.196, 0.469), stdev = 0.176
  CI (99.9%): [? 0, 0.874] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 69.32% complete, ETA 00:15:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.083 ms/op
# Warmup Iteration   2: 0.069 ms/op
# Warmup Iteration   3: 0.070 ms/op
# Warmup Iteration   4: 0.067 ms/op
# Warmup Iteration   5: 0.114 ms/op
Iteration   1: 0.077 ms/op
Iteration   2: 0.063 ms/op
Iteration   3: 0.084 ms/op
Iteration   4: 0.109 ms/op
Iteration   5: 0.619 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.190 ±(99.9%) 0.926 ms/op [Average]
  (min, avg, max) = (0.063, 0.190, 0.619), stdev = 0.240
  CI (99.9%): [? 0, 1.116] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 69.70% complete, ETA 00:15:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.221 ms/op
# Warmup Iteration   2: 0.188 ms/op
# Warmup Iteration   3: 0.182 ms/op
# Warmup Iteration   4: 0.159 ms/op
# Warmup Iteration   5: 0.172 ms/op
Iteration   1: 0.210 ms/op
Iteration   2: 0.162 ms/op
Iteration   3: 0.206 ms/op
Iteration   4: 0.236 ms/op
Iteration   5: 0.235 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.210 ±(99.9%) 0.115 ms/op [Average]
  (min, avg, max) = (0.162, 0.210, 0.236), stdev = 0.030
  CI (99.9%): [0.094, 0.325] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 70.08% complete, ETA 00:15:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.205 ms/op
# Warmup Iteration   2: 0.184 ms/op
# Warmup Iteration   3: 0.200 ms/op
# Warmup Iteration   4: 0.180 ms/op
# Warmup Iteration   5: 0.183 ms/op
Iteration   1: 0.223 ms/op
Iteration   2: 0.182 ms/op
Iteration   3: 0.236 ms/op
Iteration   4: 0.299 ms/op
Iteration   5: 0.230 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.234 ±(99.9%) 0.162 ms/op [Average]
  (min, avg, max) = (0.182, 0.234, 0.299), stdev = 0.042
  CI (99.9%): [0.072, 0.396] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 70.45% complete, ETA 00:14:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.111 ms/op
# Warmup Iteration   2: 0.105 ms/op
# Warmup Iteration   3: 0.113 ms/op
# Warmup Iteration   4: 0.087 ms/op
# Warmup Iteration   5: 0.079 ms/op
Iteration   1: 0.433 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.433 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 70.83% complete, ETA 00:14:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.126 ms/op
# Warmup Iteration   2: 0.104 ms/op
# Warmup Iteration   3: 0.084 ms/op
# Warmup Iteration   4: 0.215 ms/op
# Warmup Iteration   5: 0.086 ms/op
Iteration   1: 0.097 ms/op
Iteration   2: 1.102 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.599 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 71.21% complete, ETA 00:14:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.149 ms/op
# Warmup Iteration   2: 0.128 ms/op
# Warmup Iteration   3: 0.166 ms/op
# Warmup Iteration   4: 0.128 ms/op
# Warmup Iteration   5: 0.208 ms/op
Iteration   1: 0.127 ms/op
Iteration   2: 0.141 ms/op
Iteration   3: 0.154 ms/op
Iteration   4: 0.243 ms/op
Iteration   5: 4.471 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  1.027 ±(99.9%) 7.415 ms/op [Average]
  (min, avg, max) = (0.127, 1.027, 4.471), stdev = 1.926
  CI (99.9%): [? 0, 8.442] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 71.59% complete, ETA 00:14:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.143 ms/op
# Warmup Iteration   2: 0.148 ms/op
# Warmup Iteration   3: 0.121 ms/op
# Warmup Iteration   4: 0.148 ms/op
# Warmup Iteration   5: 0.193 ms/op
Iteration   1: 0.136 ms/op
Iteration   2: 0.143 ms/op
Iteration   3: 0.165 ms/op
Iteration   4: 0.534 ms/op
Iteration   5: 0.905 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.376 ±(99.9%) 1.307 ms/op [Average]
  (min, avg, max) = (0.136, 0.376, 0.905), stdev = 0.339
  CI (99.9%): [? 0, 1.683] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 71.97% complete, ETA 00:14:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.454 ms/op
# Warmup Iteration   2: 0.389 ms/op
# Warmup Iteration   3: 0.356 ms/op
# Warmup Iteration   4: 0.402 ms/op
# Warmup Iteration   5: 0.385 ms/op
Iteration   1: 0.417 ms/op
Iteration   2: 0.377 ms/op
Iteration   3: 0.448 ms/op
Iteration   4: 0.583 ms/op
Iteration   5: 0.751 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.515 ±(99.9%) 0.589 ms/op [Average]
  (min, avg, max) = (0.377, 0.515, 0.751), stdev = 0.153
  CI (99.9%): [? 0, 1.105] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 72.35% complete, ETA 00:13:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.531 ms/op
# Warmup Iteration   2: 0.468 ms/op
# Warmup Iteration   3: 0.456 ms/op
# Warmup Iteration   4: 0.472 ms/op
# Warmup Iteration   5: 0.411 ms/op
Iteration   1: 0.416 ms/op
Iteration   2: 0.510 ms/op
Iteration   3: 0.596 ms/op
Iteration   4: 0.624 ms/op
Iteration   5: 0.623 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.554 ±(99.9%) 0.346 ms/op [Average]
  (min, avg, max) = (0.416, 0.554, 0.624), stdev = 0.090
  CI (99.9%): [0.208, 0.900] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 72.73% complete, ETA 00:13:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.234 ms/op
# Warmup Iteration   2: 0.216 ms/op
# Warmup Iteration   3: 0.190 ms/op
# Warmup Iteration   4: 0.651 ms/op
# Warmup Iteration   5: 0.310 ms/op
Iteration   1: 0.239 ms/op
Iteration   2: 0.244 ms/op
Iteration   3: 2.112 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.865 ±(99.9%) 19.700 ms/op [Average]
  (min, avg, max) = (0.239, 0.865, 2.112), stdev = 1.080
  CI (99.9%): [? 0, 20.565] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 73.11% complete, ETA 00:13:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.334 ms/op
# Warmup Iteration   2: 0.277 ms/op
# Warmup Iteration   3: 0.254 ms/op
# Warmup Iteration   4: 0.378 ms/op
# Warmup Iteration   5: 0.276 ms/op
Iteration   1: 0.296 ms/op
Iteration   2: 0.261 ms/op
Iteration   3: 0.474 ms/op
Iteration   4: 7.822 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  2.213 ±(99.9%) 24.171 ms/op [Average]
  (min, avg, max) = (0.261, 2.213, 7.822), stdev = 3.740
  CI (99.9%): [? 0, 26.384] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 73.48% complete, ETA 00:13:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.420 ms/op
# Warmup Iteration   2: 0.345 ms/op
# Warmup Iteration   3: 0.517 ms/op
# Warmup Iteration   4: 0.547 ms/op
# Warmup Iteration   5: 0.668 ms/op
Iteration   1: 0.699 ms/op
Iteration   2: 0.850 ms/op
Iteration   3: 0.787 ms/op
Iteration   4: 2.996 ms/op
Iteration   5: 0.886 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  1.244 ±(99.9%) 3.781 ms/op [Average]
  (min, avg, max) = (0.699, 1.244, 2.996), stdev = 0.982
  CI (99.9%): [? 0, 5.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 73.86% complete, ETA 00:13:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.949 ms/op
# Warmup Iteration   2: 0.674 ms/op
# Warmup Iteration   3: 0.568 ms/op
# Warmup Iteration   4: 0.799 ms/op
# Warmup Iteration   5: 0.614 ms/op
Iteration   1: 3.176 ms/op
Iteration   2: 1.186 ms/op
Iteration   3: 0.913 ms/op
Iteration   4: 0.745 ms/op
Iteration   5: 0.887 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  1.382 ±(99.9%) 3.911 ms/op [Average]
  (min, avg, max) = (0.745, 1.382, 3.176), stdev = 1.016
  CI (99.9%): [? 0, 5.293] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 74.24% complete, ETA 00:13:02
# Fork: 1 of 1
# Warmup Iteration   1: 2.894 ms/op
# Warmup Iteration   2: 2.232 ms/op
# Warmup Iteration   3: 2.181 ms/op
# Warmup Iteration   4: 2.338 ms/op
# Warmup Iteration   5: 2.340 ms/op
Iteration   1: 2.129 ms/op
Iteration   2: 2.620 ms/op
Iteration   3: 3.497 ms/op
Iteration   4: 3.526 ms/op
Iteration   5: 4.027 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  3.160 ±(99.9%) 2.954 ms/op [Average]
  (min, avg, max) = (2.129, 3.160, 4.027), stdev = 0.767
  CI (99.9%): [0.206, 6.114] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 74.62% complete, ETA 00:12:50
# Fork: 1 of 1
# Warmup Iteration   1: 3.354 ms/op
# Warmup Iteration   2: 2.400 ms/op
# Warmup Iteration   3: 2.004 ms/op
# Warmup Iteration   4: 1.766 ms/op
# Warmup Iteration   5: 2.107 ms/op
Iteration   1: 1.950 ms/op
Iteration   2: 1.305 ms/op
Iteration   3: 2.743 ms/op
Iteration   4: 2.428 ms/op
Iteration   5: 2.728 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  2.231 ±(99.9%) 2.346 ms/op [Average]
  (min, avg, max) = (1.305, 2.231, 2.743), stdev = 0.609
  CI (99.9%): [? 0, 4.577] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 75.00% complete, ETA 00:12:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 75.38% complete, ETA 00:12:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 75.76% complete, ETA 00:12:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 76.14% complete, ETA 00:12:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 76.52% complete, ETA 00:11:51
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 76.89% complete, ETA 00:11:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 77.27% complete, ETA 00:11:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 77.65% complete, ETA 00:11:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 78.03% complete, ETA 00:11:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 78.41% complete, ETA 00:10:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 78.79% complete, ETA 00:10:41
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 79.17% complete, ETA 00:10:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 79.55% complete, ETA 00:10:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 79.92% complete, ETA 00:10:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 80.30% complete, ETA 00:09:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 80.68% complete, ETA 00:09:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 81.06% complete, ETA 00:09:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 81.44% complete, ETA 00:09:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 81.82% complete, ETA 00:09:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 82.20% complete, ETA 00:08:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 82.58% complete, ETA 00:08:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 82.95% complete, ETA 00:08:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 83.33% complete, ETA 00:08:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 83.71% complete, ETA 00:08:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 84.09% complete, ETA 00:07:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 84.47% complete, ETA 00:07:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 84.85% complete, ETA 00:07:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10?³, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 85.23% complete, ETA 00:07:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 85.61% complete, ETA 00:07:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.005 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.001, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 85.98% complete, ETA 00:07:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 86.36% complete, ETA 00:06:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.003 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 86.74% complete, ETA 00:06:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10?³, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 87.12% complete, ETA 00:06:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [0.001, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 87.50% complete, ETA 00:06:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 87.88% complete, ETA 00:06:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.011 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.013), stdev = 0.002
  CI (99.9%): [0.001, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 88.26% complete, ETA 00:05:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.011 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.013), stdev = 0.002
  CI (99.9%): [0.002, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 88.64% complete, ETA 00:05:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 10??, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 89.02% complete, ETA 00:05:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.009), stdev = 0.001
  CI (99.9%): [0.001, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 89.39% complete, ETA 00:05:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.007 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.010), stdev = 0.002
  CI (99.9%): [? 10?³, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 89.77% complete, ETA 00:05:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.009 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.011), stdev = 0.002
  CI (99.9%): [? 0, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 90.15% complete, ETA 00:04:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.037 ms/op
Iteration   5: 0.036 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.029 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.022, 0.029, 0.037), stdev = 0.007
  CI (99.9%): [0.002, 0.056] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 90.53% complete, ETA 00:04:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.047 ms/op
Iteration   5: 0.036 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.033 ±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (0.026, 0.033, 0.047), stdev = 0.009
  CI (99.9%): [? 0, 0.068] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 90.91% complete, ETA 00:04:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.012 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.009, 0.012, 0.016), stdev = 0.003
  CI (99.9%): [? 0, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 91.29% complete, ETA 00:04:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.012 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.009, 0.012, 0.015), stdev = 0.003
  CI (99.9%): [0.001, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 91.67% complete, ETA 00:04:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.016 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.020), stdev = 0.004
  CI (99.9%): [0.001, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 92.05% complete, ETA 00:03:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.016 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.013, 0.016, 0.021), stdev = 0.004
  CI (99.9%): [0.002, 0.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 92.42% complete, ETA 00:03:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.056 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.060 ms/op
Iteration   4: 0.072 ms/op
Iteration   5: 0.078 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.061 ±(99.9%) 0.054 ms/op [Average]
  (min, avg, max) = (0.048, 0.061, 0.078), stdev = 0.014
  CI (99.9%): [0.007, 0.115] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 92.80% complete, ETA 00:03:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.061 ms/op
# Warmup Iteration   2: 0.053 ms/op
# Warmup Iteration   3: 0.054 ms/op
# Warmup Iteration   4: 0.052 ms/op
# Warmup Iteration   5: 0.052 ms/op
Iteration   1: 0.053 ms/op
Iteration   2: 0.053 ms/op
Iteration   3: 0.065 ms/op
Iteration   4: 0.089 ms/op
Iteration   5: 0.080 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.068 ±(99.9%) 0.062 ms/op [Average]
  (min, avg, max) = (0.053, 0.068, 0.089), stdev = 0.016
  CI (99.9%): [0.006, 0.129] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 93.18% complete, ETA 00:03:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.032 ms/op
Iteration   5: 0.035 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.026 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.019, 0.026, 0.035), stdev = 0.008
  CI (99.9%): [? 0, 0.054] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 93.56% complete, ETA 00:03:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.026 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.020, 0.026, 0.033), stdev = 0.006
  CI (99.9%): [0.003, 0.048] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 93.94% complete, ETA 00:03:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.039 ms/op
Iteration   5: 0.036 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.029 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.022, 0.029, 0.039), stdev = 0.008
  CI (99.9%): [? 0, 0.059] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 94.32% complete, ETA 00:02:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.040 ms/op
Iteration   5: 0.036 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.030 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.023, 0.030, 0.040), stdev = 0.007
  CI (99.9%): [0.001, 0.059] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 94.70% complete, ETA 00:02:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.121 ms/op
# Warmup Iteration   2: 0.099 ms/op
# Warmup Iteration   3: 0.098 ms/op
# Warmup Iteration   4: 0.100 ms/op
# Warmup Iteration   5: 0.099 ms/op
Iteration   1: 0.099 ms/op
Iteration   2: 0.099 ms/op
Iteration   3: 0.121 ms/op
Iteration   4: 0.153 ms/op
Iteration   5: 0.176 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.130 ±(99.9%) 0.132 ms/op [Average]
  (min, avg, max) = (0.099, 0.130, 0.176), stdev = 0.034
  CI (99.9%): [? 0, 0.262] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 95.08% complete, ETA 00:02:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.126 ms/op
# Warmup Iteration   2: 0.112 ms/op
# Warmup Iteration   3: 0.106 ms/op
# Warmup Iteration   4: 0.108 ms/op
# Warmup Iteration   5: 0.107 ms/op
Iteration   1: 0.107 ms/op
Iteration   2: 0.107 ms/op
Iteration   3: 0.125 ms/op
Iteration   4: 0.149 ms/op
Iteration   5: 0.167 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.131 ±(99.9%) 0.103 ms/op [Average]
  (min, avg, max) = (0.107, 0.131, 0.167), stdev = 0.027
  CI (99.9%): [0.028, 0.234] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 95.45% complete, ETA 00:02:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.034 ms/op
# Warmup Iteration   4: 0.034 ms/op
# Warmup Iteration   5: 0.039 ms/op
Iteration   1: 0.039 ms/op
Iteration   2: 0.040 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.051 ms/op
Iteration   5: 0.056 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.047 ±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.039, 0.047, 0.056), stdev = 0.007
  CI (99.9%): [0.019, 0.075] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 95.83% complete, ETA 00:02:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.036 ms/op
# Warmup Iteration   2: 0.035 ms/op
# Warmup Iteration   3: 0.034 ms/op
# Warmup Iteration   4: 0.035 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: 0.040 ms/op
Iteration   2: 0.040 ms/op
Iteration   3: 0.045 ms/op
Iteration   4: 0.064 ms/op
Iteration   5: 0.068 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.052 ±(99.9%) 0.052 ms/op [Average]
  (min, avg, max) = (0.040, 0.052, 0.068), stdev = 0.013
  CI (99.9%): [? 0, 0.104] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 96.21% complete, ETA 00:01:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 ms/op
# Warmup Iteration   2: 0.043 ms/op
# Warmup Iteration   3: 0.044 ms/op
# Warmup Iteration   4: 0.042 ms/op
# Warmup Iteration   5: 0.047 ms/op
Iteration   1: 0.058 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.055 ms/op
Iteration   4: 0.065 ms/op
Iteration   5: 0.078 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.061 ±(99.9%) 0.045 ms/op [Average]
  (min, avg, max) = (0.047, 0.061, 0.078), stdev = 0.012
  CI (99.9%): [0.016, 0.105] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 96.59% complete, ETA 00:01:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.052 ms/op
# Warmup Iteration   2: 0.048 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.044 ms/op
Iteration   1: 0.052 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.053 ms/op
Iteration   4: 0.077 ms/op
Iteration   5: 0.081 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.062 ±(99.9%) 0.061 ms/op [Average]
  (min, avg, max) = (0.047, 0.062, 0.081), stdev = 0.016
  CI (99.9%): [0.001, 0.123] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 96.97% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.277 ms/op
# Warmup Iteration   2: 0.242 ms/op
# Warmup Iteration   3: 0.238 ms/op
# Warmup Iteration   4: 0.234 ms/op
# Warmup Iteration   5: 0.233 ms/op
Iteration   1: 0.235 ms/op
Iteration   2: 0.231 ms/op
Iteration   3: 0.266 ms/op
Iteration   4: 0.393 ms/op
Iteration   5: 0.368 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.299 ±(99.9%) 0.295 ms/op [Average]
  (min, avg, max) = (0.231, 0.299, 0.393), stdev = 0.077
  CI (99.9%): [0.004, 0.593] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 97.35% complete, ETA 00:01:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.288 ms/op
# Warmup Iteration   2: 0.261 ms/op
# Warmup Iteration   3: 0.248 ms/op
# Warmup Iteration   4: 0.249 ms/op
# Warmup Iteration   5: 0.250 ms/op
Iteration   1: 0.243 ms/op
Iteration   2: 0.251 ms/op
Iteration   3: 0.316 ms/op
Iteration   4: 0.533 ms/op
Iteration   5: 0.487 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.366 ±(99.9%) 0.521 ms/op [Average]
  (min, avg, max) = (0.243, 0.366, 0.533), stdev = 0.135
  CI (99.9%): [? 0, 0.887] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 97.73% complete, ETA 00:01:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.072 ms/op
# Warmup Iteration   2: 0.071 ms/op
# Warmup Iteration   3: 0.069 ms/op
# Warmup Iteration   4: 0.070 ms/op
# Warmup Iteration   5: 0.068 ms/op
Iteration   1: 0.068 ms/op
Iteration   2: 0.068 ms/op
Iteration   3: 0.075 ms/op
Iteration   4: 0.114 ms/op
Iteration   5: 0.110 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.087 ±(99.9%) 0.089 ms/op [Average]
  (min, avg, max) = (0.068, 0.087, 0.114), stdev = 0.023
  CI (99.9%): [? 0, 0.176] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 98.11% complete, ETA 00:00:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.072 ms/op
# Warmup Iteration   2: 0.071 ms/op
# Warmup Iteration   3: 0.070 ms/op
# Warmup Iteration   4: 0.070 ms/op
# Warmup Iteration   5: 0.069 ms/op
Iteration   1: 0.070 ms/op
Iteration   2: 0.069 ms/op
Iteration   3: 0.079 ms/op
Iteration   4: 0.121 ms/op
Iteration   5: 0.114 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.091 ±(99.9%) 0.097 ms/op [Average]
  (min, avg, max) = (0.069, 0.091, 0.121), stdev = 0.025
  CI (99.9%): [? 0, 0.188] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 98.48% complete, ETA 00:00:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.104 ms/op
# Warmup Iteration   2: 0.095 ms/op
# Warmup Iteration   3: 0.095 ms/op
# Warmup Iteration   4: 0.095 ms/op
# Warmup Iteration   5: 0.095 ms/op
Iteration   1: 0.095 ms/op
Iteration   2: 0.096 ms/op
Iteration   3: 0.106 ms/op
Iteration   4: 0.157 ms/op
Iteration   5: 0.167 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.124 ±(99.9%) 0.135 ms/op [Average]
  (min, avg, max) = (0.095, 0.124, 0.167), stdev = 0.035
  CI (99.9%): [? 0, 0.260] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 98.86% complete, ETA 00:00:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.106 ms/op
# Warmup Iteration   2: 0.096 ms/op
# Warmup Iteration   3: 0.095 ms/op
# Warmup Iteration   4: 0.094 ms/op
# Warmup Iteration   5: 0.094 ms/op
Iteration   1: 0.094 ms/op
Iteration   2: 0.093 ms/op
Iteration   3: 0.106 ms/op
Iteration   4: 0.163 ms/op
Iteration   5: 0.146 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.120 ±(99.9%) 0.123 ms/op [Average]
  (min, avg, max) = (0.093, 0.120, 0.163), stdev = 0.032
  CI (99.9%): [? 0, 0.243] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 99.24% complete, ETA 00:00:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.606 ms/op
# Warmup Iteration   2: 0.543 ms/op
# Warmup Iteration   3: 0.523 ms/op
# Warmup Iteration   4: 0.526 ms/op
# Warmup Iteration   5: 0.522 ms/op
Iteration   1: 0.517 ms/op
Iteration   2: 0.528 ms/op
Iteration   3: 0.636 ms/op
Iteration   4: 0.942 ms/op
Iteration   5: 0.873 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.699 ±(99.9%) 0.760 ms/op [Average]
  (min, avg, max) = (0.517, 0.699, 0.942), stdev = 0.197
  CI (99.9%): [? 0, 1.459] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 99.62% complete, ETA 00:00:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.664 ms/op
# Warmup Iteration   2: 0.624 ms/op
# Warmup Iteration   3: 0.568 ms/op
# Warmup Iteration   4: 0.577 ms/op
# Warmup Iteration   5: 0.590 ms/op
Iteration   1: 0.588 ms/op
Iteration   2: 0.574 ms/op
Iteration   3: 0.705 ms/op
Iteration   4: 0.959 ms/op
Iteration   5: 0.870 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.739 ±(99.9%) 0.658 ms/op [Average]
  (min, avg, max) = (0.574, 0.739, 0.959), stdev = 0.171
  CI (99.9%): [0.081, 1.398] (assumes normal distribution)


# Run complete. Total time: 00:49:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (nGet)  (nKeys)  (nValues)  Mode  Cnt     Score      Error  Units
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16       32          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16       32          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16     1000          2  avgt    5     0.028 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16     1000          3  avgt    5     0.029 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16   100000          2  avgt    5     8.123 ±    2.451  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16   100000          3  avgt    5     7.916 ±    1.455  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32       32          2  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32       32          3  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32     1000          2  avgt    5     0.057 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32     1000          3  avgt    5     0.070 ±    0.018  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32   100000          2  avgt    5    22.991 ±   25.535  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32   100000          3  avgt    5    19.839 ±   17.954  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64       32          2  avgt    5     0.005 ±    0.006  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64       32          3  avgt    5     0.004 ±    0.004  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64     1000          2  avgt    5     0.139 ±    0.151  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64     1000          3  avgt    5     0.154 ±    0.129  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64   100000          2  avgt    5    39.326 ±   34.809  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64   100000          3  avgt    5    39.575 ±   37.862  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128       32          2  avgt    5     0.010 ±    0.010  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128       32          3  avgt    5     0.010 ±    0.010  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128     1000          2  avgt    5     0.278 ±    0.280  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128     1000          3  avgt    5     0.269 ±    0.255  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128   100000          2  avgt    5    92.738 ±   46.654  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128   100000          3  avgt    5   104.095 ±  123.605  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256       32          2  avgt    5     0.021 ±    0.019  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256       32          3  avgt    5     0.019 ±    0.015  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256     1000          2  avgt    5     0.562 ±    0.617  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256     1000          3  avgt    5     0.560 ±    0.611  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256   100000          2  avgt    5   166.338 ±  150.763  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256   100000          3  avgt    5   156.480 ±  140.055  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512       32          2  avgt    5     0.036 ±    0.036  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512       32          3  avgt    5     0.037 ±    0.037  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512     1000          2  avgt    5     1.054 ±    1.044  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512     1000          3  avgt    5     1.102 ±    1.151  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512   100000          2  avgt    5   385.920 ±  154.873  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512   100000          3  avgt    5   399.287 ±  204.969  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024       32          2  avgt    5     0.080 ±    0.083  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024       32          3  avgt    5     0.083 ±    0.074  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024     1000          2  avgt    5     2.481 ±    2.415  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024     1000          3  avgt    5     2.469 ±    2.285  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024   100000          2  avgt    5   871.084 ±  378.575  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024   100000          3  avgt    5   782.455 ±  246.651  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048       32          2  avgt    5     0.149 ±    0.171  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048       32          3  avgt    5     0.155 ±    0.188  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048     1000          2  avgt    5     4.449 ±    4.397  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048     1000          3  avgt    5     4.263 ±    3.984  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048   100000          2  avgt    5  1390.752 ±  897.715  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048   100000          3  avgt    5  1670.259 ±  464.258  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096       32          2  avgt    5     0.294 ±    0.301  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096       32          3  avgt    5     0.313 ±    0.345  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096     1000          2  avgt    5     9.118 ±    8.908  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096     1000          3  avgt    5     8.917 ±    7.735  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096   100000          2  avgt    5  4439.818 ± 1115.910  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096   100000          3  avgt    5  3869.104 ± 1352.501  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     8192       32          2  avgt    5     0.609 ±    0.646  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     8192       32          3  avgt    5     0.604 ±    0.691  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     8192     1000          2  avgt    5    17.335 ±   16.869  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     8192     1000          3  avgt    5    17.866 ±   18.092  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous    16384       32          2  avgt    5     1.265 ±    1.364  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous    16384       32          3  avgt    5     1.392 ±    1.421  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous    16384     1000          2  avgt    5    39.596 ±   37.851  ms/op
ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous    16384     1000          3  avgt    5    40.517 ±   40.942  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16       32          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16       32          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16     1000          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16     1000          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16   100000          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16   100000          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32       32          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32       32          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32     1000          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32     1000          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32   100000          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32   100000          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64       32          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64       32          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64     1000          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64     1000          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64   100000          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64   100000          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128       32          2  avgt    5    ? 10?³             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128       32          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128     1000          2  avgt    5    ? 10?³             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128     1000          3  avgt    5    ? 10?³             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128   100000          2  avgt    5    ? 10?³             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128   100000          3  avgt    5    ? 10?³             ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256       32          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256       32          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256     1000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256     1000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256   100000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256   100000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512       32          2  avgt    5     0.002 ±    0.002  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512       32          3  avgt    5     0.002 ±    0.002  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512     1000          2  avgt    5     0.002 ±    0.002  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512     1000          3  avgt    5     0.003 ±    0.001  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512   100000          2  avgt    5     0.002 ±    0.002  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512   100000          3  avgt    5     0.003 ±    0.003  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024       32          2  avgt    5     0.004 ±    0.004  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024       32          3  avgt    5     0.004 ±    0.004  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024     1000          2  avgt    5     0.005 ±    0.004  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024     1000          3  avgt    5     0.005 ±    0.005  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024   100000          2  avgt    5     0.004 ±    0.004  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024   100000          3  avgt    5     0.004 ±    0.003  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048       32          2  avgt    5     0.008 ±    0.008  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048       32          3  avgt    5     0.008 ±    0.008  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048     1000          2  avgt    5     0.010 ±    0.010  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048     1000          3  avgt    5     0.009 ±    0.009  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048   100000          2  avgt    5     0.009 ±    0.009  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048   100000          3  avgt    5     0.009 ±    0.007  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096       32          2  avgt    5     0.014 ±    0.011  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096       32          3  avgt    5     0.016 ±    0.012  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096     1000          2  avgt    5     0.020 ±    0.023  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096     1000          3  avgt    5     0.022 ±    0.017  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096   100000          2  avgt    5     0.018 ±    0.013  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096   100000          3  avgt    5     0.019 ±    0.018  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192       32          2  avgt    5     0.029 ±    0.026  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192       32          3  avgt    5     0.029 ±    0.026  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192     1000          2  avgt    5     0.043 ±    0.044  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192     1000          3  avgt    5     0.039 ±    0.039  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192   100000          2  avgt    5     0.035 ±    0.037  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192   100000          3  avgt    5     0.037 ±    0.036  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384       32          2  avgt    5     0.061 ±    0.066  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384       32          3  avgt    5     0.064 ±    0.063  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384     1000          2  avgt    5     0.110 ±    0.061  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384     1000          3  avgt    5     0.097 ±    0.098  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384   100000          2  avgt    5     0.086 ±    0.063  ms/op
ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384   100000          3  avgt    5     0.085 ±    0.060  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16       32          2  avgt    2    ? 10?³             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16       32          3  avgt    2     0.001             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16     1000          2  avgt    3     0.001 ±    0.014  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16     1000          3  avgt    3     0.001 ±    0.023  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16   100000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16   100000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32       32          2  avgt          0.005             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32       32          3  avgt          0.002             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32     1000          2  avgt    3     0.014 ±    0.417  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32     1000          3  avgt    2     0.001             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32   100000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32   100000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64       32          2  avgt          0.003             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64       32          3  avgt    2     0.010             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64     1000          2  avgt    3     0.002 ±    0.021  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64     1000          3  avgt    3     0.002 ±    0.034  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64   100000          2  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64   100000          3  avgt    5     0.002 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128       32          2  avgt          0.010             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128       32          3  avgt    2     0.005             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128     1000          2  avgt    3     0.004 ±    0.052  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128     1000          3  avgt    4     0.012 ±    0.120  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128   100000          2  avgt    5     0.004 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128   100000          3  avgt    5     0.005 ±    0.005  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256       32          2  avgt          0.010             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256       32          3  avgt    2     0.014             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256     1000          2  avgt    4     0.009 ±    0.052  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256     1000          3  avgt    4     0.019 ±    0.184  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256   100000          2  avgt    5     0.010 ±    0.007  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256   100000          3  avgt    5     0.011 ±    0.014  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512       32          2  avgt          0.019             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512       32          3  avgt    2     0.020             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512     1000          2  avgt    5     0.047 ±    0.320  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512     1000          3  avgt    5     0.022 ±    0.100  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512   100000          2  avgt    5     0.024 ±    0.041  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512   100000          3  avgt    5     0.024 ±    0.035  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024       32          2  avgt          0.026             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024       32          3  avgt    2     0.030             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024     1000          2  avgt    5     0.073 ±    0.450  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024     1000          3  avgt    5     0.099 ±    0.654  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024   100000          2  avgt    5     0.049 ±    0.061  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024   100000          3  avgt    5     0.053 ±    0.031  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048       32          2  avgt          0.071             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048       32          3  avgt    2     0.114             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048     1000          2  avgt    4     0.092 ±    0.681  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048     1000          3  avgt    5     0.102 ±    0.525  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048   100000          2  avgt    5     0.101 ±    0.061  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048   100000          3  avgt    5     0.112 ±    0.059  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096       32          2  avgt          0.084             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096       32          3  avgt    2     1.536             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096     1000          2  avgt    5     0.196 ±    0.678  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096     1000          3  avgt    5     0.190 ±    0.926  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096   100000          2  avgt    5     0.210 ±    0.115  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096   100000          3  avgt    5     0.234 ±    0.162  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192       32          2  avgt          0.433             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192       32          3  avgt    2     0.599             ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192     1000          2  avgt    5     1.027 ±    7.415  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192     1000          3  avgt    5     0.376 ±    1.307  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192   100000          2  avgt    5     0.515 ±    0.589  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192   100000          3  avgt    5     0.554 ±    0.346  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384       32          2  avgt    3     0.865 ±   19.700  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384       32          3  avgt    4     2.213 ±   24.171  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384     1000          2  avgt    5     1.244 ±    3.781  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384     1000          3  avgt    5     1.382 ±    3.911  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384   100000          2  avgt    5     3.160 ±    2.954  ms/op
ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384   100000          3  avgt    5     2.231 ±    2.346  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16       32          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16       32          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16     1000          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16     1000          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16   100000          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16   100000          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32       32          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32       32          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32     1000          2  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32     1000          3  avgt    5    ? 10??             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32   100000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32   100000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64       32          2  avgt    5    ? 10?³             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64       32          3  avgt    5    ? 10?³             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64     1000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64     1000          3  avgt    5    ? 10?³             ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64   100000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64   100000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128       32          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128       32          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128     1000          2  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128     1000          3  avgt    5     0.001 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128   100000          2  avgt    5     0.002 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128   100000          3  avgt    5     0.002 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256       32          2  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256       32          3  avgt    5     0.002 ±    0.001  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256     1000          2  avgt    5     0.002 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256     1000          3  avgt    5     0.002 ±    0.002  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256   100000          2  avgt    5     0.005 ±    0.004  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256   100000          3  avgt    5     0.005 ±    0.006  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512       32          2  avgt    5     0.003 ±    0.004  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512       32          3  avgt    5     0.003 ±    0.003  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512     1000          2  avgt    5     0.004 ±    0.003  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512     1000          3  avgt    5     0.004 ±    0.003  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512   100000          2  avgt    5     0.011 ±    0.010  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512   100000          3  avgt    5     0.011 ±    0.009  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024       32          2  avgt    5     0.006 ±    0.006  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024       32          3  avgt    5     0.006 ±    0.006  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024     1000          2  avgt    5     0.007 ±    0.007  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024     1000          3  avgt    5     0.009 ±    0.009  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024   100000          2  avgt    5     0.029 ±    0.027  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024   100000          3  avgt    5     0.033 ±    0.035  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048       32          2  avgt    5     0.012 ±    0.013  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048       32          3  avgt    5     0.012 ±    0.011  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048     1000          2  avgt    5     0.016 ±    0.015  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048     1000          3  avgt    5     0.016 ±    0.013  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048   100000          2  avgt    5     0.061 ±    0.054  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048   100000          3  avgt    5     0.068 ±    0.062  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096       32          2  avgt    5     0.026 ±    0.029  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096       32          3  avgt    5     0.026 ±    0.023  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096     1000          2  avgt    5     0.029 ±    0.030  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096     1000          3  avgt    5     0.030 ±    0.029  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096   100000          2  avgt    5     0.130 ±    0.132  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096   100000          3  avgt    5     0.131 ±    0.103  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192       32          2  avgt    5     0.047 ±    0.028  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192       32          3  avgt    5     0.052 ±    0.052  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192     1000          2  avgt    5     0.061 ±    0.045  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192     1000          3  avgt    5     0.062 ±    0.061  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192   100000          2  avgt    5     0.299 ±    0.295  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192   100000          3  avgt    5     0.366 ±    0.521  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384       32          2  avgt    5     0.087 ±    0.089  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384       32          3  avgt    5     0.091 ±    0.097  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384     1000          2  avgt    5     0.124 ±    0.135  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384     1000          3  avgt    5     0.120 ±    0.123  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384   100000          2  avgt    5     0.699 ±    0.760  ms/op
ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384   100000          3  avgt    5     0.739 ±    0.658  ms/op

Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

See https://docs.gradle.org/7.3.1/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 49m 32s
13 actionable tasks: 2 executed, 11 up-to-date
