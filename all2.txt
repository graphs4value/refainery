Type-safe dependency accessors is an incubating feature.
> Task :buildSrc:extractPluginRequests UP-TO-DATE
> Task :buildSrc:generatePluginAdapters UP-TO-DATE
> Task :buildSrc:compileJava UP-TO-DATE
> Task :buildSrc:compileGroovy NO-SOURCE
> Task :buildSrc:compileGroovyPlugins UP-TO-DATE
> Task :buildSrc:pluginDescriptors UP-TO-DATE
> Task :buildSrc:processResources UP-TO-DATE
> Task :buildSrc:classes UP-TO-DATE
> Task :buildSrc:jar UP-TO-DATE
> Task :buildSrc:assemble UP-TO-DATE
> Task :buildSrc:pluginUnderTestMetadata UP-TO-DATE
> Task :buildSrc:compileTestJava NO-SOURCE
> Task :buildSrc:compileTestGroovy NO-SOURCE
> Task :buildSrc:processTestResources NO-SOURCE
> Task :buildSrc:testClasses UP-TO-DATE
> Task :buildSrc:test NO-SOURCE
> Task :buildSrc:validatePlugins UP-TO-DATE
> Task :buildSrc:check UP-TO-DATE
> Task :buildSrc:build UP-TO-DATE
> Task :refinery-store:compileJava UP-TO-DATE
> Task :refinery-store:processResources NO-SOURCE
> Task :refinery-store:classes UP-TO-DATE
> Task :refinery-store:compileTestJava UP-TO-DATE
> Task :refinery-store:processTestResources NO-SOURCE
> Task :refinery-store:testClasses UP-TO-DATE
> Task :refinery-store:compileJmhJava
> Task :refinery-store:processJmhResources NO-SOURCE
> Task :refinery-store:jmhClasses

> Task :refinery-store:jmh
# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 1, nValues = 2)

# Run progress: 0.00% complete, ETA 04:00:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 1, nValues = 3)

# Run progress: 0.07% complete, ETA 04:12:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 2, nValues = 2)

# Run progress: 0.14% complete, ETA 04:12:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 2, nValues = 3)

# Run progress: 0.21% complete, ETA 04:12:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 4, nValues = 2)

# Run progress: 0.28% complete, ETA 04:11:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 4, nValues = 3)

# Run progress: 0.35% complete, ETA 04:11:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 8, nValues = 2)

# Run progress: 0.42% complete, ETA 04:10:57
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 8, nValues = 3)

# Run progress: 0.49% complete, ETA 04:10:45
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 16, nValues = 2)

# Run progress: 0.56% complete, ETA 04:10:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 16, nValues = 3)

# Run progress: 0.63% complete, ETA 04:10:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 32, nValues = 2)

# Run progress: 0.69% complete, ETA 04:10:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 32, nValues = 3)

# Run progress: 0.76% complete, ETA 04:10:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 64, nValues = 2)

# Run progress: 0.83% complete, ETA 04:09:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.006 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 64, nValues = 3)

# Run progress: 0.90% complete, ETA 04:09:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.007 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.009), stdev = 0.002
  CI (99.9%): [? 0, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 128, nValues = 2)

# Run progress: 0.97% complete, ETA 04:09:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.012 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.010, 0.012, 0.016), stdev = 0.003
  CI (99.9%): [0.001, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 128, nValues = 3)

# Run progress: 1.04% complete, ETA 04:09:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.014 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.011, 0.014, 0.020), stdev = 0.004
  CI (99.9%): [? 0, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 256, nValues = 2)

# Run progress: 1.11% complete, ETA 04:09:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.026 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.020, 0.026, 0.033), stdev = 0.006
  CI (99.9%): [0.001, 0.050] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 256, nValues = 3)

# Run progress: 1.18% complete, ETA 04:08:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.037 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.028 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.022, 0.028, 0.037), stdev = 0.007
  CI (99.9%): [0.002, 0.053] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 512, nValues = 2)

# Run progress: 1.25% complete, ETA 04:08:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.044 ms/op
# Warmup Iteration   2: 0.041 ms/op
# Warmup Iteration   3: 0.040 ms/op
# Warmup Iteration   4: 0.040 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: 0.041 ms/op
Iteration   2: 0.041 ms/op
Iteration   3: 0.045 ms/op
Iteration   4: 0.065 ms/op
Iteration   5: 0.072 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.053 ±(99.9%) 0.057 ms/op [Average]
  (min, avg, max) = (0.041, 0.053, 0.072), stdev = 0.015
  CI (99.9%): [? 0, 0.109] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 512, nValues = 3)

# Run progress: 1.32% complete, ETA 04:08:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.050 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.046 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.052 ms/op
Iteration   4: 0.082 ms/op
Iteration   5: 0.082 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.061 ±(99.9%) 0.073 ms/op [Average]
  (min, avg, max) = (0.045, 0.061, 0.082), stdev = 0.019
  CI (99.9%): [? 0, 0.135] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 1024, nValues = 2)

# Run progress: 1.39% complete, ETA 04:08:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.090 ms/op
# Warmup Iteration   2: 0.083 ms/op
# Warmup Iteration   3: 0.084 ms/op
# Warmup Iteration   4: 0.084 ms/op
# Warmup Iteration   5: 0.083 ms/op
Iteration   1: 0.083 ms/op
Iteration   2: 0.082 ms/op
Iteration   3: 0.099 ms/op
Iteration   4: 0.140 ms/op
Iteration   5: 0.148 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.110 ±(99.9%) 0.121 ms/op [Average]
  (min, avg, max) = (0.082, 0.110, 0.148), stdev = 0.031
  CI (99.9%): [? 0, 0.231] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 1024, nValues = 3)

# Run progress: 1.46% complete, ETA 04:08:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.100 ms/op
# Warmup Iteration   2: 0.091 ms/op
# Warmup Iteration   3: 0.091 ms/op
# Warmup Iteration   4: 0.090 ms/op
# Warmup Iteration   5: 0.092 ms/op
Iteration   1: 0.091 ms/op
Iteration   2: 0.091 ms/op
Iteration   3: 0.110 ms/op
Iteration   4: 0.151 ms/op
Iteration   5: 0.158 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.120 ±(99.9%) 0.124 ms/op [Average]
  (min, avg, max) = (0.091, 0.120, 0.158), stdev = 0.032
  CI (99.9%): [? 0, 0.244] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 2048, nValues = 2)

# Run progress: 1.53% complete, ETA 04:07:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.183 ms/op
# Warmup Iteration   2: 0.168 ms/op
# Warmup Iteration   3: 0.165 ms/op
# Warmup Iteration   4: 0.167 ms/op
# Warmup Iteration   5: 0.165 ms/op
Iteration   1: 0.165 ms/op
Iteration   2: 0.168 ms/op
Iteration   3: 0.193 ms/op
Iteration   4: 0.271 ms/op
Iteration   5: 0.269 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.213 ±(99.9%) 0.204 ms/op [Average]
  (min, avg, max) = (0.165, 0.213, 0.271), stdev = 0.053
  CI (99.9%): [0.009, 0.417] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 2048, nValues = 3)

# Run progress: 1.60% complete, ETA 04:07:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.202 ms/op
# Warmup Iteration   2: 0.184 ms/op
# Warmup Iteration   3: 0.185 ms/op
# Warmup Iteration   4: 0.183 ms/op
# Warmup Iteration   5: 0.183 ms/op
Iteration   1: 0.185 ms/op
Iteration   2: 0.184 ms/op
Iteration   3: 0.218 ms/op
Iteration   4: 0.286 ms/op
Iteration   5: 0.276 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.230 ±(99.9%) 0.188 ms/op [Average]
  (min, avg, max) = (0.184, 0.230, 0.286), stdev = 0.049
  CI (99.9%): [0.042, 0.417] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 4096, nValues = 2)

# Run progress: 1.67% complete, ETA 04:07:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.377 ms/op
# Warmup Iteration   2: 0.350 ms/op
# Warmup Iteration   3: 0.344 ms/op
# Warmup Iteration   4: 0.349 ms/op
# Warmup Iteration   5: 0.343 ms/op
Iteration   1: 0.349 ms/op
Iteration   2: 0.345 ms/op
Iteration   3: 0.415 ms/op
Iteration   4: 0.575 ms/op
Iteration   5: 0.556 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.448 ±(99.9%) 0.428 ms/op [Average]
  (min, avg, max) = (0.345, 0.448, 0.575), stdev = 0.111
  CI (99.9%): [0.020, 0.876] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 4096, nValues = 3)

# Run progress: 1.74% complete, ETA 04:07:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.421 ms/op
# Warmup Iteration   2: 0.379 ms/op
# Warmup Iteration   3: 0.379 ms/op
# Warmup Iteration   4: 0.372 ms/op
# Warmup Iteration   5: 0.374 ms/op
Iteration   1: 0.378 ms/op
Iteration   2: 0.376 ms/op
Iteration   3: 0.444 ms/op
Iteration   4: 0.641 ms/op
Iteration   5: 0.603 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.488 ±(99.9%) 0.485 ms/op [Average]
  (min, avg, max) = (0.376, 0.488, 0.641), stdev = 0.126
  CI (99.9%): [0.004, 0.973] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 8192, nValues = 2)

# Run progress: 1.81% complete, ETA 04:07:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.758 ms/op
# Warmup Iteration   2: 0.686 ms/op
# Warmup Iteration   3: 0.690 ms/op
# Warmup Iteration   4: 0.692 ms/op
# Warmup Iteration   5: 0.697 ms/op
Iteration   1: 0.693 ms/op
Iteration   2: 0.690 ms/op
Iteration   3: 0.829 ms/op
Iteration   4: 1.197 ms/op
Iteration   5: 1.045 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.891 ±(99.9%) 0.862 ms/op [Average]
  (min, avg, max) = (0.690, 0.891, 1.197), stdev = 0.224
  CI (99.9%): [0.029, 1.753] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 8192, nValues = 3)

# Run progress: 1.88% complete, ETA 04:07:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.879 ms/op
# Warmup Iteration   2: 0.773 ms/op
# Warmup Iteration   3: 0.800 ms/op
# Warmup Iteration   4: 0.798 ms/op
# Warmup Iteration   5: 0.770 ms/op
Iteration   1: 0.756 ms/op
Iteration   2: 0.757 ms/op
Iteration   3: 0.937 ms/op
Iteration   4: 1.354 ms/op
Iteration   5: 1.151 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.991 ±(99.9%) 1.001 ms/op [Average]
  (min, avg, max) = (0.756, 0.991, 1.354), stdev = 0.260
  CI (99.9%): [? 0, 1.992] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 16384, nValues = 2)

# Run progress: 1.94% complete, ETA 04:07:01
# Fork: 1 of 1
# Warmup Iteration   1: 1.510 ms/op
# Warmup Iteration   2: 1.392 ms/op
# Warmup Iteration   3: 1.397 ms/op
# Warmup Iteration   4: 1.396 ms/op
# Warmup Iteration   5: 1.405 ms/op
Iteration   1: 1.424 ms/op
Iteration   2: 1.400 ms/op
Iteration   3: 1.683 ms/op
Iteration   4: 2.365 ms/op
Iteration   5: 2.416 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  1.858 ±(99.9%) 1.923 ms/op [Average]
  (min, avg, max) = (1.400, 1.858, 2.416), stdev = 0.499
  CI (99.9%): [? 0, 3.781] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 16384, nValues = 3)

# Run progress: 2.01% complete, ETA 04:06:50
# Fork: 1 of 1
# Warmup Iteration   1: 1.624 ms/op
# Warmup Iteration   2: 1.507 ms/op
# Warmup Iteration   3: 1.481 ms/op
# Warmup Iteration   4: 1.471 ms/op
# Warmup Iteration   5: 1.471 ms/op
Iteration   1: 1.465 ms/op
Iteration   2: 1.466 ms/op
Iteration   3: 1.741 ms/op
Iteration   4: 2.527 ms/op
Iteration   5: 2.511 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  1.942 ±(99.9%) 2.074 ms/op [Average]
  (min, avg, max) = (1.465, 1.942, 2.527), stdev = 0.539
  CI (99.9%): [? 0, 4.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 1, nValues = 2)

# Run progress: 2.08% complete, ETA 04:06:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 1, nValues = 3)

# Run progress: 2.15% complete, ETA 04:06:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 2, nValues = 2)

# Run progress: 2.22% complete, ETA 04:06:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 2, nValues = 3)

# Run progress: 2.29% complete, ETA 04:06:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 4, nValues = 2)

# Run progress: 2.36% complete, ETA 04:05:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 4, nValues = 3)

# Run progress: 2.43% complete, ETA 04:05:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 8, nValues = 2)

# Run progress: 2.50% complete, ETA 04:05:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 8, nValues = 3)

# Run progress: 2.57% complete, ETA 04:05:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 16, nValues = 2)

# Run progress: 2.64% complete, ETA 04:05:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 16, nValues = 3)

# Run progress: 2.71% complete, ETA 04:04:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 32, nValues = 2)

# Run progress: 2.78% complete, ETA 04:04:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10?³, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 32, nValues = 3)

# Run progress: 2.85% complete, ETA 04:04:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 64, nValues = 2)

# Run progress: 2.92% complete, ETA 04:04:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.009 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.013), stdev = 0.003
  CI (99.9%): [? 0, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 64, nValues = 3)

# Run progress: 2.99% complete, ETA 04:04:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.010 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.008, 0.010, 0.012), stdev = 0.002
  CI (99.9%): [0.001, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 128, nValues = 2)

# Run progress: 3.06% complete, ETA 04:04:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.018 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.029 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.023 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.018, 0.023, 0.029), stdev = 0.006
  CI (99.9%): [0.002, 0.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 128, nValues = 3)

# Run progress: 3.13% complete, ETA 04:03:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.033 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.026 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.021, 0.026, 0.033), stdev = 0.006
  CI (99.9%): [0.004, 0.049] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 256, nValues = 2)

# Run progress: 3.19% complete, ETA 04:03:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.058 ms/op
# Warmup Iteration   2: 0.053 ms/op
# Warmup Iteration   3: 0.053 ms/op
# Warmup Iteration   4: 0.052 ms/op
# Warmup Iteration   5: 0.052 ms/op
Iteration   1: 0.054 ms/op
Iteration   2: 0.053 ms/op
Iteration   3: 0.059 ms/op
Iteration   4: 0.083 ms/op
Iteration   5: 0.085 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.067 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (0.053, 0.067, 0.085), stdev = 0.016
  CI (99.9%): [0.006, 0.127] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 256, nValues = 3)

# Run progress: 3.26% complete, ETA 04:03:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.074 ms/op
# Warmup Iteration   2: 0.066 ms/op
# Warmup Iteration   3: 0.066 ms/op
# Warmup Iteration   4: 0.067 ms/op
# Warmup Iteration   5: 0.066 ms/op
Iteration   1: 0.067 ms/op
Iteration   2: 0.066 ms/op
Iteration   3: 0.081 ms/op
Iteration   4: 0.105 ms/op
Iteration   5: 0.104 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.085 ±(99.9%) 0.074 ms/op [Average]
  (min, avg, max) = (0.066, 0.085, 0.105), stdev = 0.019
  CI (99.9%): [0.010, 0.159] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 512, nValues = 2)

# Run progress: 3.33% complete, ETA 04:03:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.182 ms/op
# Warmup Iteration   2: 0.166 ms/op
# Warmup Iteration   3: 0.162 ms/op
# Warmup Iteration   4: 0.160 ms/op
# Warmup Iteration   5: 0.159 ms/op
Iteration   1: 0.155 ms/op
Iteration   2: 0.162 ms/op
Iteration   3: 0.197 ms/op
Iteration   4: 0.254 ms/op
Iteration   5: 0.244 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.202 ±(99.9%) 0.175 ms/op [Average]
  (min, avg, max) = (0.155, 0.202, 0.254), stdev = 0.045
  CI (99.9%): [0.027, 0.377] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 512, nValues = 3)

# Run progress: 3.40% complete, ETA 04:03:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.224 ms/op
# Warmup Iteration   2: 0.207 ms/op
# Warmup Iteration   3: 0.202 ms/op
# Warmup Iteration   4: 0.203 ms/op
# Warmup Iteration   5: 0.202 ms/op
Iteration   1: 0.204 ms/op
Iteration   2: 0.203 ms/op
Iteration   3: 0.241 ms/op
Iteration   4: 0.322 ms/op
Iteration   5: 0.324 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.259 ±(99.9%) 0.233 ms/op [Average]
  (min, avg, max) = (0.203, 0.259, 0.324), stdev = 0.061
  CI (99.9%): [0.026, 0.492] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 2)

# Run progress: 3.47% complete, ETA 04:03:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.534 ms/op
# Warmup Iteration   2: 0.475 ms/op
# Warmup Iteration   3: 0.466 ms/op
# Warmup Iteration   4: 0.457 ms/op
# Warmup Iteration   5: 0.462 ms/op
Iteration   1: 0.497 ms/op
Iteration   2: 0.515 ms/op
Iteration   3: 0.551 ms/op
Iteration   4: 0.790 ms/op
Iteration   5: 0.729 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.616 ±(99.9%) 0.515 ms/op [Average]
  (min, avg, max) = (0.497, 0.616, 0.790), stdev = 0.134
  CI (99.9%): [0.101, 1.132] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 3)

# Run progress: 3.54% complete, ETA 04:02:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.686 ms/op
# Warmup Iteration   2: 0.616 ms/op
# Warmup Iteration   3: 0.619 ms/op
# Warmup Iteration   4: 0.613 ms/op
# Warmup Iteration   5: 0.629 ms/op
Iteration   1: 0.619 ms/op
Iteration   2: 0.622 ms/op
Iteration   3: 0.774 ms/op
Iteration   4: 1.094 ms/op
Iteration   5: 1.099 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.842 ±(99.9%) 0.928 ms/op [Average]
  (min, avg, max) = (0.619, 0.842, 1.099), stdev = 0.241
  CI (99.9%): [? 0, 1.769] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 2)

# Run progress: 3.61% complete, ETA 04:02:44
# Fork: 1 of 1
# Warmup Iteration   1: 1.631 ms/op
# Warmup Iteration   2: 1.396 ms/op
# Warmup Iteration   3: 1.373 ms/op
# Warmup Iteration   4: 1.376 ms/op
# Warmup Iteration   5: 1.381 ms/op
Iteration   1: 1.387 ms/op
Iteration   2: 1.382 ms/op
Iteration   3: 1.759 ms/op
Iteration   4: 2.376 ms/op
Iteration   5: 2.326 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  1.846 ±(99.9%) 1.871 ms/op [Average]
  (min, avg, max) = (1.382, 1.846, 2.376), stdev = 0.486
  CI (99.9%): [? 0, 3.718] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 3)

# Run progress: 3.68% complete, ETA 04:02:34
# Fork: 1 of 1
# Warmup Iteration   1: 2.012 ms/op
# Warmup Iteration   2: 1.797 ms/op
# Warmup Iteration   3: 1.787 ms/op
# Warmup Iteration   4: 1.787 ms/op
# Warmup Iteration   5: 1.745 ms/op
Iteration   1: 1.797 ms/op
Iteration   2: 1.760 ms/op
Iteration   3: 1.977 ms/op
Iteration   4: 2.961 ms/op
Iteration   5: 2.623 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  2.224 ±(99.9%) 2.075 ms/op [Average]
  (min, avg, max) = (1.760, 2.224, 2.961), stdev = 0.539
  CI (99.9%): [0.149, 4.298] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 2)

# Run progress: 3.75% complete, ETA 04:02:25
# Fork: 1 of 1
# Warmup Iteration   1: 4.206 ms/op
# Warmup Iteration   2: 3.636 ms/op
# Warmup Iteration   3: 3.690 ms/op
# Warmup Iteration   4: 3.646 ms/op
# Warmup Iteration   5: 3.618 ms/op
Iteration   1: 3.557 ms/op
Iteration   2: 3.622 ms/op
Iteration   3: 4.393 ms/op
Iteration   4: 5.394 ms/op
Iteration   5: 5.799 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  4.553 ±(99.9%) 3.920 ms/op [Average]
  (min, avg, max) = (3.557, 4.553, 5.799), stdev = 1.018
  CI (99.9%): [0.633, 8.473] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 3)

# Run progress: 3.82% complete, ETA 04:02:16
# Fork: 1 of 1
# Warmup Iteration   1: 5.350 ms/op
# Warmup Iteration   2: 4.630 ms/op
# Warmup Iteration   3: 4.505 ms/op
# Warmup Iteration   4: 4.687 ms/op
# Warmup Iteration   5: 4.488 ms/op
Iteration   1: 4.540 ms/op
Iteration   2: 4.500 ms/op
Iteration   3: 5.187 ms/op
Iteration   4: 8.276 ms/op
Iteration   5: 7.800 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  6.061 ±(99.9%) 7.058 ms/op [Average]
  (min, avg, max) = (4.500, 6.061, 8.276), stdev = 1.833
  CI (99.9%): [? 0, 13.119] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 2)

# Run progress: 3.89% complete, ETA 04:02:06
# Fork: 1 of 1
# Warmup Iteration   1: 10.109 ms/op
# Warmup Iteration   2: 8.207 ms/op
# Warmup Iteration   3: 8.525 ms/op
# Warmup Iteration   4: 8.016 ms/op
# Warmup Iteration   5: 7.623 ms/op
Iteration   1: 7.798 ms/op
Iteration   2: 8.123 ms/op
Iteration   3: 10.068 ms/op
Iteration   4: 13.514 ms/op
Iteration   5: 13.083 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  10.517 ±(99.9%) 10.349 ms/op [Average]
  (min, avg, max) = (7.798, 10.517, 13.514), stdev = 2.688
  CI (99.9%): [0.168, 20.866] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 3)

# Run progress: 3.96% complete, ETA 04:01:59
# Fork: 1 of 1
# Warmup Iteration   1: 12.915 ms/op
# Warmup Iteration   2: 11.462 ms/op
# Warmup Iteration   3: 9.904 ms/op
# Warmup Iteration   4: 9.918 ms/op
# Warmup Iteration   5: 9.828 ms/op
Iteration   1: 9.634 ms/op
Iteration   2: 9.683 ms/op
Iteration   3: 11.891 ms/op
Iteration   4: 16.383 ms/op
Iteration   5: 18.259 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  13.170 ±(99.9%) 15.224 ms/op [Average]
  (min, avg, max) = (9.634, 13.170, 18.259), stdev = 3.954
  CI (99.9%): [? 0, 28.394] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 2)

# Run progress: 4.03% complete, ETA 04:01:51
# Fork: 1 of 1
# Warmup Iteration   1: 20.844 ms/op
# Warmup Iteration   2: 17.264 ms/op
# Warmup Iteration   3: 17.662 ms/op
# Warmup Iteration   4: 19.284 ms/op
# Warmup Iteration   5: 19.900 ms/op
Iteration   1: 18.153 ms/op
Iteration   2: 18.515 ms/op
Iteration   3: 22.690 ms/op
Iteration   4: 30.584 ms/op
Iteration   5: 28.678 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  23.724 ±(99.9%) 22.023 ms/op [Average]
  (min, avg, max) = (18.153, 23.724, 30.584), stdev = 5.719
  CI (99.9%): [1.701, 45.747] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 3)

# Run progress: 4.10% complete, ETA 04:01:43
# Fork: 1 of 1
# Warmup Iteration   1: 32.556 ms/op
# Warmup Iteration   2: 27.765 ms/op
# Warmup Iteration   3: 21.907 ms/op
# Warmup Iteration   4: 22.958 ms/op
# Warmup Iteration   5: 22.648 ms/op
Iteration   1: 23.256 ms/op
Iteration   2: 22.293 ms/op
Iteration   3: 27.191 ms/op
Iteration   4: 38.233 ms/op
Iteration   5: 33.745 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  28.944 ±(99.9%) 26.468 ms/op [Average]
  (min, avg, max) = (22.293, 28.944, 38.233), stdev = 6.874
  CI (99.9%): [2.476, 55.412] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 1, nValues = 2)

# Run progress: 4.17% complete, ETA 04:01:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 1, nValues = 3)

# Run progress: 4.24% complete, ETA 04:01:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 2, nValues = 2)

# Run progress: 4.31% complete, ETA 04:01:18
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 2, nValues = 3)

# Run progress: 4.38% complete, ETA 04:01:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 4, nValues = 2)

# Run progress: 4.44% complete, ETA 04:00:56
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 4, nValues = 3)

# Run progress: 4.51% complete, ETA 04:00:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 8, nValues = 2)

# Run progress: 4.58% complete, ETA 04:00:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 8, nValues = 3)

# Run progress: 4.65% complete, ETA 04:00:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 16, nValues = 2)

# Run progress: 4.72% complete, ETA 04:00:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 16, nValues = 3)

# Run progress: 4.79% complete, ETA 04:00:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 32, nValues = 2)

# Run progress: 4.86% complete, ETA 03:59:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 32, nValues = 3)

# Run progress: 4.93% complete, ETA 03:59:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 64, nValues = 2)

# Run progress: 5.00% complete, ETA 03:59:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.009 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.011), stdev = 0.002
  CI (99.9%): [0.001, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 64, nValues = 3)

# Run progress: 5.07% complete, ETA 03:59:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.009 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.012), stdev = 0.002
  CI (99.9%): [0.002, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 128, nValues = 2)

# Run progress: 5.14% complete, ETA 03:59:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.020 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.018 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.023 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.018, 0.023, 0.030), stdev = 0.006
  CI (99.9%): [0.001, 0.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 128, nValues = 3)

# Run progress: 5.21% complete, ETA 03:59:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.038 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.029 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.022, 0.029, 0.038), stdev = 0.008
  CI (99.9%): [? 0, 0.060] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 256, nValues = 2)

# Run progress: 5.28% complete, ETA 03:58:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.064 ms/op
# Warmup Iteration   2: 0.056 ms/op
# Warmup Iteration   3: 0.051 ms/op
# Warmup Iteration   4: 0.048 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.053 ms/op
Iteration   2: 0.060 ms/op
Iteration   3: 0.075 ms/op
Iteration   4: 0.115 ms/op
Iteration   5: 0.089 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.078 ±(99.9%) 0.096 ms/op [Average]
  (min, avg, max) = (0.053, 0.078, 0.115), stdev = 0.025
  CI (99.9%): [? 0, 0.175] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 256, nValues = 3)

# Run progress: 5.35% complete, ETA 03:58:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.077 ms/op
# Warmup Iteration   2: 0.069 ms/op
# Warmup Iteration   3: 0.068 ms/op
# Warmup Iteration   4: 0.068 ms/op
# Warmup Iteration   5: 0.070 ms/op
Iteration   1: 0.074 ms/op
Iteration   2: 0.072 ms/op
Iteration   3: 0.089 ms/op
Iteration   4: 0.112 ms/op
Iteration   5: 0.100 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.089 ±(99.9%) 0.065 ms/op [Average]
  (min, avg, max) = (0.072, 0.089, 0.112), stdev = 0.017
  CI (99.9%): [0.024, 0.154] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 512, nValues = 2)

# Run progress: 5.42% complete, ETA 03:58:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.192 ms/op
# Warmup Iteration   2: 0.174 ms/op
# Warmup Iteration   3: 0.171 ms/op
# Warmup Iteration   4: 0.170 ms/op
# Warmup Iteration   5: 0.173 ms/op
Iteration   1: 0.157 ms/op
Iteration   2: 0.147 ms/op
Iteration   3: 0.173 ms/op
Iteration   4: 0.257 ms/op
Iteration   5: 0.232 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.193 ±(99.9%) 0.187 ms/op [Average]
  (min, avg, max) = (0.147, 0.193, 0.257), stdev = 0.049
  CI (99.9%): [0.006, 0.381] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 512, nValues = 3)

# Run progress: 5.49% complete, ETA 03:58:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.259 ms/op
# Warmup Iteration   2: 0.191 ms/op
# Warmup Iteration   3: 0.187 ms/op
# Warmup Iteration   4: 0.184 ms/op
# Warmup Iteration   5: 0.185 ms/op
Iteration   1: 0.186 ms/op
Iteration   2: 0.190 ms/op
Iteration   3: 0.229 ms/op
Iteration   4: 0.313 ms/op
Iteration   5: 0.323 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.248 ±(99.9%) 0.254 ms/op [Average]
  (min, avg, max) = (0.186, 0.248, 0.323), stdev = 0.066
  CI (99.9%): [? 0, 0.502] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 2)

# Run progress: 5.56% complete, ETA 03:58:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.701 ms/op
# Warmup Iteration   2: 0.655 ms/op
# Warmup Iteration   3: 0.660 ms/op
# Warmup Iteration   4: 0.602 ms/op
# Warmup Iteration   5: 0.613 ms/op
Iteration   1: 0.613 ms/op
Iteration   2: 0.633 ms/op
Iteration   3: 0.896 ms/op
Iteration   4: 1.075 ms/op
Iteration   5: 1.107 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  0.865 ±(99.9%) 0.905 ms/op [Average]
  (min, avg, max) = (0.613, 0.865, 1.107), stdev = 0.235
  CI (99.9%): [? 0, 1.770] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 3)

# Run progress: 5.63% complete, ETA 03:57:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.882 ms/op
# Warmup Iteration   2: 0.770 ms/op
# Warmup Iteration   3: 0.774 ms/op
# Warmup Iteration   4: 0.801 ms/op
# Warmup Iteration   5: 0.865 ms/op
Iteration   1: 0.820 ms/op
Iteration   2: 0.811 ms/op
Iteration   3: 0.980 ms/op
Iteration   4: 1.396 ms/op
Iteration   5: 1.453 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  1.092 ±(99.9%) 1.199 ms/op [Average]
  (min, avg, max) = (0.811, 1.092, 1.453), stdev = 0.311
  CI (99.9%): [? 0, 2.291] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 2)

# Run progress: 5.69% complete, ETA 03:57:44
# Fork: 1 of 1
# Warmup Iteration   1: 2.899 ms/op
# Warmup Iteration   2: 2.393 ms/op
# Warmup Iteration   3: 2.447 ms/op
# Warmup Iteration   4: 2.470 ms/op
# Warmup Iteration   5: 2.468 ms/op
Iteration   1: 2.395 ms/op
Iteration   2: 2.360 ms/op
Iteration   3: 2.885 ms/op
Iteration   4: 4.275 ms/op
Iteration   5: 3.752 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  3.133 ±(99.9%) 3.274 ms/op [Average]
  (min, avg, max) = (2.360, 3.133, 4.275), stdev = 0.850
  CI (99.9%): [? 0, 6.408] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 3)

# Run progress: 5.76% complete, ETA 03:57:34
# Fork: 1 of 1
# Warmup Iteration   1: 3.950 ms/op
# Warmup Iteration   2: 3.259 ms/op
# Warmup Iteration   3: 3.258 ms/op
# Warmup Iteration   4: 3.173 ms/op
# Warmup Iteration   5: 3.131 ms/op
Iteration   1: 3.112 ms/op
Iteration   2: 3.159 ms/op
Iteration   3: 3.728 ms/op
Iteration   4: 5.323 ms/op
Iteration   5: 5.695 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  4.204 ±(99.9%) 4.710 ms/op [Average]
  (min, avg, max) = (3.112, 4.204, 5.695), stdev = 1.223
  CI (99.9%): [? 0, 8.914] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 2)

# Run progress: 5.83% complete, ETA 03:57:24
# Fork: 1 of 1
# Warmup Iteration   1: 12.932 ms/op
# Warmup Iteration   2: 10.199 ms/op
# Warmup Iteration   3: 9.973 ms/op
# Warmup Iteration   4: 9.973 ms/op
# Warmup Iteration   5: 9.873 ms/op
Iteration   1: 9.696 ms/op
Iteration   2: 9.878 ms/op
Iteration   3: 11.665 ms/op
Iteration   4: 16.023 ms/op
Iteration   5: 15.712 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  12.595 ±(99.9%) 11.888 ms/op [Average]
  (min, avg, max) = (9.696, 12.595, 16.023), stdev = 3.087
  CI (99.9%): [0.707, 24.483] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 3)

# Run progress: 5.90% complete, ETA 03:57:15
# Fork: 1 of 1
# Warmup Iteration   1: 17.803 ms/op
# Warmup Iteration   2: 13.159 ms/op
# Warmup Iteration   3: 13.296 ms/op
# Warmup Iteration   4: 13.207 ms/op
# Warmup Iteration   5: 13.286 ms/op
Iteration   1: 13.269 ms/op
Iteration   2: 13.315 ms/op
Iteration   3: 16.332 ms/op
Iteration   4: 22.125 ms/op
Iteration   5: 21.605 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  17.329 ±(99.9%) 16.660 ms/op [Average]
  (min, avg, max) = (13.269, 17.329, 22.125), stdev = 4.326
  CI (99.9%): [0.670, 33.989] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 2)

# Run progress: 5.97% complete, ETA 03:57:07
# Fork: 1 of 1
# Warmup Iteration   1: 85.985 ms/op
# Warmup Iteration   2: 57.249 ms/op
# Warmup Iteration   3: 44.230 ms/op
# Warmup Iteration   4: 47.354 ms/op
# Warmup Iteration   5: 50.448 ms/op
Iteration   1: 48.416 ms/op
Iteration   2: 48.292 ms/op
Iteration   3: 64.216 ms/op
Iteration   4: 75.188 ms/op
Iteration   5: 79.256 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  63.073 ±(99.9%) 55.910 ms/op [Average]
  (min, avg, max) = (48.292, 63.073, 79.256), stdev = 14.520
  CI (99.9%): [7.163, 118.984] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 3)

# Run progress: 6.04% complete, ETA 03:57:02
# Fork: 1 of 1
# Warmup Iteration   1: 126.556 ms/op
# Warmup Iteration   2: 88.335 ms/op
# Warmup Iteration   3: 68.409 ms/op
# Warmup Iteration   4: 68.792 ms/op
# Warmup Iteration   5: 64.211 ms/op
Iteration   1: 65.216 ms/op
Iteration   2: 68.946 ms/op
Iteration   3: 90.030 ms/op
Iteration   4: 108.293 ms/op
Iteration   5: 106.758 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  87.849 ±(99.9%) 78.204 ms/op [Average]
  (min, avg, max) = (65.216, 87.849, 108.293), stdev = 20.309
  CI (99.9%): [9.645, 166.053] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 2)

# Run progress: 6.11% complete, ETA 03:57:00
# Fork: 1 of 1
# Warmup Iteration   1: 425.617 ms/op
# Warmup Iteration   2: 402.623 ms/op
# Warmup Iteration   3: 429.620 ms/op
# Warmup Iteration   4: 378.079 ms/op
# Warmup Iteration   5: 387.801 ms/op
Iteration   1: 437.881 ms/op
Iteration   2: 506.865 ms/op
Iteration   3: 717.375 ms/op
Iteration   4: 572.259 ms/op
Iteration   5: 503.879 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  547.652 ±(99.9%) 408.608 ms/op [Average]
  (min, avg, max) = (437.881, 547.652, 717.375), stdev = 106.114
  CI (99.9%): [139.043, 956.260] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 3)

# Run progress: 6.18% complete, ETA 03:57:37
# Fork: 1 of 1
# Warmup Iteration   1: 551.655 ms/op
# Warmup Iteration   2: 572.842 ms/op
# Warmup Iteration   3: 775.287 ms/op
# Warmup Iteration   4: 843.834 ms/op
# Warmup Iteration   5: 741.659 ms/op
Iteration   1: 1037.449 ms/op
Iteration   2: 1096.402 ms/op
Iteration   3: 937.945 ms/op
Iteration   4: 913.479 ms/op
Iteration   5: 1079.918 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark":
  1013.038 ±(99.9%) 319.680 ms/op [Average]
  (min, avg, max) = (913.479, 1013.038, 1096.402), stdev = 83.020
  CI (99.9%): [693.358, 1332.719] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 1, nValues = 2)

# Run progress: 6.25% complete, ETA 03:58:49
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 1, nValues = 3)

# Run progress: 6.32% complete, ETA 03:58:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 2, nValues = 2)

# Run progress: 6.39% complete, ETA 03:58:25
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 2, nValues = 3)

# Run progress: 6.46% complete, ETA 03:58:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 4, nValues = 2)

# Run progress: 6.53% complete, ETA 03:58:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 4, nValues = 3)

# Run progress: 6.60% complete, ETA 03:57:49
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 8, nValues = 2)

# Run progress: 6.67% complete, ETA 03:57:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 8, nValues = 3)

# Run progress: 6.74% complete, ETA 03:57:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 16, nValues = 2)

# Run progress: 6.81% complete, ETA 03:57:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 16, nValues = 3)

# Run progress: 6.88% complete, ETA 03:57:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 32, nValues = 2)

# Run progress: 6.94% complete, ETA 03:56:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 32, nValues = 3)

# Run progress: 7.01% complete, ETA 03:56:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 64, nValues = 2)

# Run progress: 7.08% complete, ETA 03:56:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 64, nValues = 3)

# Run progress: 7.15% complete, ETA 03:56:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10?³, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 128, nValues = 2)

# Run progress: 7.22% complete, ETA 03:55:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.006 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.001
  CI (99.9%): [? 10?³, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 128, nValues = 3)

# Run progress: 7.29% complete, ETA 03:55:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.006 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.001, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 256, nValues = 2)

# Run progress: 7.36% complete, ETA 03:55:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.011 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.009, 0.011, 0.015), stdev = 0.003
  CI (99.9%): [0.002, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 256, nValues = 3)

# Run progress: 7.43% complete, ETA 03:55:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.011 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.009, 0.011, 0.014), stdev = 0.002
  CI (99.9%): [0.002, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 512, nValues = 2)

# Run progress: 7.50% complete, ETA 03:55:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.018 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.030 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.023 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.018, 0.023, 0.030), stdev = 0.006
  CI (99.9%): [? 0, 0.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 512, nValues = 3)

# Run progress: 7.57% complete, ETA 03:54:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.018 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.027 ms/op
Iteration   5: 0.028 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.022 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.018, 0.022, 0.028), stdev = 0.005
  CI (99.9%): [0.003, 0.041] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 1024, nValues = 2)

# Run progress: 7.64% complete, ETA 03:54:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.037 ms/op
# Warmup Iteration   2: 0.036 ms/op
# Warmup Iteration   3: 0.039 ms/op
# Warmup Iteration   4: 0.042 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: 0.036 ms/op
Iteration   2: 0.036 ms/op
Iteration   3: 0.041 ms/op
Iteration   4: 0.061 ms/op
Iteration   5: 0.054 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.046 ±(99.9%) 0.044 ms/op [Average]
  (min, avg, max) = (0.036, 0.046, 0.061), stdev = 0.011
  CI (99.9%): [0.002, 0.090] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 1024, nValues = 3)

# Run progress: 7.71% complete, ETA 03:54:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.039 ms/op
# Warmup Iteration   2: 0.035 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.036 ms/op
# Warmup Iteration   5: 0.036 ms/op
Iteration   1: 0.039 ms/op
Iteration   2: 0.036 ms/op
Iteration   3: 0.046 ms/op
Iteration   4: 0.050 ms/op
Iteration   5: 0.063 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.047 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.036, 0.047, 0.063), stdev = 0.011
  CI (99.9%): [0.006, 0.087] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 2048, nValues = 2)

# Run progress: 7.78% complete, ETA 03:54:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.079 ms/op
# Warmup Iteration   2: 0.075 ms/op
# Warmup Iteration   3: 0.072 ms/op
# Warmup Iteration   4: 0.076 ms/op
# Warmup Iteration   5: 0.079 ms/op
Iteration   1: 0.071 ms/op
Iteration   2: 0.070 ms/op
Iteration   3: 0.085 ms/op
Iteration   4: 0.117 ms/op
Iteration   5: 0.115 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.092 ±(99.9%) 0.089 ms/op [Average]
  (min, avg, max) = (0.070, 0.092, 0.117), stdev = 0.023
  CI (99.9%): [0.003, 0.180] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 2048, nValues = 3)

# Run progress: 7.85% complete, ETA 03:54:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.076 ms/op
# Warmup Iteration   2: 0.069 ms/op
# Warmup Iteration   3: 0.069 ms/op
# Warmup Iteration   4: 0.071 ms/op
# Warmup Iteration   5: 0.070 ms/op
Iteration   1: 0.074 ms/op
Iteration   2: 0.076 ms/op
Iteration   3: 0.083 ms/op
Iteration   4: 0.099 ms/op
Iteration   5: 0.110 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.088 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (0.074, 0.088, 0.110), stdev = 0.016
  CI (99.9%): [0.028, 0.149] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 4096, nValues = 2)

# Run progress: 7.92% complete, ETA 03:53:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.148 ms/op
# Warmup Iteration   2: 0.139 ms/op
# Warmup Iteration   3: 0.140 ms/op
# Warmup Iteration   4: 0.138 ms/op
# Warmup Iteration   5: 0.138 ms/op
Iteration   1: 0.144 ms/op
Iteration   2: 0.143 ms/op
Iteration   3: 0.164 ms/op
Iteration   4: 0.243 ms/op
Iteration   5: 0.230 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.185 ±(99.9%) 0.185 ms/op [Average]
  (min, avg, max) = (0.143, 0.185, 0.243), stdev = 0.048
  CI (99.9%): [? 0, 0.370] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 4096, nValues = 3)

# Run progress: 7.99% complete, ETA 03:53:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.142 ms/op
# Warmup Iteration   2: 0.135 ms/op
# Warmup Iteration   3: 0.138 ms/op
# Warmup Iteration   4: 0.134 ms/op
# Warmup Iteration   5: 0.132 ms/op
Iteration   1: 0.133 ms/op
Iteration   2: 0.134 ms/op
Iteration   3: 0.164 ms/op
Iteration   4: 0.188 ms/op
Iteration   5: 0.199 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.164 ±(99.9%) 0.117 ms/op [Average]
  (min, avg, max) = (0.133, 0.164, 0.199), stdev = 0.030
  CI (99.9%): [0.046, 0.281] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 8192, nValues = 2)

# Run progress: 8.06% complete, ETA 03:53:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.292 ms/op
# Warmup Iteration   2: 0.277 ms/op
# Warmup Iteration   3: 0.277 ms/op
# Warmup Iteration   4: 0.273 ms/op
# Warmup Iteration   5: 0.277 ms/op
Iteration   1: 0.275 ms/op
Iteration   2: 0.275 ms/op
Iteration   3: 0.333 ms/op
Iteration   4: 0.445 ms/op
Iteration   5: 0.404 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.346 ±(99.9%) 0.295 ms/op [Average]
  (min, avg, max) = (0.275, 0.346, 0.445), stdev = 0.077
  CI (99.9%): [0.052, 0.641] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 8192, nValues = 3)

# Run progress: 8.13% complete, ETA 03:53:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.296 ms/op
# Warmup Iteration   2: 0.277 ms/op
# Warmup Iteration   3: 0.277 ms/op
# Warmup Iteration   4: 0.277 ms/op
# Warmup Iteration   5: 0.275 ms/op
Iteration   1: 0.264 ms/op
Iteration   2: 0.273 ms/op
Iteration   3: 0.310 ms/op
Iteration   4: 0.384 ms/op
Iteration   5: 0.406 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.327 ±(99.9%) 0.249 ms/op [Average]
  (min, avg, max) = (0.264, 0.327, 0.406), stdev = 0.065
  CI (99.9%): [0.079, 0.576] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 16384, nValues = 2)

# Run progress: 8.19% complete, ETA 03:53:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.591 ms/op
# Warmup Iteration   2: 0.549 ms/op
# Warmup Iteration   3: 0.549 ms/op
# Warmup Iteration   4: 0.557 ms/op
# Warmup Iteration   5: 0.564 ms/op
Iteration   1: 0.551 ms/op
Iteration   2: 0.544 ms/op
Iteration   3: 0.648 ms/op
Iteration   4: 0.816 ms/op
Iteration   5: 0.883 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.688 ±(99.9%) 0.595 ms/op [Average]
  (min, avg, max) = (0.544, 0.688, 0.883), stdev = 0.155
  CI (99.9%): [0.093, 1.283] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 32, nPut = 16384, nValues = 3)

# Run progress: 8.26% complete, ETA 03:53:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.591 ms/op
# Warmup Iteration   2: 0.562 ms/op
# Warmup Iteration   3: 0.544 ms/op
# Warmup Iteration   4: 0.537 ms/op
# Warmup Iteration   5: 0.527 ms/op
Iteration   1: 0.527 ms/op
Iteration   2: 0.533 ms/op
Iteration   3: 0.635 ms/op
Iteration   4: 0.835 ms/op
Iteration   5: 0.868 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.680 ±(99.9%) 0.628 ms/op [Average]
  (min, avg, max) = (0.527, 0.680, 0.868), stdev = 0.163
  CI (99.9%): [0.052, 1.307] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 1, nValues = 2)

# Run progress: 8.33% complete, ETA 03:52:49
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 1, nValues = 3)

# Run progress: 8.40% complete, ETA 03:52:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 2, nValues = 2)

# Run progress: 8.47% complete, ETA 03:52:25
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 2, nValues = 3)

# Run progress: 8.54% complete, ETA 03:52:14
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 4, nValues = 2)

# Run progress: 8.61% complete, ETA 03:52:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 4, nValues = 3)

# Run progress: 8.68% complete, ETA 03:51:51
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 8, nValues = 2)

# Run progress: 8.75% complete, ETA 03:51:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 8, nValues = 3)

# Run progress: 8.82% complete, ETA 03:51:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 16, nValues = 2)

# Run progress: 8.89% complete, ETA 03:51:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 16, nValues = 3)

# Run progress: 8.96% complete, ETA 03:51:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 32, nValues = 2)

# Run progress: 9.03% complete, ETA 03:50:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 32, nValues = 3)

# Run progress: 9.10% complete, ETA 03:50:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 64, nValues = 2)

# Run progress: 9.17% complete, ETA 03:50:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.005 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.001, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 64, nValues = 3)

# Run progress: 9.24% complete, ETA 03:50:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 128, nValues = 2)

# Run progress: 9.31% complete, ETA 03:50:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.008 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.012), stdev = 0.003
  CI (99.9%): [? 0, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 128, nValues = 3)

# Run progress: 9.38% complete, ETA 03:49:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.008 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.011), stdev = 0.002
  CI (99.9%): [? 0, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 256, nValues = 2)

# Run progress: 9.44% complete, ETA 03:49:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.016 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.022), stdev = 0.005
  CI (99.9%): [? 0, 0.035] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 256, nValues = 3)

# Run progress: 9.51% complete, ETA 03:49:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.017 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.012, 0.017, 0.025), stdev = 0.005
  CI (99.9%): [? 0, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 512, nValues = 2)

# Run progress: 9.58% complete, ETA 03:49:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.032 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.024, 0.032, 0.043), stdev = 0.008
  CI (99.9%): [? 10?³, 0.063] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 512, nValues = 3)

# Run progress: 9.65% complete, ETA 03:49:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.033 ms/op
Iteration   4: 0.047 ms/op
Iteration   5: 0.042 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.035 ±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (0.026, 0.035, 0.047), stdev = 0.010
  CI (99.9%): [? 0, 0.072] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 2)

# Run progress: 9.72% complete, ETA 03:48:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.044 ms/op
Iteration   1: 0.043 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.055 ms/op
Iteration   4: 0.073 ms/op
Iteration   5: 0.077 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.059 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (0.043, 0.059, 0.077), stdev = 0.016
  CI (99.9%): [? 0, 0.119] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 3)

# Run progress: 9.79% complete, ETA 03:48:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.052 ms/op
# Warmup Iteration   2: 0.053 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.070 ms/op
# Warmup Iteration   5: 0.061 ms/op
Iteration   1: 0.077 ms/op
Iteration   2: 0.077 ms/op
Iteration   3: 0.088 ms/op
Iteration   4: 0.111 ms/op
Iteration   5: 0.091 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.089 ±(99.9%) 0.053 ms/op [Average]
  (min, avg, max) = (0.077, 0.089, 0.111), stdev = 0.014
  CI (99.9%): [0.035, 0.142] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 2)

# Run progress: 9.86% complete, ETA 03:48:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.095 ms/op
# Warmup Iteration   2: 0.088 ms/op
# Warmup Iteration   3: 0.087 ms/op
# Warmup Iteration   4: 0.094 ms/op
# Warmup Iteration   5: 0.094 ms/op
Iteration   1: 0.089 ms/op
Iteration   2: 0.090 ms/op
Iteration   3: 0.108 ms/op
Iteration   4: 0.136 ms/op
Iteration   5: 0.131 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.111 ±(99.9%) 0.086 ms/op [Average]
  (min, avg, max) = (0.089, 0.111, 0.136), stdev = 0.022
  CI (99.9%): [0.025, 0.196] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 3)

# Run progress: 9.93% complete, ETA 03:48:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.094 ms/op
# Warmup Iteration   2: 0.092 ms/op
# Warmup Iteration   3: 0.091 ms/op
# Warmup Iteration   4: 0.087 ms/op
# Warmup Iteration   5: 0.083 ms/op
Iteration   1: 0.084 ms/op
Iteration   2: 0.086 ms/op
Iteration   3: 0.103 ms/op
Iteration   4: 0.157 ms/op
Iteration   5: 0.140 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.114 ±(99.9%) 0.126 ms/op [Average]
  (min, avg, max) = (0.084, 0.114, 0.157), stdev = 0.033
  CI (99.9%): [? 0, 0.240] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 2)

# Run progress: 10.00% complete, ETA 03:48:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.177 ms/op
# Warmup Iteration   2: 0.166 ms/op
# Warmup Iteration   3: 0.166 ms/op
# Warmup Iteration   4: 0.165 ms/op
# Warmup Iteration   5: 0.165 ms/op
Iteration   1: 0.164 ms/op
Iteration   2: 0.164 ms/op
Iteration   3: 0.182 ms/op
Iteration   4: 0.263 ms/op
Iteration   5: 0.275 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.210 ±(99.9%) 0.212 ms/op [Average]
  (min, avg, max) = (0.164, 0.210, 0.275), stdev = 0.055
  CI (99.9%): [? 0, 0.422] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 3)

# Run progress: 10.07% complete, ETA 03:47:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.172 ms/op
# Warmup Iteration   2: 0.159 ms/op
# Warmup Iteration   3: 0.160 ms/op
# Warmup Iteration   4: 0.161 ms/op
# Warmup Iteration   5: 0.161 ms/op
Iteration   1: 0.159 ms/op
Iteration   2: 0.159 ms/op
Iteration   3: 0.185 ms/op
Iteration   4: 0.290 ms/op
Iteration   5: 0.263 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.211 ±(99.9%) 0.236 ms/op [Average]
  (min, avg, max) = (0.159, 0.211, 0.290), stdev = 0.061
  CI (99.9%): [? 0, 0.447] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 2)

# Run progress: 10.14% complete, ETA 03:47:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.344 ms/op
# Warmup Iteration   2: 0.317 ms/op
# Warmup Iteration   3: 0.318 ms/op
# Warmup Iteration   4: 0.317 ms/op
# Warmup Iteration   5: 0.317 ms/op
Iteration   1: 0.319 ms/op
Iteration   2: 0.317 ms/op
Iteration   3: 0.368 ms/op
Iteration   4: 0.451 ms/op
Iteration   5: 0.496 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.390 ±(99.9%) 0.309 ms/op [Average]
  (min, avg, max) = (0.317, 0.390, 0.496), stdev = 0.080
  CI (99.9%): [0.082, 0.699] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 3)

# Run progress: 10.21% complete, ETA 03:47:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.328 ms/op
# Warmup Iteration   2: 0.308 ms/op
# Warmup Iteration   3: 0.304 ms/op
# Warmup Iteration   4: 0.307 ms/op
# Warmup Iteration   5: 0.304 ms/op
Iteration   1: 0.306 ms/op
Iteration   2: 0.313 ms/op
Iteration   3: 0.367 ms/op
Iteration   4: 0.525 ms/op
Iteration   5: 0.508 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.404 ±(99.9%) 0.407 ms/op [Average]
  (min, avg, max) = (0.306, 0.404, 0.525), stdev = 0.106
  CI (99.9%): [? 0, 0.811] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 2)

# Run progress: 10.28% complete, ETA 03:47:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.665 ms/op
# Warmup Iteration   2: 0.619 ms/op
# Warmup Iteration   3: 0.616 ms/op
# Warmup Iteration   4: 0.620 ms/op
# Warmup Iteration   5: 0.623 ms/op
Iteration   1: 0.618 ms/op
Iteration   2: 0.614 ms/op
Iteration   3: 0.731 ms/op
Iteration   4: 1.039 ms/op
Iteration   5: 1.028 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.806 ±(99.9%) 0.820 ms/op [Average]
  (min, avg, max) = (0.614, 0.806, 1.039), stdev = 0.213
  CI (99.9%): [? 0, 1.626] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 3)

# Run progress: 10.35% complete, ETA 03:47:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.647 ms/op
# Warmup Iteration   2: 0.597 ms/op
# Warmup Iteration   3: 0.601 ms/op
# Warmup Iteration   4: 0.602 ms/op
# Warmup Iteration   5: 0.593 ms/op
Iteration   1: 0.599 ms/op
Iteration   2: 0.604 ms/op
Iteration   3: 0.720 ms/op
Iteration   4: 0.934 ms/op
Iteration   5: 0.917 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.755 ±(99.9%) 0.629 ms/op [Average]
  (min, avg, max) = (0.599, 0.755, 0.934), stdev = 0.163
  CI (99.9%): [0.126, 1.384] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 1, nValues = 2)

# Run progress: 10.42% complete, ETA 03:47:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 1, nValues = 3)

# Run progress: 10.49% complete, ETA 03:46:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 2, nValues = 2)

# Run progress: 10.56% complete, ETA 03:46:41
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 2, nValues = 3)

# Run progress: 10.63% complete, ETA 03:46:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 4, nValues = 2)

# Run progress: 10.69% complete, ETA 03:46:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 4, nValues = 3)

# Run progress: 10.76% complete, ETA 03:46:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 8, nValues = 2)

# Run progress: 10.83% complete, ETA 03:45:57
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 8, nValues = 3)

# Run progress: 10.90% complete, ETA 03:45:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 16, nValues = 2)

# Run progress: 10.97% complete, ETA 03:45:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 16, nValues = 3)

# Run progress: 11.04% complete, ETA 03:45:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 32, nValues = 2)

# Run progress: 11.11% complete, ETA 03:45:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 32, nValues = 3)

# Run progress: 11.18% complete, ETA 03:45:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 64, nValues = 2)

# Run progress: 11.25% complete, ETA 03:44:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 64, nValues = 3)

# Run progress: 11.32% complete, ETA 03:44:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 10??, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 128, nValues = 2)

# Run progress: 11.39% complete, ETA 03:44:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.007 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.009), stdev = 0.002
  CI (99.9%): [0.001, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 128, nValues = 3)

# Run progress: 11.46% complete, ETA 03:44:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.008 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [? 0, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 256, nValues = 2)

# Run progress: 11.53% complete, ETA 03:44:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.015 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.012, 0.015, 0.019), stdev = 0.004
  CI (99.9%): [0.001, 0.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 256, nValues = 3)

# Run progress: 11.60% complete, ETA 03:43:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.015 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.012, 0.015, 0.020), stdev = 0.004
  CI (99.9%): [0.001, 0.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 512, nValues = 2)

# Run progress: 11.67% complete, ETA 03:43:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.043 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.033 ±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (0.024, 0.033, 0.043), stdev = 0.010
  CI (99.9%): [? 0, 0.070] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 512, nValues = 3)

# Run progress: 11.74% complete, ETA 03:43:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.040 ms/op
Iteration   4: 0.052 ms/op
Iteration   5: 0.045 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.038 ±(99.9%) 0.043 ms/op [Average]
  (min, avg, max) = (0.026, 0.038, 0.052), stdev = 0.011
  CI (99.9%): [? 0, 0.081] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 2)

# Run progress: 11.81% complete, ETA 03:43:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.054 ms/op
# Warmup Iteration   2: 0.052 ms/op
# Warmup Iteration   3: 0.050 ms/op
# Warmup Iteration   4: 0.047 ms/op
# Warmup Iteration   5: 0.047 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.059 ms/op
Iteration   4: 0.094 ms/op
Iteration   5: 0.085 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.067 ±(99.9%) 0.082 ms/op [Average]
  (min, avg, max) = (0.048, 0.067, 0.094), stdev = 0.021
  CI (99.9%): [? 0, 0.149] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 3)

# Run progress: 11.88% complete, ETA 03:43:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.052 ms/op
# Warmup Iteration   2: 0.050 ms/op
# Warmup Iteration   3: 0.047 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.050 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.062 ms/op
Iteration   4: 0.092 ms/op
Iteration   5: 0.082 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.067 ±(99.9%) 0.076 ms/op [Average]
  (min, avg, max) = (0.048, 0.067, 0.092), stdev = 0.020
  CI (99.9%): [? 0, 0.142] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 2)

# Run progress: 11.94% complete, ETA 03:42:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.103 ms/op
# Warmup Iteration   2: 0.095 ms/op
# Warmup Iteration   3: 0.096 ms/op
# Warmup Iteration   4: 0.097 ms/op
# Warmup Iteration   5: 0.096 ms/op
Iteration   1: 0.098 ms/op
Iteration   2: 0.096 ms/op
Iteration   3: 0.115 ms/op
Iteration   4: 0.155 ms/op
Iteration   5: 0.161 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.125 ±(99.9%) 0.119 ms/op [Average]
  (min, avg, max) = (0.096, 0.125, 0.161), stdev = 0.031
  CI (99.9%): [0.006, 0.244] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 3)

# Run progress: 12.01% complete, ETA 03:42:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.104 ms/op
# Warmup Iteration   2: 0.098 ms/op
# Warmup Iteration   3: 0.097 ms/op
# Warmup Iteration   4: 0.096 ms/op
# Warmup Iteration   5: 0.097 ms/op
Iteration   1: 0.096 ms/op
Iteration   2: 0.096 ms/op
Iteration   3: 0.114 ms/op
Iteration   4: 0.150 ms/op
Iteration   5: 0.165 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.124 ±(99.9%) 0.122 ms/op [Average]
  (min, avg, max) = (0.096, 0.124, 0.165), stdev = 0.032
  CI (99.9%): [0.002, 0.246] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 2)

# Run progress: 12.08% complete, ETA 03:42:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.216 ms/op
# Warmup Iteration   2: 0.196 ms/op
# Warmup Iteration   3: 0.200 ms/op
# Warmup Iteration   4: 0.196 ms/op
# Warmup Iteration   5: 0.198 ms/op
Iteration   1: 0.200 ms/op
Iteration   2: 0.196 ms/op
Iteration   3: 0.238 ms/op
Iteration   4: 0.331 ms/op
Iteration   5: 0.348 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.263 ±(99.9%) 0.278 ms/op [Average]
  (min, avg, max) = (0.196, 0.263, 0.348), stdev = 0.072
  CI (99.9%): [? 0, 0.541] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 3)

# Run progress: 12.15% complete, ETA 03:42:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.214 ms/op
# Warmup Iteration   2: 0.196 ms/op
# Warmup Iteration   3: 0.197 ms/op
# Warmup Iteration   4: 0.197 ms/op
# Warmup Iteration   5: 0.196 ms/op
Iteration   1: 0.198 ms/op
Iteration   2: 0.195 ms/op
Iteration   3: 0.231 ms/op
Iteration   4: 0.314 ms/op
Iteration   5: 0.278 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.243 ±(99.9%) 0.200 ms/op [Average]
  (min, avg, max) = (0.195, 0.243, 0.314), stdev = 0.052
  CI (99.9%): [0.043, 0.444] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 2)

# Run progress: 12.22% complete, ETA 03:42:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.458 ms/op
# Warmup Iteration   2: 0.418 ms/op
# Warmup Iteration   3: 0.413 ms/op
# Warmup Iteration   4: 0.426 ms/op
# Warmup Iteration   5: 0.407 ms/op
Iteration   1: 0.402 ms/op
Iteration   2: 0.411 ms/op
Iteration   3: 0.486 ms/op
Iteration   4: 0.664 ms/op
Iteration   5: 0.641 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.521 ±(99.9%) 0.480 ms/op [Average]
  (min, avg, max) = (0.402, 0.521, 0.664), stdev = 0.125
  CI (99.9%): [0.041, 1.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 3)

# Run progress: 12.29% complete, ETA 03:42:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.442 ms/op
# Warmup Iteration   2: 0.402 ms/op
# Warmup Iteration   3: 0.405 ms/op
# Warmup Iteration   4: 0.401 ms/op
# Warmup Iteration   5: 0.408 ms/op
Iteration   1: 0.410 ms/op
Iteration   2: 0.408 ms/op
Iteration   3: 0.500 ms/op
Iteration   4: 0.710 ms/op
Iteration   5: 0.634 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  0.532 ±(99.9%) 0.521 ms/op [Average]
  (min, avg, max) = (0.408, 0.532, 0.710), stdev = 0.135
  CI (99.9%): [0.011, 1.054] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 2)

# Run progress: 12.36% complete, ETA 03:41:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.901 ms/op
# Warmup Iteration   2: 0.833 ms/op
# Warmup Iteration   3: 0.853 ms/op
# Warmup Iteration   4: 0.859 ms/op
# Warmup Iteration   5: 0.862 ms/op
Iteration   1: 0.864 ms/op
Iteration   2: 0.843 ms/op
Iteration   3: 0.996 ms/op
Iteration   4: 1.407 ms/op
Iteration   5: 1.268 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  1.076 ±(99.9%) 0.967 ms/op [Average]
  (min, avg, max) = (0.843, 1.076, 1.407), stdev = 0.251
  CI (99.9%): [0.109, 2.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 3)

# Run progress: 12.43% complete, ETA 03:41:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.972 ms/op
# Warmup Iteration   2: 0.867 ms/op
# Warmup Iteration   3: 0.870 ms/op
# Warmup Iteration   4: 0.890 ms/op
# Warmup Iteration   5: 0.891 ms/op
Iteration   1: 0.871 ms/op
Iteration   2: 0.888 ms/op
Iteration   3: 1.025 ms/op
Iteration   4: 1.397 ms/op
Iteration   5: 1.438 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmark":
  1.123 ±(99.9%) 1.060 ms/op [Average]
  (min, avg, max) = (0.871, 1.123, 1.438), stdev = 0.275
  CI (99.9%): [0.064, 2.183] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 1, nValues = 2)

# Run progress: 12.50% complete, ETA 03:41:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 1, nValues = 3)

# Run progress: 12.57% complete, ETA 03:41:18
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 2, nValues = 2)

# Run progress: 12.64% complete, ETA 03:41:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 2, nValues = 3)

# Run progress: 12.71% complete, ETA 03:40:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 4, nValues = 2)

# Run progress: 12.78% complete, ETA 03:40:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 4, nValues = 3)

# Run progress: 12.85% complete, ETA 03:40:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 8, nValues = 2)

# Run progress: 12.92% complete, ETA 03:40:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 8, nValues = 3)

# Run progress: 12.99% complete, ETA 03:40:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 16, nValues = 2)

# Run progress: 13.06% complete, ETA 03:40:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 16, nValues = 3)

# Run progress: 13.13% complete, ETA 03:39:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.003 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 32, nValues = 2)

# Run progress: 13.19% complete, ETA 03:39:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.006 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.001
  CI (99.9%): [0.002, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 32, nValues = 3)

# Run progress: 13.26% complete, ETA 03:39:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.008 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.009), stdev = 0.001
  CI (99.9%): [0.002, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 64, nValues = 2)

# Run progress: 13.33% complete, ETA 03:39:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.015 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.012, 0.015, 0.019), stdev = 0.003
  CI (99.9%): [0.002, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 64, nValues = 3)

# Run progress: 13.40% complete, ETA 03:39:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.020 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.018 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.015, 0.018, 0.022), stdev = 0.004
  CI (99.9%): [0.004, 0.032] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 128, nValues = 2)

# Run progress: 13.47% complete, ETA 03:38:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.033 ms/op
Iteration   4: 0.046 ms/op
Iteration   5: 0.044 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.036 ±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (0.029, 0.036, 0.046), stdev = 0.008
  CI (99.9%): [0.004, 0.068] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 128, nValues = 3)

# Run progress: 13.54% complete, ETA 03:38:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.040 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.032 ms/op
# Warmup Iteration   5: 0.031 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.036 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.048 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.038 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.031, 0.038, 0.048), stdev = 0.008
  CI (99.9%): [0.008, 0.069] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 256, nValues = 2)

# Run progress: 13.61% complete, ETA 03:38:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.067 ms/op
# Warmup Iteration   2: 0.056 ms/op
# Warmup Iteration   3: 0.057 ms/op
# Warmup Iteration   4: 0.055 ms/op
# Warmup Iteration   5: 0.055 ms/op
Iteration   1: 0.055 ms/op
Iteration   2: 0.055 ms/op
Iteration   3: 0.066 ms/op
Iteration   4: 0.077 ms/op
Iteration   5: 0.082 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.067 ±(99.9%) 0.048 ms/op [Average]
  (min, avg, max) = (0.055, 0.067, 0.082), stdev = 0.012
  CI (99.9%): [0.019, 0.115] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 256, nValues = 3)

# Run progress: 13.68% complete, ETA 03:38:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.082 ms/op
# Warmup Iteration   2: 0.064 ms/op
# Warmup Iteration   3: 0.064 ms/op
# Warmup Iteration   4: 0.065 ms/op
# Warmup Iteration   5: 0.064 ms/op
Iteration   1: 0.063 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.072 ms/op
Iteration   4: 0.101 ms/op
Iteration   5: 0.099 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.080 ±(99.9%) 0.071 ms/op [Average]
  (min, avg, max) = (0.063, 0.080, 0.101), stdev = 0.019
  CI (99.9%): [0.008, 0.151] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 512, nValues = 2)

# Run progress: 13.75% complete, ETA 03:38:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.156 ms/op
# Warmup Iteration   2: 0.127 ms/op
# Warmup Iteration   3: 0.126 ms/op
# Warmup Iteration   4: 0.126 ms/op
# Warmup Iteration   5: 0.126 ms/op
Iteration   1: 0.126 ms/op
Iteration   2: 0.125 ms/op
Iteration   3: 0.150 ms/op
Iteration   4: 0.193 ms/op
Iteration   5: 0.201 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.159 ±(99.9%) 0.140 ms/op [Average]
  (min, avg, max) = (0.125, 0.159, 0.201), stdev = 0.036
  CI (99.9%): [0.019, 0.299] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 512, nValues = 3)

# Run progress: 13.82% complete, ETA 03:38:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.154 ms/op
# Warmup Iteration   2: 0.124 ms/op
# Warmup Iteration   3: 0.125 ms/op
# Warmup Iteration   4: 0.123 ms/op
# Warmup Iteration   5: 0.122 ms/op
Iteration   1: 0.122 ms/op
Iteration   2: 0.125 ms/op
Iteration   3: 0.139 ms/op
Iteration   4: 0.194 ms/op
Iteration   5: 0.175 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.151 ±(99.9%) 0.123 ms/op [Average]
  (min, avg, max) = (0.122, 0.151, 0.194), stdev = 0.032
  CI (99.9%): [0.028, 0.274] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 1024, nValues = 2)

# Run progress: 13.89% complete, ETA 03:37:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.286 ms/op
# Warmup Iteration   2: 0.242 ms/op
# Warmup Iteration   3: 0.240 ms/op
# Warmup Iteration   4: 0.232 ms/op
# Warmup Iteration   5: 0.239 ms/op
Iteration   1: 0.231 ms/op
Iteration   2: 0.226 ms/op
Iteration   3: 0.272 ms/op
Iteration   4: 0.357 ms/op
Iteration   5: 0.382 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.294 ±(99.9%) 0.278 ms/op [Average]
  (min, avg, max) = (0.226, 0.294, 0.382), stdev = 0.072
  CI (99.9%): [0.015, 0.572] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 1024, nValues = 3)

# Run progress: 13.96% complete, ETA 03:37:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.289 ms/op
# Warmup Iteration   2: 0.249 ms/op
# Warmup Iteration   3: 0.246 ms/op
# Warmup Iteration   4: 0.247 ms/op
# Warmup Iteration   5: 0.248 ms/op
Iteration   1: 0.249 ms/op
Iteration   2: 0.249 ms/op
Iteration   3: 0.293 ms/op
Iteration   4: 0.424 ms/op
Iteration   5: 0.488 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.341 ±(99.9%) 0.421 ms/op [Average]
  (min, avg, max) = (0.249, 0.341, 0.488), stdev = 0.109
  CI (99.9%): [? 0, 0.762] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 2048, nValues = 2)

# Run progress: 14.03% complete, ETA 03:37:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.629 ms/op
# Warmup Iteration   2: 0.475 ms/op
# Warmup Iteration   3: 0.477 ms/op
# Warmup Iteration   4: 0.467 ms/op
# Warmup Iteration   5: 0.472 ms/op
Iteration   1: 0.475 ms/op
Iteration   2: 0.468 ms/op
Iteration   3: 0.545 ms/op
Iteration   4: 0.768 ms/op
Iteration   5: 0.763 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.604 ±(99.9%) 0.580 ms/op [Average]
  (min, avg, max) = (0.468, 0.604, 0.768), stdev = 0.151
  CI (99.9%): [0.023, 1.184] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 2048, nValues = 3)

# Run progress: 14.10% complete, ETA 03:37:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.600 ms/op
# Warmup Iteration   2: 0.508 ms/op
# Warmup Iteration   3: 0.512 ms/op
# Warmup Iteration   4: 0.512 ms/op
# Warmup Iteration   5: 0.510 ms/op
Iteration   1: 0.507 ms/op
Iteration   2: 0.515 ms/op
Iteration   3: 0.594 ms/op
Iteration   4: 0.859 ms/op
Iteration   5: 0.739 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.643 ±(99.9%) 0.588 ms/op [Average]
  (min, avg, max) = (0.507, 0.643, 0.859), stdev = 0.153
  CI (99.9%): [0.055, 1.231] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 4096, nValues = 2)

# Run progress: 14.17% complete, ETA 03:37:06
# Fork: 1 of 1
# Warmup Iteration   1: 1.206 ms/op
# Warmup Iteration   2: 1.018 ms/op
# Warmup Iteration   3: 1.022 ms/op
# Warmup Iteration   4: 1.018 ms/op
# Warmup Iteration   5: 1.025 ms/op
Iteration   1: 1.013 ms/op
Iteration   2: 1.017 ms/op
Iteration   3: 1.197 ms/op
Iteration   4: 1.602 ms/op
Iteration   5: 1.569 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  1.280 ±(99.9%) 1.113 ms/op [Average]
  (min, avg, max) = (1.013, 1.280, 1.602), stdev = 0.289
  CI (99.9%): [0.166, 2.393] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 4096, nValues = 3)

# Run progress: 14.24% complete, ETA 03:36:55
# Fork: 1 of 1
# Warmup Iteration   1: 1.269 ms/op
# Warmup Iteration   2: 1.037 ms/op
# Warmup Iteration   3: 1.035 ms/op
# Warmup Iteration   4: 1.020 ms/op
# Warmup Iteration   5: 1.034 ms/op
Iteration   1: 1.033 ms/op
Iteration   2: 1.026 ms/op
Iteration   3: 1.251 ms/op
Iteration   4: 1.529 ms/op
Iteration   5: 1.710 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  1.310 ±(99.9%) 1.170 ms/op [Average]
  (min, avg, max) = (1.026, 1.310, 1.710), stdev = 0.304
  CI (99.9%): [0.140, 2.480] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 8192, nValues = 2)

# Run progress: 14.31% complete, ETA 03:36:44
# Fork: 1 of 1
# Warmup Iteration   1: 2.321 ms/op
# Warmup Iteration   2: 1.906 ms/op
# Warmup Iteration   3: 1.923 ms/op
# Warmup Iteration   4: 1.918 ms/op
# Warmup Iteration   5: 1.892 ms/op
Iteration   1: 1.888 ms/op
Iteration   2: 1.904 ms/op
Iteration   3: 2.213 ms/op
Iteration   4: 3.117 ms/op
Iteration   5: 3.036 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  2.432 ±(99.9%) 2.324 ms/op [Average]
  (min, avg, max) = (1.888, 2.432, 3.117), stdev = 0.604
  CI (99.9%): [0.108, 4.756] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 8192, nValues = 3)

# Run progress: 14.37% complete, ETA 03:36:33
# Fork: 1 of 1
# Warmup Iteration   1: 2.554 ms/op
# Warmup Iteration   2: 2.076 ms/op
# Warmup Iteration   3: 2.093 ms/op
# Warmup Iteration   4: 2.073 ms/op
# Warmup Iteration   5: 2.110 ms/op
Iteration   1: 2.098 ms/op
Iteration   2: 2.087 ms/op
Iteration   3: 2.508 ms/op
Iteration   4: 3.119 ms/op
Iteration   5: 3.484 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  2.659 ±(99.9%) 2.404 ms/op [Average]
  (min, avg, max) = (2.087, 2.659, 3.484), stdev = 0.624
  CI (99.9%): [0.256, 5.063] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 16384, nValues = 2)

# Run progress: 14.44% complete, ETA 03:36:22
# Fork: 1 of 1
# Warmup Iteration   1: 4.935 ms/op
# Warmup Iteration   2: 4.021 ms/op
# Warmup Iteration   3: 3.966 ms/op
# Warmup Iteration   4: 3.942 ms/op
# Warmup Iteration   5: 3.947 ms/op
Iteration   1: 3.914 ms/op
Iteration   2: 3.959 ms/op
Iteration   3: 4.476 ms/op
Iteration   4: 6.557 ms/op
Iteration   5: 6.156 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  5.012 ±(99.9%) 4.831 ms/op [Average]
  (min, avg, max) = (3.914, 5.012, 6.557), stdev = 1.255
  CI (99.9%): [0.181, 9.843] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 32, nPut = 16384, nValues = 3)

# Run progress: 14.51% complete, ETA 03:36:12
# Fork: 1 of 1
# Warmup Iteration   1: 5.446 ms/op
# Warmup Iteration   2: 4.188 ms/op
# Warmup Iteration   3: 4.148 ms/op
# Warmup Iteration   4: 4.181 ms/op
# Warmup Iteration   5: 4.196 ms/op
Iteration   1: 4.092 ms/op
Iteration   2: 4.147 ms/op
Iteration   3: 4.834 ms/op
Iteration   4: 6.514 ms/op
Iteration   5: 6.374 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  5.192 ±(99.9%) 4.545 ms/op [Average]
  (min, avg, max) = (4.092, 5.192, 6.514), stdev = 1.180
  CI (99.9%): [0.648, 9.737] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 1, nValues = 2)

# Run progress: 14.58% complete, ETA 03:36:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 1, nValues = 3)

# Run progress: 14.65% complete, ETA 03:35:50
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 2, nValues = 2)

# Run progress: 14.72% complete, ETA 03:35:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 2, nValues = 3)

# Run progress: 14.79% complete, ETA 03:35:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 4, nValues = 2)

# Run progress: 14.86% complete, ETA 03:35:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 4, nValues = 3)

# Run progress: 14.93% complete, ETA 03:35:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 8, nValues = 2)

# Run progress: 15.00% complete, ETA 03:34:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 8, nValues = 3)

# Run progress: 15.07% complete, ETA 03:34:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 16, nValues = 2)

# Run progress: 15.14% complete, ETA 03:34:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 16, nValues = 3)

# Run progress: 15.21% complete, ETA 03:34:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 32, nValues = 2)

# Run progress: 15.28% complete, ETA 03:34:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.010 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.008, 0.010, 0.014), stdev = 0.003
  CI (99.9%): [? 10??, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 32, nValues = 3)

# Run progress: 15.35% complete, ETA 03:34:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.014 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.011, 0.014, 0.018), stdev = 0.003
  CI (99.9%): [0.001, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 64, nValues = 2)

# Run progress: 15.42% complete, ETA 03:33:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.037 ms/op
Iteration   5: 0.040 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.030 ±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (0.022, 0.030, 0.040), stdev = 0.008
  CI (99.9%): [? 0, 0.062] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 64, nValues = 3)

# Run progress: 15.49% complete, ETA 03:33:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.042 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.031 ms/op
# Warmup Iteration   5: 0.031 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.035 ms/op
Iteration   4: 0.050 ms/op
Iteration   5: 0.047 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.039 ±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (0.031, 0.039, 0.050), stdev = 0.009
  CI (99.9%): [0.004, 0.074] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 128, nValues = 2)

# Run progress: 15.56% complete, ETA 03:33:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.087 ms/op
# Warmup Iteration   2: 0.061 ms/op
# Warmup Iteration   3: 0.063 ms/op
# Warmup Iteration   4: 0.061 ms/op
# Warmup Iteration   5: 0.062 ms/op
Iteration   1: 0.061 ms/op
Iteration   2: 0.061 ms/op
Iteration   3: 0.073 ms/op
Iteration   4: 0.092 ms/op
Iteration   5: 0.092 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.076 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (0.061, 0.076, 0.092), stdev = 0.016
  CI (99.9%): [0.016, 0.136] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 128, nValues = 3)

# Run progress: 15.63% complete, ETA 03:33:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.113 ms/op
# Warmup Iteration   2: 0.081 ms/op
# Warmup Iteration   3: 0.080 ms/op
# Warmup Iteration   4: 0.080 ms/op
# Warmup Iteration   5: 0.080 ms/op
Iteration   1: 0.080 ms/op
Iteration   2: 0.079 ms/op
Iteration   3: 0.092 ms/op
Iteration   4: 0.133 ms/op
Iteration   5: 0.118 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.100 ±(99.9%) 0.093 ms/op [Average]
  (min, avg, max) = (0.079, 0.100, 0.133), stdev = 0.024
  CI (99.9%): [0.008, 0.193] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 256, nValues = 2)

# Run progress: 15.69% complete, ETA 03:33:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.244 ms/op
# Warmup Iteration   2: 0.159 ms/op
# Warmup Iteration   3: 0.152 ms/op
# Warmup Iteration   4: 0.153 ms/op
# Warmup Iteration   5: 0.148 ms/op
Iteration   1: 0.149 ms/op
Iteration   2: 0.147 ms/op
Iteration   3: 0.167 ms/op
Iteration   4: 0.229 ms/op
Iteration   5: 0.254 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.189 ±(99.9%) 0.190 ms/op [Average]
  (min, avg, max) = (0.147, 0.189, 0.254), stdev = 0.049
  CI (99.9%): [? 0, 0.380] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 256, nValues = 3)

# Run progress: 15.76% complete, ETA 03:32:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.275 ms/op
# Warmup Iteration   2: 0.173 ms/op
# Warmup Iteration   3: 0.171 ms/op
# Warmup Iteration   4: 0.168 ms/op
# Warmup Iteration   5: 0.170 ms/op
Iteration   1: 0.170 ms/op
Iteration   2: 0.168 ms/op
Iteration   3: 0.203 ms/op
Iteration   4: 0.285 ms/op
Iteration   5: 0.288 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.223 ±(99.9%) 0.231 ms/op [Average]
  (min, avg, max) = (0.168, 0.223, 0.288), stdev = 0.060
  CI (99.9%): [? 0, 0.454] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 512, nValues = 2)

# Run progress: 15.83% complete, ETA 03:32:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.473 ms/op
# Warmup Iteration   2: 0.339 ms/op
# Warmup Iteration   3: 0.334 ms/op
# Warmup Iteration   4: 0.332 ms/op
# Warmup Iteration   5: 0.336 ms/op
Iteration   1: 0.329 ms/op
Iteration   2: 0.334 ms/op
Iteration   3: 0.376 ms/op
Iteration   4: 0.513 ms/op
Iteration   5: 0.568 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.424 ±(99.9%) 0.423 ms/op [Average]
  (min, avg, max) = (0.329, 0.424, 0.568), stdev = 0.110
  CI (99.9%): [0.001, 0.847] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 512, nValues = 3)

# Run progress: 15.90% complete, ETA 03:32:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.551 ms/op
# Warmup Iteration   2: 0.390 ms/op
# Warmup Iteration   3: 0.383 ms/op
# Warmup Iteration   4: 0.379 ms/op
# Warmup Iteration   5: 0.378 ms/op
Iteration   1: 0.379 ms/op
Iteration   2: 0.382 ms/op
Iteration   3: 0.465 ms/op
Iteration   4: 0.666 ms/op
Iteration   5: 0.551 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.488 ±(99.9%) 0.469 ms/op [Average]
  (min, avg, max) = (0.379, 0.488, 0.666), stdev = 0.122
  CI (99.9%): [0.020, 0.957] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 2)

# Run progress: 15.97% complete, ETA 03:32:25
# Fork: 1 of 1
# Warmup Iteration   1: 1.047 ms/op
# Warmup Iteration   2: 0.771 ms/op
# Warmup Iteration   3: 0.813 ms/op
# Warmup Iteration   4: 0.793 ms/op
# Warmup Iteration   5: 0.802 ms/op
Iteration   1: 0.784 ms/op
Iteration   2: 0.781 ms/op
Iteration   3: 0.939 ms/op
Iteration   4: 1.332 ms/op
Iteration   5: 1.429 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  1.053 ±(99.9%) 1.185 ms/op [Average]
  (min, avg, max) = (0.781, 1.053, 1.429), stdev = 0.308
  CI (99.9%): [? 0, 2.238] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 3)

# Run progress: 16.04% complete, ETA 03:32:14
# Fork: 1 of 1
# Warmup Iteration   1: 1.297 ms/op
# Warmup Iteration   2: 0.901 ms/op
# Warmup Iteration   3: 0.968 ms/op
# Warmup Iteration   4: 0.889 ms/op
# Warmup Iteration   5: 0.855 ms/op
Iteration   1: 0.856 ms/op
Iteration   2: 0.851 ms/op
Iteration   3: 1.044 ms/op
Iteration   4: 1.462 ms/op
Iteration   5: 1.329 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  1.108 ±(99.9%) 1.069 ms/op [Average]
  (min, avg, max) = (0.851, 1.108, 1.462), stdev = 0.278
  CI (99.9%): [0.040, 2.177] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 2)

# Run progress: 16.11% complete, ETA 03:32:04
# Fork: 1 of 1
# Warmup Iteration   1: 2.402 ms/op
# Warmup Iteration   2: 1.718 ms/op
# Warmup Iteration   3: 1.662 ms/op
# Warmup Iteration   4: 1.670 ms/op
# Warmup Iteration   5: 1.638 ms/op
Iteration   1: 1.608 ms/op
Iteration   2: 1.617 ms/op
Iteration   3: 1.973 ms/op
Iteration   4: 2.922 ms/op
Iteration   5: 3.024 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  2.229 ±(99.9%) 2.680 ms/op [Average]
  (min, avg, max) = (1.608, 2.229, 3.024), stdev = 0.696
  CI (99.9%): [? 0, 4.909] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 3)

# Run progress: 16.18% complete, ETA 03:31:53
# Fork: 1 of 1
# Warmup Iteration   1: 2.856 ms/op
# Warmup Iteration   2: 1.913 ms/op
# Warmup Iteration   3: 2.091 ms/op
# Warmup Iteration   4: 1.975 ms/op
# Warmup Iteration   5: 1.977 ms/op
Iteration   1: 1.991 ms/op
Iteration   2: 1.996 ms/op
Iteration   3: 2.518 ms/op
Iteration   4: 3.232 ms/op
Iteration   5: 2.912 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  2.530 ±(99.9%) 2.122 ms/op [Average]
  (min, avg, max) = (1.991, 2.530, 3.232), stdev = 0.551
  CI (99.9%): [0.408, 4.651] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 2)

# Run progress: 16.25% complete, ETA 03:31:42
# Fork: 1 of 1
# Warmup Iteration   1: 5.437 ms/op
# Warmup Iteration   2: 3.663 ms/op
# Warmup Iteration   3: 3.630 ms/op
# Warmup Iteration   4: 3.637 ms/op
# Warmup Iteration   5: 3.672 ms/op
Iteration   1: 3.688 ms/op
Iteration   2: 3.662 ms/op
Iteration   3: 4.187 ms/op
Iteration   4: 5.823 ms/op
Iteration   5: 5.632 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  4.598 ±(99.9%) 4.058 ms/op [Average]
  (min, avg, max) = (3.662, 4.598, 5.823), stdev = 1.054
  CI (99.9%): [0.541, 8.656] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 3)

# Run progress: 16.32% complete, ETA 03:31:31
# Fork: 1 of 1
# Warmup Iteration   1: 6.144 ms/op
# Warmup Iteration   2: 4.137 ms/op
# Warmup Iteration   3: 4.146 ms/op
# Warmup Iteration   4: 4.191 ms/op
# Warmup Iteration   5: 4.195 ms/op
Iteration   1: 4.149 ms/op
Iteration   2: 4.179 ms/op
Iteration   3: 5.041 ms/op
Iteration   4: 6.344 ms/op
Iteration   5: 7.399 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  5.422 ±(99.9%) 5.469 ms/op [Average]
  (min, avg, max) = (4.149, 5.422, 7.399), stdev = 1.420
  CI (99.9%): [? 0, 10.892] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 2)

# Run progress: 16.39% complete, ETA 03:31:21
# Fork: 1 of 1
# Warmup Iteration   1: 13.075 ms/op
# Warmup Iteration   2: 7.776 ms/op
# Warmup Iteration   3: 7.605 ms/op
# Warmup Iteration   4: 7.869 ms/op
# Warmup Iteration   5: 8.151 ms/op
Iteration   1: 7.975 ms/op
Iteration   2: 7.712 ms/op
Iteration   3: 9.282 ms/op
Iteration   4: 14.557 ms/op
Iteration   5: 13.833 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  10.672 ±(99.9%) 12.633 ms/op [Average]
  (min, avg, max) = (7.712, 10.672, 14.557), stdev = 3.281
  CI (99.9%): [? 0, 23.305] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 3)

# Run progress: 16.46% complete, ETA 03:31:10
# Fork: 1 of 1
# Warmup Iteration   1: 14.411 ms/op
# Warmup Iteration   2: 8.903 ms/op
# Warmup Iteration   3: 8.931 ms/op
# Warmup Iteration   4: 8.745 ms/op
# Warmup Iteration   5: 8.886 ms/op
Iteration   1: 8.925 ms/op
Iteration   2: 9.051 ms/op
Iteration   3: 10.866 ms/op
Iteration   4: 14.599 ms/op
Iteration   5: 12.110 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  11.110 ±(99.9%) 9.081 ms/op [Average]
  (min, avg, max) = (8.925, 11.110, 14.599), stdev = 2.358
  CI (99.9%): [2.029, 20.191] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 2)

# Run progress: 16.53% complete, ETA 03:30:59
# Fork: 1 of 1
# Warmup Iteration   1: 25.477 ms/op
# Warmup Iteration   2: 16.373 ms/op
# Warmup Iteration   3: 15.990 ms/op
# Warmup Iteration   4: 15.793 ms/op
# Warmup Iteration   5: 16.220 ms/op
Iteration   1: 15.998 ms/op
Iteration   2: 15.893 ms/op
Iteration   3: 20.008 ms/op
Iteration   4: 26.353 ms/op
Iteration   5: 26.676 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  20.986 ±(99.9%) 20.462 ms/op [Average]
  (min, avg, max) = (15.893, 20.986, 26.676), stdev = 5.314
  CI (99.9%): [0.524, 41.447] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 3)

# Run progress: 16.60% complete, ETA 03:30:49
# Fork: 1 of 1
# Warmup Iteration   1: 27.515 ms/op
# Warmup Iteration   2: 18.677 ms/op
# Warmup Iteration   3: 18.319 ms/op
# Warmup Iteration   4: 18.211 ms/op
# Warmup Iteration   5: 18.300 ms/op
Iteration   1: 18.217 ms/op
Iteration   2: 18.070 ms/op
Iteration   3: 21.875 ms/op
Iteration   4: 29.499 ms/op
Iteration   5: 28.958 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  23.324 ±(99.9%) 21.583 ms/op [Average]
  (min, avg, max) = (18.070, 23.324, 29.499), stdev = 5.605
  CI (99.9%): [1.741, 44.906] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 1, nValues = 2)

# Run progress: 16.67% complete, ETA 03:30:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 1, nValues = 3)

# Run progress: 16.74% complete, ETA 03:30:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 2, nValues = 2)

# Run progress: 16.81% complete, ETA 03:30:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 2, nValues = 3)

# Run progress: 16.88% complete, ETA 03:30:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 4, nValues = 2)

# Run progress: 16.94% complete, ETA 03:29:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 4, nValues = 3)

# Run progress: 17.01% complete, ETA 03:29:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 8, nValues = 2)

# Run progress: 17.08% complete, ETA 03:29:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 8, nValues = 3)

# Run progress: 17.15% complete, ETA 03:29:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 16, nValues = 2)

# Run progress: 17.22% complete, ETA 03:29:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.005), stdev = 0.001
  CI (99.9%): [? 10??, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 16, nValues = 3)

# Run progress: 17.29% complete, ETA 03:29:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.005 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 10??, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 32, nValues = 2)

# Run progress: 17.36% complete, ETA 03:28:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.010 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.008, 0.010, 0.013), stdev = 0.002
  CI (99.9%): [0.001, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 32, nValues = 3)

# Run progress: 17.43% complete, ETA 03:28:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.014 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.011, 0.014, 0.018), stdev = 0.004
  CI (99.9%): [0.001, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 64, nValues = 2)

# Run progress: 17.50% complete, ETA 03:28:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.037 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.037 ms/op
Iteration   5: 0.042 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.031 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.023, 0.031, 0.042), stdev = 0.008
  CI (99.9%): [0.001, 0.061] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 64, nValues = 3)

# Run progress: 17.57% complete, ETA 03:28:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.041 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.032 ms/op
# Warmup Iteration   4: 0.032 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.038 ms/op
Iteration   4: 0.051 ms/op
Iteration   5: 0.053 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.041 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.032, 0.041, 0.053), stdev = 0.010
  CI (99.9%): [0.002, 0.080] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 128, nValues = 2)

# Run progress: 17.64% complete, ETA 03:28:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.092 ms/op
# Warmup Iteration   2: 0.063 ms/op
# Warmup Iteration   3: 0.063 ms/op
# Warmup Iteration   4: 0.063 ms/op
# Warmup Iteration   5: 0.064 ms/op
Iteration   1: 0.063 ms/op
Iteration   2: 0.068 ms/op
Iteration   3: 0.074 ms/op
Iteration   4: 0.096 ms/op
Iteration   5: 0.097 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.080 ±(99.9%) 0.061 ms/op [Average]
  (min, avg, max) = (0.063, 0.080, 0.097), stdev = 0.016
  CI (99.9%): [0.019, 0.140] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 128, nValues = 3)

# Run progress: 17.71% complete, ETA 03:27:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.102 ms/op
# Warmup Iteration   2: 0.079 ms/op
# Warmup Iteration   3: 0.080 ms/op
# Warmup Iteration   4: 0.079 ms/op
# Warmup Iteration   5: 0.080 ms/op
Iteration   1: 0.080 ms/op
Iteration   2: 0.079 ms/op
Iteration   3: 0.093 ms/op
Iteration   4: 0.122 ms/op
Iteration   5: 0.130 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.101 ±(99.9%) 0.092 ms/op [Average]
  (min, avg, max) = (0.079, 0.101, 0.130), stdev = 0.024
  CI (99.9%): [0.009, 0.192] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 256, nValues = 2)

# Run progress: 17.78% complete, ETA 03:27:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.221 ms/op
# Warmup Iteration   2: 0.151 ms/op
# Warmup Iteration   3: 0.152 ms/op
# Warmup Iteration   4: 0.152 ms/op
# Warmup Iteration   5: 0.153 ms/op
Iteration   1: 0.152 ms/op
Iteration   2: 0.153 ms/op
Iteration   3: 0.183 ms/op
Iteration   4: 0.228 ms/op
Iteration   5: 0.212 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.186 ±(99.9%) 0.132 ms/op [Average]
  (min, avg, max) = (0.152, 0.186, 0.228), stdev = 0.034
  CI (99.9%): [0.054, 0.317] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 256, nValues = 3)

# Run progress: 17.85% complete, ETA 03:27:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.287 ms/op
# Warmup Iteration   2: 0.184 ms/op
# Warmup Iteration   3: 0.184 ms/op
# Warmup Iteration   4: 0.183 ms/op
# Warmup Iteration   5: 0.183 ms/op
Iteration   1: 0.183 ms/op
Iteration   2: 0.184 ms/op
Iteration   3: 0.217 ms/op
Iteration   4: 0.312 ms/op
Iteration   5: 0.326 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.244 ±(99.9%) 0.268 ms/op [Average]
  (min, avg, max) = (0.183, 0.244, 0.326), stdev = 0.070
  CI (99.9%): [? 0, 0.513] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 512, nValues = 2)

# Run progress: 17.92% complete, ETA 03:27:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.516 ms/op
# Warmup Iteration   2: 0.358 ms/op
# Warmup Iteration   3: 0.355 ms/op
# Warmup Iteration   4: 0.356 ms/op
# Warmup Iteration   5: 0.374 ms/op
Iteration   1: 0.373 ms/op
Iteration   2: 0.383 ms/op
Iteration   3: 0.463 ms/op
Iteration   4: 0.555 ms/op
Iteration   5: 0.600 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.475 ±(99.9%) 0.391 ms/op [Average]
  (min, avg, max) = (0.373, 0.475, 0.600), stdev = 0.102
  CI (99.9%): [0.084, 0.866] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 512, nValues = 3)

# Run progress: 17.99% complete, ETA 03:27:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.778 ms/op
# Warmup Iteration   2: 0.436 ms/op
# Warmup Iteration   3: 0.416 ms/op
# Warmup Iteration   4: 0.415 ms/op
# Warmup Iteration   5: 0.440 ms/op
Iteration   1: 0.508 ms/op
Iteration   2: 0.487 ms/op
Iteration   3: 0.562 ms/op
Iteration   4: 0.703 ms/op
Iteration   5: 0.733 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  0.599 ±(99.9%) 0.434 ms/op [Average]
  (min, avg, max) = (0.487, 0.599, 0.733), stdev = 0.113
  CI (99.9%): [0.164, 1.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 2)

# Run progress: 18.06% complete, ETA 03:27:04
# Fork: 1 of 1
# Warmup Iteration   1: 1.232 ms/op
# Warmup Iteration   2: 0.866 ms/op
# Warmup Iteration   3: 0.807 ms/op
# Warmup Iteration   4: 0.808 ms/op
# Warmup Iteration   5: 0.803 ms/op
Iteration   1: 0.808 ms/op
Iteration   2: 0.801 ms/op
Iteration   3: 0.956 ms/op
Iteration   4: 1.429 ms/op
Iteration   5: 1.321 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  1.063 ±(99.9%) 1.132 ms/op [Average]
  (min, avg, max) = (0.801, 1.063, 1.429), stdev = 0.294
  CI (99.9%): [? 0, 2.195] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 3)

# Run progress: 18.13% complete, ETA 03:26:53
# Fork: 1 of 1
# Warmup Iteration   1: 1.827 ms/op
# Warmup Iteration   2: 1.070 ms/op
# Warmup Iteration   3: 1.068 ms/op
# Warmup Iteration   4: 1.026 ms/op
# Warmup Iteration   5: 1.007 ms/op
Iteration   1: 1.001 ms/op
Iteration   2: 1.006 ms/op
Iteration   3: 1.159 ms/op
Iteration   4: 1.656 ms/op
Iteration   5: 1.984 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  1.361 ±(99.9%) 1.691 ms/op [Average]
  (min, avg, max) = (1.001, 1.361, 1.984), stdev = 0.439
  CI (99.9%): [? 0, 3.053] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 2)

# Run progress: 18.19% complete, ETA 03:26:42
# Fork: 1 of 1
# Warmup Iteration   1: 3.130 ms/op
# Warmup Iteration   2: 2.065 ms/op
# Warmup Iteration   3: 2.100 ms/op
# Warmup Iteration   4: 2.155 ms/op
# Warmup Iteration   5: 2.139 ms/op
Iteration   1: 2.007 ms/op
Iteration   2: 2.053 ms/op
Iteration   3: 2.526 ms/op
Iteration   4: 3.475 ms/op
Iteration   5: 3.209 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  2.654 ±(99.9%) 2.568 ms/op [Average]
  (min, avg, max) = (2.007, 2.654, 3.475), stdev = 0.667
  CI (99.9%): [0.086, 5.222] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 3)

# Run progress: 18.26% complete, ETA 03:26:32
# Fork: 1 of 1
# Warmup Iteration   1: 3.276 ms/op
# Warmup Iteration   2: 2.436 ms/op
# Warmup Iteration   3: 2.517 ms/op
# Warmup Iteration   4: 2.505 ms/op
# Warmup Iteration   5: 2.415 ms/op
Iteration   1: 2.399 ms/op
Iteration   2: 2.402 ms/op
Iteration   3: 2.654 ms/op
Iteration   4: 4.355 ms/op
Iteration   5: 4.288 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  3.220 ±(99.9%) 3.894 ms/op [Average]
  (min, avg, max) = (2.399, 3.220, 4.355), stdev = 1.011
  CI (99.9%): [? 0, 7.114] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 2)

# Run progress: 18.33% complete, ETA 03:26:21
# Fork: 1 of 1
# Warmup Iteration   1: 8.604 ms/op
# Warmup Iteration   2: 5.323 ms/op
# Warmup Iteration   3: 5.750 ms/op
# Warmup Iteration   4: 5.209 ms/op
# Warmup Iteration   5: 5.415 ms/op
Iteration   1: 5.147 ms/op
Iteration   2: 5.285 ms/op
Iteration   3: 6.518 ms/op
Iteration   4: 8.720 ms/op
Iteration   5: 7.823 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  6.699 ±(99.9%) 6.024 ms/op [Average]
  (min, avg, max) = (5.147, 6.699, 8.720), stdev = 1.564
  CI (99.9%): [0.675, 12.722] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 3)

# Run progress: 18.40% complete, ETA 03:26:10
# Fork: 1 of 1
# Warmup Iteration   1: 11.350 ms/op
# Warmup Iteration   2: 5.966 ms/op
# Warmup Iteration   3: 6.069 ms/op
# Warmup Iteration   4: 5.945 ms/op
# Warmup Iteration   5: 6.103 ms/op
Iteration   1: 6.110 ms/op
Iteration   2: 6.132 ms/op
Iteration   3: 6.969 ms/op
Iteration   4: 8.671 ms/op
Iteration   5: 9.384 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  7.453 ±(99.9%) 5.774 ms/op [Average]
  (min, avg, max) = (6.110, 7.453, 9.384), stdev = 1.499
  CI (99.9%): [1.680, 13.227] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 2)

# Run progress: 18.47% complete, ETA 03:26:00
# Fork: 1 of 1
# Warmup Iteration   1: 17.767 ms/op
# Warmup Iteration   2: 12.675 ms/op
# Warmup Iteration   3: 11.843 ms/op
# Warmup Iteration   4: 12.008 ms/op
# Warmup Iteration   5: 11.938 ms/op
Iteration   1: 11.833 ms/op
Iteration   2: 11.826 ms/op
Iteration   3: 15.192 ms/op
Iteration   4: 19.584 ms/op
Iteration   5: 18.606 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  15.408 ±(99.9%) 14.059 ms/op [Average]
  (min, avg, max) = (11.826, 15.408, 19.584), stdev = 3.651
  CI (99.9%): [1.349, 29.468] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 3)

# Run progress: 18.54% complete, ETA 03:25:49
# Fork: 1 of 1
# Warmup Iteration   1: 20.541 ms/op
# Warmup Iteration   2: 13.698 ms/op
# Warmup Iteration   3: 13.315 ms/op
# Warmup Iteration   4: 13.234 ms/op
# Warmup Iteration   5: 13.152 ms/op
Iteration   1: 13.379 ms/op
Iteration   2: 13.597 ms/op
Iteration   3: 16.592 ms/op
Iteration   4: 22.044 ms/op
Iteration   5: 20.726 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  17.268 ±(99.9%) 15.381 ms/op [Average]
  (min, avg, max) = (13.379, 17.268, 22.044), stdev = 3.994
  CI (99.9%): [1.887, 32.649] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 2)

# Run progress: 18.61% complete, ETA 03:25:39
# Fork: 1 of 1
# Warmup Iteration   1: 47.224 ms/op
# Warmup Iteration   2: 31.944 ms/op
# Warmup Iteration   3: 27.365 ms/op
# Warmup Iteration   4: 26.842 ms/op
# Warmup Iteration   5: 27.526 ms/op
Iteration   1: 27.607 ms/op
Iteration   2: 27.505 ms/op
Iteration   3: 32.187 ms/op
Iteration   4: 51.330 ms/op
Iteration   5: 42.691 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  36.264 ±(99.9%) 40.228 ms/op [Average]
  (min, avg, max) = (27.505, 36.264, 51.330), stdev = 10.447
  CI (99.9%): [? 0, 76.492] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 3)

# Run progress: 18.68% complete, ETA 03:25:29
# Fork: 1 of 1
# Warmup Iteration   1: 47.049 ms/op
# Warmup Iteration   2: 30.707 ms/op
# Warmup Iteration   3: 31.972 ms/op
# Warmup Iteration   4: 30.209 ms/op
# Warmup Iteration   5: 30.658 ms/op
Iteration   1: 30.066 ms/op
Iteration   2: 29.051 ms/op
Iteration   3: 39.199 ms/op
Iteration   4: 50.902 ms/op
Iteration   5: 53.150 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark":
  40.474 ±(99.9%) 43.474 ms/op [Average]
  (min, avg, max) = (29.051, 40.474, 53.150), stdev = 11.290
  CI (99.9%): [? 0, 83.947] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 1, nValues = 2)

# Run progress: 18.75% complete, ETA 03:25:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 1, nValues = 3)

# Run progress: 18.82% complete, ETA 03:25:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 2, nValues = 2)

# Run progress: 18.89% complete, ETA 03:24:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 2, nValues = 3)

# Run progress: 18.96% complete, ETA 03:24:47
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 4, nValues = 2)

# Run progress: 19.03% complete, ETA 03:24:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 4, nValues = 3)

# Run progress: 19.10% complete, ETA 03:24:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 8, nValues = 2)

# Run progress: 19.17% complete, ETA 03:24:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 8, nValues = 3)

# Run progress: 19.24% complete, ETA 03:24:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 16, nValues = 2)

# Run progress: 19.31% complete, ETA 03:23:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 16, nValues = 3)

# Run progress: 19.38% complete, ETA 03:23:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 32, nValues = 2)

# Run progress: 19.44% complete, ETA 03:23:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 32, nValues = 3)

# Run progress: 19.51% complete, ETA 03:23:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [0.001, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 64, nValues = 2)

# Run progress: 19.58% complete, ETA 03:23:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.010 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.008, 0.010, 0.013), stdev = 0.003
  CI (99.9%): [? 0, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 64, nValues = 3)

# Run progress: 19.65% complete, ETA 03:23:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.012 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.010, 0.012, 0.015), stdev = 0.003
  CI (99.9%): [0.002, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 128, nValues = 2)

# Run progress: 19.72% complete, ETA 03:22:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.026 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.023 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.018, 0.023, 0.028), stdev = 0.004
  CI (99.9%): [0.006, 0.039] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 128, nValues = 3)

# Run progress: 19.79% complete, ETA 03:22:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.035 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.027 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.021, 0.027, 0.035), stdev = 0.006
  CI (99.9%): [0.004, 0.049] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 256, nValues = 2)

# Run progress: 19.86% complete, ETA 03:22:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.044 ms/op
# Warmup Iteration   2: 0.041 ms/op
# Warmup Iteration   3: 0.040 ms/op
# Warmup Iteration   4: 0.041 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: 0.040 ms/op
Iteration   2: 0.041 ms/op
Iteration   3: 0.050 ms/op
Iteration   4: 0.074 ms/op
Iteration   5: 0.060 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.053 ±(99.9%) 0.055 ms/op [Average]
  (min, avg, max) = (0.040, 0.053, 0.074), stdev = 0.014
  CI (99.9%): [? 0, 0.108] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 256, nValues = 3)

# Run progress: 19.93% complete, ETA 03:22:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.042 ms/op
# Warmup Iteration   3: 0.042 ms/op
# Warmup Iteration   4: 0.043 ms/op
# Warmup Iteration   5: 0.042 ms/op
Iteration   1: 0.042 ms/op
Iteration   2: 0.042 ms/op
Iteration   3: 0.050 ms/op
Iteration   4: 0.062 ms/op
Iteration   5: 0.061 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.051 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.042, 0.051, 0.062), stdev = 0.010
  CI (99.9%): [0.012, 0.090] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 512, nValues = 2)

# Run progress: 20.00% complete, ETA 03:22:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.082 ms/op
# Warmup Iteration   2: 0.078 ms/op
# Warmup Iteration   3: 0.077 ms/op
# Warmup Iteration   4: 0.077 ms/op
# Warmup Iteration   5: 0.077 ms/op
Iteration   1: 0.077 ms/op
Iteration   2: 0.077 ms/op
Iteration   3: 0.088 ms/op
Iteration   4: 0.129 ms/op
Iteration   5: 0.125 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.099 ±(99.9%) 0.099 ms/op [Average]
  (min, avg, max) = (0.077, 0.099, 0.129), stdev = 0.026
  CI (99.9%): [? 10??, 0.198] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 512, nValues = 3)

# Run progress: 20.07% complete, ETA 03:21:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.093 ms/op
# Warmup Iteration   2: 0.085 ms/op
# Warmup Iteration   3: 0.085 ms/op
# Warmup Iteration   4: 0.085 ms/op
# Warmup Iteration   5: 0.086 ms/op
Iteration   1: 0.085 ms/op
Iteration   2: 0.085 ms/op
Iteration   3: 0.096 ms/op
Iteration   4: 0.135 ms/op
Iteration   5: 0.110 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.102 ±(99.9%) 0.080 ms/op [Average]
  (min, avg, max) = (0.085, 0.102, 0.135), stdev = 0.021
  CI (99.9%): [0.022, 0.183] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 1024, nValues = 2)

# Run progress: 20.14% complete, ETA 03:21:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.170 ms/op
# Warmup Iteration   2: 0.159 ms/op
# Warmup Iteration   3: 0.159 ms/op
# Warmup Iteration   4: 0.159 ms/op
# Warmup Iteration   5: 0.160 ms/op
Iteration   1: 0.158 ms/op
Iteration   2: 0.160 ms/op
Iteration   3: 0.186 ms/op
Iteration   4: 0.236 ms/op
Iteration   5: 0.261 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.200 ±(99.9%) 0.177 ms/op [Average]
  (min, avg, max) = (0.158, 0.200, 0.261), stdev = 0.046
  CI (99.9%): [0.023, 0.377] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 1024, nValues = 3)

# Run progress: 20.21% complete, ETA 03:21:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.185 ms/op
# Warmup Iteration   2: 0.176 ms/op
# Warmup Iteration   3: 0.174 ms/op
# Warmup Iteration   4: 0.177 ms/op
# Warmup Iteration   5: 0.174 ms/op
Iteration   1: 0.174 ms/op
Iteration   2: 0.173 ms/op
Iteration   3: 0.207 ms/op
Iteration   4: 0.253 ms/op
Iteration   5: 0.253 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.212 ±(99.9%) 0.153 ms/op [Average]
  (min, avg, max) = (0.173, 0.212, 0.253), stdev = 0.040
  CI (99.9%): [0.058, 0.365] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 2048, nValues = 2)

# Run progress: 20.28% complete, ETA 03:21:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.337 ms/op
# Warmup Iteration   2: 0.325 ms/op
# Warmup Iteration   3: 0.324 ms/op
# Warmup Iteration   4: 0.325 ms/op
# Warmup Iteration   5: 0.326 ms/op
Iteration   1: 0.326 ms/op
Iteration   2: 0.325 ms/op
Iteration   3: 0.389 ms/op
Iteration   4: 0.542 ms/op
Iteration   5: 0.503 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.417 ±(99.9%) 0.387 ms/op [Average]
  (min, avg, max) = (0.325, 0.417, 0.542), stdev = 0.101
  CI (99.9%): [0.030, 0.804] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 2048, nValues = 3)

# Run progress: 20.35% complete, ETA 03:21:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.356 ms/op
# Warmup Iteration   2: 0.346 ms/op
# Warmup Iteration   3: 0.343 ms/op
# Warmup Iteration   4: 0.346 ms/op
# Warmup Iteration   5: 0.346 ms/op
Iteration   1: 0.344 ms/op
Iteration   2: 0.345 ms/op
Iteration   3: 0.412 ms/op
Iteration   4: 0.496 ms/op
Iteration   5: 0.481 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.415 ±(99.9%) 0.278 ms/op [Average]
  (min, avg, max) = (0.344, 0.415, 0.496), stdev = 0.072
  CI (99.9%): [0.137, 0.694] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 4096, nValues = 2)

# Run progress: 20.42% complete, ETA 03:21:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.684 ms/op
# Warmup Iteration   2: 0.651 ms/op
# Warmup Iteration   3: 0.651 ms/op
# Warmup Iteration   4: 0.654 ms/op
# Warmup Iteration   5: 0.651 ms/op
Iteration   1: 0.657 ms/op
Iteration   2: 0.646 ms/op
Iteration   3: 0.753 ms/op
Iteration   4: 1.136 ms/op
Iteration   5: 0.981 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.834 ±(99.9%) 0.831 ms/op [Average]
  (min, avg, max) = (0.646, 0.834, 1.136), stdev = 0.216
  CI (99.9%): [0.003, 1.666] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 4096, nValues = 3)

# Run progress: 20.49% complete, ETA 03:20:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.723 ms/op
# Warmup Iteration   2: 0.709 ms/op
# Warmup Iteration   3: 0.703 ms/op
# Warmup Iteration   4: 0.706 ms/op
# Warmup Iteration   5: 0.700 ms/op
Iteration   1: 0.705 ms/op
Iteration   2: 0.702 ms/op
Iteration   3: 0.826 ms/op
Iteration   4: 1.133 ms/op
Iteration   5: 1.122 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.898 ±(99.9%) 0.830 ms/op [Average]
  (min, avg, max) = (0.702, 0.898, 1.133), stdev = 0.216
  CI (99.9%): [0.067, 1.728] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 8192, nValues = 2)

# Run progress: 20.56% complete, ETA 03:20:41
# Fork: 1 of 1
# Warmup Iteration   1: 1.342 ms/op
# Warmup Iteration   2: 1.272 ms/op
# Warmup Iteration   3: 1.283 ms/op
# Warmup Iteration   4: 1.271 ms/op
# Warmup Iteration   5: 1.275 ms/op
Iteration   1: 1.274 ms/op
Iteration   2: 1.271 ms/op
Iteration   3: 1.445 ms/op
Iteration   4: 2.186 ms/op
Iteration   5: 1.979 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  1.631 ±(99.9%) 1.634 ms/op [Average]
  (min, avg, max) = (1.271, 1.631, 2.186), stdev = 0.424
  CI (99.9%): [? 0, 3.265] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 8192, nValues = 3)

# Run progress: 20.63% complete, ETA 03:20:30
# Fork: 1 of 1
# Warmup Iteration   1: 1.484 ms/op
# Warmup Iteration   2: 1.448 ms/op
# Warmup Iteration   3: 1.408 ms/op
# Warmup Iteration   4: 1.397 ms/op
# Warmup Iteration   5: 1.414 ms/op
Iteration   1: 1.411 ms/op
Iteration   2: 1.392 ms/op
Iteration   3: 1.684 ms/op
Iteration   4: 2.333 ms/op
Iteration   5: 2.288 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  1.822 ±(99.9%) 1.777 ms/op [Average]
  (min, avg, max) = (1.392, 1.822, 2.333), stdev = 0.461
  CI (99.9%): [0.045, 3.599] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 16384, nValues = 2)

# Run progress: 20.69% complete, ETA 03:20:19
# Fork: 1 of 1
# Warmup Iteration   1: 2.706 ms/op
# Warmup Iteration   2: 2.591 ms/op
# Warmup Iteration   3: 2.613 ms/op
# Warmup Iteration   4: 2.584 ms/op
# Warmup Iteration   5: 2.596 ms/op
Iteration   1: 2.603 ms/op
Iteration   2: 2.597 ms/op
Iteration   3: 3.077 ms/op
Iteration   4: 3.745 ms/op
Iteration   5: 3.888 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  3.182 ±(99.9%) 2.361 ms/op [Average]
  (min, avg, max) = (2.597, 3.182, 3.888), stdev = 0.613
  CI (99.9%): [0.822, 5.543] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 32, nPut = 16384, nValues = 3)

# Run progress: 20.76% complete, ETA 03:20:09
# Fork: 1 of 1
# Warmup Iteration   1: 2.949 ms/op
# Warmup Iteration   2: 2.808 ms/op
# Warmup Iteration   3: 2.839 ms/op
# Warmup Iteration   4: 2.850 ms/op
# Warmup Iteration   5: 2.731 ms/op
Iteration   1: 2.771 ms/op
Iteration   2: 2.844 ms/op
Iteration   3: 3.302 ms/op
Iteration   4: 4.869 ms/op
Iteration   5: 4.347 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  3.627 ±(99.9%) 3.609 ms/op [Average]
  (min, avg, max) = (2.771, 3.627, 4.869), stdev = 0.937
  CI (99.9%): [0.018, 7.235] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 1, nValues = 2)

# Run progress: 20.83% complete, ETA 03:19:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 1, nValues = 3)

# Run progress: 20.90% complete, ETA 03:19:47
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 2, nValues = 2)

# Run progress: 20.97% complete, ETA 03:19:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 2, nValues = 3)

# Run progress: 21.04% complete, ETA 03:19:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 4, nValues = 2)

# Run progress: 21.11% complete, ETA 03:19:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 4, nValues = 3)

# Run progress: 21.18% complete, ETA 03:19:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 8, nValues = 2)

# Run progress: 21.25% complete, ETA 03:18:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 8, nValues = 3)

# Run progress: 21.32% complete, ETA 03:18:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 16, nValues = 2)

# Run progress: 21.39% complete, ETA 03:18:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 16, nValues = 3)

# Run progress: 21.46% complete, ETA 03:18:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 32, nValues = 2)

# Run progress: 21.53% complete, ETA 03:18:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.006 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 32, nValues = 3)

# Run progress: 21.60% complete, ETA 03:18:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.009 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.012), stdev = 0.002
  CI (99.9%): [? 0, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 64, nValues = 2)

# Run progress: 21.67% complete, ETA 03:17:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.016 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.021), stdev = 0.004
  CI (99.9%): [? 0, 0.032] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 64, nValues = 3)

# Run progress: 21.74% complete, ETA 03:17:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.029 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.023 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.018, 0.023, 0.029), stdev = 0.006
  CI (99.9%): [? 10?³, 0.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 128, nValues = 2)

# Run progress: 21.81% complete, ETA 03:17:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.037 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.032 ms/op
# Warmup Iteration   4: 0.031 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.054 ms/op
Iteration   5: 0.051 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.041 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.031, 0.041, 0.054), stdev = 0.011
  CI (99.9%): [? 0, 0.082] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 128, nValues = 3)

# Run progress: 21.88% complete, ETA 03:17:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
# Warmup Iteration   2: 0.039 ms/op
# Warmup Iteration   3: 0.039 ms/op
# Warmup Iteration   4: 0.039 ms/op
# Warmup Iteration   5: 0.039 ms/op
Iteration   1: 0.039 ms/op
Iteration   2: 0.039 ms/op
Iteration   3: 0.046 ms/op
Iteration   4: 0.055 ms/op
Iteration   5: 0.067 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.049 ±(99.9%) 0.046 ms/op [Average]
  (min, avg, max) = (0.039, 0.049, 0.067), stdev = 0.012
  CI (99.9%): [0.003, 0.095] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 256, nValues = 2)

# Run progress: 21.94% complete, ETA 03:17:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.082 ms/op
# Warmup Iteration   2: 0.071 ms/op
# Warmup Iteration   3: 0.071 ms/op
# Warmup Iteration   4: 0.071 ms/op
# Warmup Iteration   5: 0.070 ms/op
Iteration   1: 0.070 ms/op
Iteration   2: 0.071 ms/op
Iteration   3: 0.088 ms/op
Iteration   4: 0.120 ms/op
Iteration   5: 0.115 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.093 ±(99.9%) 0.091 ms/op [Average]
  (min, avg, max) = (0.070, 0.093, 0.120), stdev = 0.024
  CI (99.9%): [0.002, 0.184] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 256, nValues = 3)

# Run progress: 22.01% complete, ETA 03:16:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.093 ms/op
# Warmup Iteration   2: 0.080 ms/op
# Warmup Iteration   3: 0.078 ms/op
# Warmup Iteration   4: 0.081 ms/op
# Warmup Iteration   5: 0.079 ms/op
Iteration   1: 0.078 ms/op
Iteration   2: 0.079 ms/op
Iteration   3: 0.097 ms/op
Iteration   4: 0.115 ms/op
Iteration   5: 0.134 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.101 ±(99.9%) 0.093 ms/op [Average]
  (min, avg, max) = (0.078, 0.101, 0.134), stdev = 0.024
  CI (99.9%): [0.008, 0.194] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 512, nValues = 2)

# Run progress: 22.08% complete, ETA 03:16:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.174 ms/op
# Warmup Iteration   2: 0.157 ms/op
# Warmup Iteration   3: 0.153 ms/op
# Warmup Iteration   4: 0.152 ms/op
# Warmup Iteration   5: 0.152 ms/op
Iteration   1: 0.153 ms/op
Iteration   2: 0.153 ms/op
Iteration   3: 0.182 ms/op
Iteration   4: 0.255 ms/op
Iteration   5: 0.244 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.197 ±(99.9%) 0.190 ms/op [Average]
  (min, avg, max) = (0.153, 0.197, 0.255), stdev = 0.049
  CI (99.9%): [0.008, 0.387] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 512, nValues = 3)

# Run progress: 22.15% complete, ETA 03:16:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.190 ms/op
# Warmup Iteration   2: 0.166 ms/op
# Warmup Iteration   3: 0.165 ms/op
# Warmup Iteration   4: 0.164 ms/op
# Warmup Iteration   5: 0.164 ms/op
Iteration   1: 0.164 ms/op
Iteration   2: 0.165 ms/op
Iteration   3: 0.202 ms/op
Iteration   4: 0.274 ms/op
Iteration   5: 0.256 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.212 ±(99.9%) 0.197 ms/op [Average]
  (min, avg, max) = (0.164, 0.212, 0.274), stdev = 0.051
  CI (99.9%): [0.016, 0.409] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 2)

# Run progress: 22.22% complete, ETA 03:16:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.367 ms/op
# Warmup Iteration   2: 0.326 ms/op
# Warmup Iteration   3: 0.320 ms/op
# Warmup Iteration   4: 0.311 ms/op
# Warmup Iteration   5: 0.312 ms/op
Iteration   1: 0.317 ms/op
Iteration   2: 0.321 ms/op
Iteration   3: 0.390 ms/op
Iteration   4: 0.558 ms/op
Iteration   5: 0.450 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.407 ±(99.9%) 0.386 ms/op [Average]
  (min, avg, max) = (0.317, 0.407, 0.558), stdev = 0.100
  CI (99.9%): [0.021, 0.794] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 3)

# Run progress: 22.29% complete, ETA 03:16:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.411 ms/op
# Warmup Iteration   2: 0.378 ms/op
# Warmup Iteration   3: 0.372 ms/op
# Warmup Iteration   4: 0.376 ms/op
# Warmup Iteration   5: 0.368 ms/op
Iteration   1: 0.371 ms/op
Iteration   2: 0.375 ms/op
Iteration   3: 0.423 ms/op
Iteration   4: 0.613 ms/op
Iteration   5: 0.588 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.474 ±(99.9%) 0.453 ms/op [Average]
  (min, avg, max) = (0.371, 0.474, 0.613), stdev = 0.118
  CI (99.9%): [0.021, 0.927] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 2)

# Run progress: 22.36% complete, ETA 03:16:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.805 ms/op
# Warmup Iteration   2: 0.719 ms/op
# Warmup Iteration   3: 0.725 ms/op
# Warmup Iteration   4: 0.714 ms/op
# Warmup Iteration   5: 0.704 ms/op
Iteration   1: 0.707 ms/op
Iteration   2: 0.716 ms/op
Iteration   3: 0.843 ms/op
Iteration   4: 1.131 ms/op
Iteration   5: 1.102 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.900 ±(99.9%) 0.791 ms/op [Average]
  (min, avg, max) = (0.707, 0.900, 1.131), stdev = 0.205
  CI (99.9%): [0.109, 1.690] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 3)

# Run progress: 22.43% complete, ETA 03:15:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.881 ms/op
# Warmup Iteration   2: 0.812 ms/op
# Warmup Iteration   3: 0.824 ms/op
# Warmup Iteration   4: 0.811 ms/op
# Warmup Iteration   5: 0.796 ms/op
Iteration   1: 0.801 ms/op
Iteration   2: 0.789 ms/op
Iteration   3: 0.939 ms/op
Iteration   4: 1.292 ms/op
Iteration   5: 1.257 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  1.016 ±(99.9%) 0.939 ms/op [Average]
  (min, avg, max) = (0.789, 1.016, 1.292), stdev = 0.244
  CI (99.9%): [0.076, 1.955] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 2)

# Run progress: 22.50% complete, ETA 03:15:41
# Fork: 1 of 1
# Warmup Iteration   1: 1.718 ms/op
# Warmup Iteration   2: 1.575 ms/op
# Warmup Iteration   3: 1.599 ms/op
# Warmup Iteration   4: 1.610 ms/op
# Warmup Iteration   5: 1.599 ms/op
Iteration   1: 1.570 ms/op
Iteration   2: 1.567 ms/op
Iteration   3: 1.778 ms/op
Iteration   4: 2.544 ms/op
Iteration   5: 2.574 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  2.006 ±(99.9%) 1.970 ms/op [Average]
  (min, avg, max) = (1.567, 2.006, 2.574), stdev = 0.512
  CI (99.9%): [0.037, 3.976] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 3)

# Run progress: 22.57% complete, ETA 03:15:31
# Fork: 1 of 1
# Warmup Iteration   1: 1.864 ms/op
# Warmup Iteration   2: 1.695 ms/op
# Warmup Iteration   3: 1.722 ms/op
# Warmup Iteration   4: 1.728 ms/op
# Warmup Iteration   5: 1.712 ms/op
Iteration   1: 1.689 ms/op
Iteration   2: 1.669 ms/op
Iteration   3: 2.040 ms/op
Iteration   4: 2.592 ms/op
Iteration   5: 2.493 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  2.096 ±(99.9%) 1.672 ms/op [Average]
  (min, avg, max) = (1.669, 2.096, 2.592), stdev = 0.434
  CI (99.9%): [0.424, 3.768] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 2)

# Run progress: 22.64% complete, ETA 03:15:20
# Fork: 1 of 1
# Warmup Iteration   1: 3.601 ms/op
# Warmup Iteration   2: 3.303 ms/op
# Warmup Iteration   3: 3.268 ms/op
# Warmup Iteration   4: 3.122 ms/op
# Warmup Iteration   5: 3.050 ms/op
Iteration   1: 3.042 ms/op
Iteration   2: 3.041 ms/op
Iteration   3: 3.575 ms/op
Iteration   4: 4.771 ms/op
Iteration   5: 4.968 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  3.879 ±(99.9%) 3.591 ms/op [Average]
  (min, avg, max) = (3.041, 3.879, 4.968), stdev = 0.933
  CI (99.9%): [0.288, 7.471] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 3)

# Run progress: 22.71% complete, ETA 03:15:09
# Fork: 1 of 1
# Warmup Iteration   1: 4.105 ms/op
# Warmup Iteration   2: 3.453 ms/op
# Warmup Iteration   3: 3.479 ms/op
# Warmup Iteration   4: 3.463 ms/op
# Warmup Iteration   5: 3.547 ms/op
Iteration   1: 3.488 ms/op
Iteration   2: 3.478 ms/op
Iteration   3: 4.050 ms/op
Iteration   4: 5.458 ms/op
Iteration   5: 5.727 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  4.440 ±(99.9%) 4.163 ms/op [Average]
  (min, avg, max) = (3.478, 4.440, 5.727), stdev = 1.081
  CI (99.9%): [0.277, 8.603] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 2)

# Run progress: 22.78% complete, ETA 03:14:59
# Fork: 1 of 1
# Warmup Iteration   1: 8.078 ms/op
# Warmup Iteration   2: 7.485 ms/op
# Warmup Iteration   3: 7.521 ms/op
# Warmup Iteration   4: 7.625 ms/op
# Warmup Iteration   5: 7.605 ms/op
Iteration   1: 7.529 ms/op
Iteration   2: 7.407 ms/op
Iteration   3: 8.638 ms/op
Iteration   4: 11.344 ms/op
Iteration   5: 11.010 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  9.186 ±(99.9%) 7.254 ms/op [Average]
  (min, avg, max) = (7.407, 9.186, 11.344), stdev = 1.884
  CI (99.9%): [1.932, 16.440] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 3)

# Run progress: 22.85% complete, ETA 03:14:48
# Fork: 1 of 1
# Warmup Iteration   1: 9.176 ms/op
# Warmup Iteration   2: 8.662 ms/op
# Warmup Iteration   3: 8.687 ms/op
# Warmup Iteration   4: 8.827 ms/op
# Warmup Iteration   5: 8.786 ms/op
Iteration   1: 8.681 ms/op
Iteration   2: 8.686 ms/op
Iteration   3: 10.455 ms/op
Iteration   4: 11.282 ms/op
Iteration   5: 9.067 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  9.634 ±(99.9%) 4.523 ms/op [Average]
  (min, avg, max) = (8.681, 9.634, 11.282), stdev = 1.175
  CI (99.9%): [5.111, 14.157] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 1, nValues = 2)

# Run progress: 22.92% complete, ETA 03:14:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 1, nValues = 3)

# Run progress: 22.99% complete, ETA 03:14:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 2, nValues = 2)

# Run progress: 23.06% complete, ETA 03:14:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 2, nValues = 3)

# Run progress: 23.13% complete, ETA 03:14:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 4, nValues = 2)

# Run progress: 23.19% complete, ETA 03:13:55
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 4, nValues = 3)

# Run progress: 23.26% complete, ETA 03:13:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 8, nValues = 2)

# Run progress: 23.33% complete, ETA 03:13:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 8, nValues = 3)

# Run progress: 23.40% complete, ETA 03:13:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 16, nValues = 2)

# Run progress: 23.47% complete, ETA 03:13:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10?³, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 16, nValues = 3)

# Run progress: 23.54% complete, ETA 03:13:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 32, nValues = 2)

# Run progress: 23.61% complete, ETA 03:12:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.006 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.001, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 32, nValues = 3)

# Run progress: 23.68% complete, ETA 03:12:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.008 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.011), stdev = 0.002
  CI (99.9%): [? 10?³, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 64, nValues = 2)

# Run progress: 23.75% complete, ETA 03:12:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.018 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.015, 0.018, 0.023), stdev = 0.004
  CI (99.9%): [0.002, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 64, nValues = 3)

# Run progress: 23.82% complete, ETA 03:12:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.018 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.029 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.024 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.018, 0.024, 0.032), stdev = 0.006
  CI (99.9%): [? 0, 0.048] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 128, nValues = 2)

# Run progress: 23.89% complete, ETA 03:12:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.040 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.033 ms/op
# Warmup Iteration   4: 0.033 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.038 ms/op
Iteration   4: 0.048 ms/op
Iteration   5: 0.053 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.040 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.032, 0.040, 0.053), stdev = 0.009
  CI (99.9%): [0.004, 0.077] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 128, nValues = 3)

# Run progress: 23.96% complete, ETA 03:11:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.040 ms/op
# Warmup Iteration   3: 0.040 ms/op
# Warmup Iteration   4: 0.040 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: 0.040 ms/op
Iteration   2: 0.040 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.066 ms/op
Iteration   5: 0.064 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.052 ±(99.9%) 0.049 ms/op [Average]
  (min, avg, max) = (0.040, 0.052, 0.066), stdev = 0.013
  CI (99.9%): [0.003, 0.100] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 256, nValues = 2)

# Run progress: 24.03% complete, ETA 03:11:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.083 ms/op
# Warmup Iteration   2: 0.070 ms/op
# Warmup Iteration   3: 0.071 ms/op
# Warmup Iteration   4: 0.070 ms/op
# Warmup Iteration   5: 0.071 ms/op
Iteration   1: 0.070 ms/op
Iteration   2: 0.071 ms/op
Iteration   3: 0.083 ms/op
Iteration   4: 0.111 ms/op
Iteration   5: 0.101 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.087 ±(99.9%) 0.070 ms/op [Average]
  (min, avg, max) = (0.070, 0.087, 0.111), stdev = 0.018
  CI (99.9%): [0.017, 0.157] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 256, nValues = 3)

# Run progress: 24.10% complete, ETA 03:11:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.093 ms/op
# Warmup Iteration   2: 0.079 ms/op
# Warmup Iteration   3: 0.078 ms/op
# Warmup Iteration   4: 0.078 ms/op
# Warmup Iteration   5: 0.079 ms/op
Iteration   1: 0.081 ms/op
Iteration   2: 0.079 ms/op
Iteration   3: 0.093 ms/op
Iteration   4: 0.116 ms/op
Iteration   5: 0.120 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.098 ±(99.9%) 0.075 ms/op [Average]
  (min, avg, max) = (0.079, 0.098, 0.120), stdev = 0.019
  CI (99.9%): [0.023, 0.172] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 512, nValues = 2)

# Run progress: 24.17% complete, ETA 03:11:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.169 ms/op
# Warmup Iteration   2: 0.148 ms/op
# Warmup Iteration   3: 0.147 ms/op
# Warmup Iteration   4: 0.149 ms/op
# Warmup Iteration   5: 0.146 ms/op
Iteration   1: 0.147 ms/op
Iteration   2: 0.146 ms/op
Iteration   3: 0.164 ms/op
Iteration   4: 0.228 ms/op
Iteration   5: 0.264 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.190 ±(99.9%) 0.204 ms/op [Average]
  (min, avg, max) = (0.146, 0.190, 0.264), stdev = 0.053
  CI (99.9%): [? 0, 0.394] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 512, nValues = 3)

# Run progress: 24.24% complete, ETA 03:11:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.203 ms/op
# Warmup Iteration   2: 0.173 ms/op
# Warmup Iteration   3: 0.173 ms/op
# Warmup Iteration   4: 0.173 ms/op
# Warmup Iteration   5: 0.175 ms/op
Iteration   1: 0.172 ms/op
Iteration   2: 0.180 ms/op
Iteration   3: 0.215 ms/op
Iteration   4: 0.292 ms/op
Iteration   5: 0.303 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.232 ±(99.9%) 0.237 ms/op [Average]
  (min, avg, max) = (0.172, 0.232, 0.303), stdev = 0.062
  CI (99.9%): [? 0, 0.470] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 2)

# Run progress: 24.31% complete, ETA 03:11:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.379 ms/op
# Warmup Iteration   2: 0.335 ms/op
# Warmup Iteration   3: 0.390 ms/op
# Warmup Iteration   4: 0.367 ms/op
# Warmup Iteration   5: 0.330 ms/op
Iteration   1: 0.336 ms/op
Iteration   2: 0.324 ms/op
Iteration   3: 0.411 ms/op
Iteration   4: 0.552 ms/op
Iteration   5: 0.581 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.441 ±(99.9%) 0.462 ms/op [Average]
  (min, avg, max) = (0.324, 0.441, 0.581), stdev = 0.120
  CI (99.9%): [? 0, 0.903] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 3)

# Run progress: 24.38% complete, ETA 03:10:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.445 ms/op
# Warmup Iteration   2: 0.396 ms/op
# Warmup Iteration   3: 0.387 ms/op
# Warmup Iteration   4: 0.385 ms/op
# Warmup Iteration   5: 0.376 ms/op
Iteration   1: 0.382 ms/op
Iteration   2: 0.376 ms/op
Iteration   3: 0.449 ms/op
Iteration   4: 0.594 ms/op
Iteration   5: 0.693 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  0.499 ±(99.9%) 0.538 ms/op [Average]
  (min, avg, max) = (0.376, 0.499, 0.693), stdev = 0.140
  CI (99.9%): [? 0, 1.036] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 2)

# Run progress: 24.44% complete, ETA 03:10:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.873 ms/op
# Warmup Iteration   2: 0.796 ms/op
# Warmup Iteration   3: 0.769 ms/op
# Warmup Iteration   4: 0.771 ms/op
# Warmup Iteration   5: 0.805 ms/op
Iteration   1: 0.865 ms/op
Iteration   2: 0.820 ms/op
Iteration   3: 0.989 ms/op
Iteration   4: 1.380 ms/op
Iteration   5: 1.380 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  1.087 ±(99.9%) 1.058 ms/op [Average]
  (min, avg, max) = (0.820, 1.087, 1.380), stdev = 0.275
  CI (99.9%): [0.029, 2.144] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 3)

# Run progress: 24.51% complete, ETA 03:10:33
# Fork: 1 of 1
# Warmup Iteration   1: 1.130 ms/op
# Warmup Iteration   2: 0.948 ms/op
# Warmup Iteration   3: 1.037 ms/op
# Warmup Iteration   4: 1.198 ms/op
# Warmup Iteration   5: 0.996 ms/op
Iteration   1: 0.966 ms/op
Iteration   2: 0.990 ms/op
Iteration   3: 1.081 ms/op
Iteration   4: 1.467 ms/op
Iteration   5: 1.368 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  1.174 ±(99.9%) 0.880 ms/op [Average]
  (min, avg, max) = (0.966, 1.174, 1.467), stdev = 0.229
  CI (99.9%): [0.294, 2.055] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 2)

# Run progress: 24.58% complete, ETA 03:10:22
# Fork: 1 of 1
# Warmup Iteration   1: 2.361 ms/op
# Warmup Iteration   2: 2.098 ms/op
# Warmup Iteration   3: 1.964 ms/op
# Warmup Iteration   4: 1.975 ms/op
# Warmup Iteration   5: 1.877 ms/op
Iteration   1: 1.830 ms/op
Iteration   2: 1.860 ms/op
Iteration   3: 2.246 ms/op
Iteration   4: 3.016 ms/op
Iteration   5: 3.177 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  2.426 ±(99.9%) 2.451 ms/op [Average]
  (min, avg, max) = (1.830, 2.426, 3.177), stdev = 0.637
  CI (99.9%): [? 0, 4.877] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 3)

# Run progress: 24.65% complete, ETA 03:10:12
# Fork: 1 of 1
# Warmup Iteration   1: 2.489 ms/op
# Warmup Iteration   2: 2.195 ms/op
# Warmup Iteration   3: 2.140 ms/op
# Warmup Iteration   4: 2.227 ms/op
# Warmup Iteration   5: 2.171 ms/op
Iteration   1: 2.171 ms/op
Iteration   2: 2.181 ms/op
Iteration   3: 2.618 ms/op
Iteration   4: 3.434 ms/op
Iteration   5: 3.638 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  2.808 ±(99.9%) 2.665 ms/op [Average]
  (min, avg, max) = (2.171, 2.808, 3.638), stdev = 0.692
  CI (99.9%): [0.143, 5.473] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 2)

# Run progress: 24.72% complete, ETA 03:10:01
# Fork: 1 of 1
# Warmup Iteration   1: 4.586 ms/op
# Warmup Iteration   2: 4.143 ms/op
# Warmup Iteration   3: 4.061 ms/op
# Warmup Iteration   4: 4.113 ms/op
# Warmup Iteration   5: 4.120 ms/op
Iteration   1: 4.057 ms/op
Iteration   2: 4.132 ms/op
Iteration   3: 5.072 ms/op
Iteration   4: 6.047 ms/op
Iteration   5: 6.949 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  5.251 ±(99.9%) 4.805 ms/op [Average]
  (min, avg, max) = (4.057, 5.251, 6.949), stdev = 1.248
  CI (99.9%): [0.447, 10.056] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 3)

# Run progress: 24.79% complete, ETA 03:09:51
# Fork: 1 of 1
# Warmup Iteration   1: 4.867 ms/op
# Warmup Iteration   2: 4.539 ms/op
# Warmup Iteration   3: 4.474 ms/op
# Warmup Iteration   4: 4.393 ms/op
# Warmup Iteration   5: 4.369 ms/op
Iteration   1: 4.457 ms/op
Iteration   2: 4.397 ms/op
Iteration   3: 5.110 ms/op
Iteration   4: 7.126 ms/op
Iteration   5: 7.287 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  5.675 ±(99.9%) 5.493 ms/op [Average]
  (min, avg, max) = (4.397, 5.675, 7.287), stdev = 1.426
  CI (99.9%): [0.182, 11.168] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 2)

# Run progress: 24.86% complete, ETA 03:09:40
# Fork: 1 of 1
# Warmup Iteration   1: 9.410 ms/op
# Warmup Iteration   2: 8.622 ms/op
# Warmup Iteration   3: 8.531 ms/op
# Warmup Iteration   4: 8.279 ms/op
# Warmup Iteration   5: 8.311 ms/op
Iteration   1: 8.330 ms/op
Iteration   2: 8.384 ms/op
Iteration   3: 10.298 ms/op
Iteration   4: 15.666 ms/op
Iteration   5: 15.488 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  11.633 ±(99.9%) 14.197 ms/op [Average]
  (min, avg, max) = (8.330, 11.633, 15.666), stdev = 3.687
  CI (99.9%): [? 0, 25.830] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 3)

# Run progress: 24.93% complete, ETA 03:09:30
# Fork: 1 of 1
# Warmup Iteration   1: 9.692 ms/op
# Warmup Iteration   2: 8.773 ms/op
# Warmup Iteration   3: 8.360 ms/op
# Warmup Iteration   4: 8.227 ms/op
# Warmup Iteration   5: 8.246 ms/op
Iteration   1: 8.199 ms/op
Iteration   2: 8.449 ms/op
Iteration   3: 10.195 ms/op
Iteration   4: 14.286 ms/op
Iteration   5: 12.720 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmark":
  10.770 ±(99.9%) 10.278 ms/op [Average]
  (min, avg, max) = (8.199, 10.770, 14.286), stdev = 2.669
  CI (99.9%): [0.492, 21.048] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 1, nValues = 2)

# Run progress: 25.00% complete, ETA 03:09:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 1, nValues = 3)

# Run progress: 25.07% complete, ETA 03:09:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 2, nValues = 2)

# Run progress: 25.14% complete, ETA 03:08:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 2, nValues = 3)

# Run progress: 25.21% complete, ETA 03:08:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 4, nValues = 2)

# Run progress: 25.28% complete, ETA 03:08:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 4, nValues = 3)

# Run progress: 25.35% complete, ETA 03:08:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 8, nValues = 2)

# Run progress: 25.42% complete, ETA 03:08:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 8, nValues = 3)

# Run progress: 25.49% complete, ETA 03:08:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 10??, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 16, nValues = 2)

# Run progress: 25.56% complete, ETA 03:07:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.009 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.012), stdev = 0.002
  CI (99.9%): [0.001, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 16, nValues = 3)

# Run progress: 25.62% complete, ETA 03:07:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.010 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.007, 0.010, 0.012), stdev = 0.002
  CI (99.9%): [0.001, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 32, nValues = 2)

# Run progress: 25.69% complete, ETA 03:07:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.019 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.015, 0.019, 0.023), stdev = 0.004
  CI (99.9%): [0.004, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 32, nValues = 3)

# Run progress: 25.76% complete, ETA 03:07:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.018 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.015, 0.018, 0.023), stdev = 0.004
  CI (99.9%): [0.003, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 64, nValues = 2)

# Run progress: 25.83% complete, ETA 03:07:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.031 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.030 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.033 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.049 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.037 ±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (0.029, 0.037, 0.049), stdev = 0.010
  CI (99.9%): [? 10??, 0.074] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 64, nValues = 3)

# Run progress: 25.90% complete, ETA 03:07:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.035 ms/op
Iteration   4: 0.042 ms/op
Iteration   5: 0.047 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.036 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.028, 0.036, 0.047), stdev = 0.008
  CI (99.9%): [0.005, 0.068] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 128, nValues = 2)

# Run progress: 25.97% complete, ETA 03:06:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.087 ms/op
# Warmup Iteration   2: 0.076 ms/op
# Warmup Iteration   3: 0.072 ms/op
# Warmup Iteration   4: 0.069 ms/op
# Warmup Iteration   5: 0.069 ms/op
Iteration   1: 0.068 ms/op
Iteration   2: 0.068 ms/op
Iteration   3: 0.090 ms/op
Iteration   4: 0.126 ms/op
Iteration   5: 0.129 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.096 ±(99.9%) 0.115 ms/op [Average]
  (min, avg, max) = (0.068, 0.096, 0.129), stdev = 0.030
  CI (99.9%): [? 0, 0.211] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 128, nValues = 3)

# Run progress: 26.04% complete, ETA 03:06:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.096 ms/op
# Warmup Iteration   2: 0.087 ms/op
# Warmup Iteration   3: 0.084 ms/op
# Warmup Iteration   4: 0.088 ms/op
# Warmup Iteration   5: 0.079 ms/op
Iteration   1: 0.075 ms/op
Iteration   2: 0.072 ms/op
Iteration   3: 0.093 ms/op
Iteration   4: 0.118 ms/op
Iteration   5: 0.118 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.095 ±(99.9%) 0.086 ms/op [Average]
  (min, avg, max) = (0.072, 0.095, 0.118), stdev = 0.022
  CI (99.9%): [0.009, 0.181] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 256, nValues = 2)

# Run progress: 26.11% complete, ETA 03:06:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.155 ms/op
# Warmup Iteration   2: 0.151 ms/op
# Warmup Iteration   3: 0.162 ms/op
# Warmup Iteration   4: 0.148 ms/op
# Warmup Iteration   5: 0.139 ms/op
Iteration   1: 0.165 ms/op
Iteration   2: 0.145 ms/op
Iteration   3: 0.164 ms/op
Iteration   4: 0.242 ms/op
Iteration   5: 0.234 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.190 ±(99.9%) 0.172 ms/op [Average]
  (min, avg, max) = (0.145, 0.190, 0.242), stdev = 0.045
  CI (99.9%): [0.018, 0.362] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 256, nValues = 3)

# Run progress: 26.18% complete, ETA 03:06:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.151 ms/op
# Warmup Iteration   2: 0.142 ms/op
# Warmup Iteration   3: 0.144 ms/op
# Warmup Iteration   4: 0.152 ms/op
# Warmup Iteration   5: 0.144 ms/op
Iteration   1: 0.139 ms/op
Iteration   2: 0.138 ms/op
Iteration   3: 0.179 ms/op
Iteration   4: 0.233 ms/op
Iteration   5: 0.237 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.185 ±(99.9%) 0.188 ms/op [Average]
  (min, avg, max) = (0.138, 0.185, 0.237), stdev = 0.049
  CI (99.9%): [? 0, 0.373] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 512, nValues = 2)

# Run progress: 26.25% complete, ETA 03:06:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.251 ms/op
# Warmup Iteration   2: 0.262 ms/op
# Warmup Iteration   3: 0.239 ms/op
# Warmup Iteration   4: 0.259 ms/op
# Warmup Iteration   5: 0.261 ms/op
Iteration   1: 0.223 ms/op
Iteration   2: 0.218 ms/op
Iteration   3: 0.265 ms/op
Iteration   4: 0.336 ms/op
Iteration   5: 0.371 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.283 ±(99.9%) 0.263 ms/op [Average]
  (min, avg, max) = (0.218, 0.283, 0.371), stdev = 0.068
  CI (99.9%): [0.020, 0.545] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 512, nValues = 3)

# Run progress: 26.32% complete, ETA 03:05:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.300 ms/op
# Warmup Iteration   2: 0.283 ms/op
# Warmup Iteration   3: 0.284 ms/op
# Warmup Iteration   4: 0.283 ms/op
# Warmup Iteration   5: 0.283 ms/op
Iteration   1: 0.283 ms/op
Iteration   2: 0.282 ms/op
Iteration   3: 0.306 ms/op
Iteration   4: 0.502 ms/op
Iteration   5: 0.497 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.374 ±(99.9%) 0.443 ms/op [Average]
  (min, avg, max) = (0.282, 0.374, 0.502), stdev = 0.115
  CI (99.9%): [? 0, 0.817] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 1024, nValues = 2)

# Run progress: 26.39% complete, ETA 03:05:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.596 ms/op
# Warmup Iteration   2: 0.561 ms/op
# Warmup Iteration   3: 0.554 ms/op
# Warmup Iteration   4: 0.552 ms/op
# Warmup Iteration   5: 0.551 ms/op
Iteration   1: 0.551 ms/op
Iteration   2: 0.560 ms/op
Iteration   3: 0.626 ms/op
Iteration   4: 0.900 ms/op
Iteration   5: 0.926 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.713 ±(99.9%) 0.715 ms/op [Average]
  (min, avg, max) = (0.551, 0.713, 0.926), stdev = 0.186
  CI (99.9%): [? 0, 1.428] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 1024, nValues = 3)

# Run progress: 26.46% complete, ETA 03:05:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.571 ms/op
# Warmup Iteration   2: 0.542 ms/op
# Warmup Iteration   3: 0.539 ms/op
# Warmup Iteration   4: 0.541 ms/op
# Warmup Iteration   5: 0.539 ms/op
Iteration   1: 0.539 ms/op
Iteration   2: 0.543 ms/op
Iteration   3: 0.664 ms/op
Iteration   4: 0.926 ms/op
Iteration   5: 0.887 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.712 ±(99.9%) 0.713 ms/op [Average]
  (min, avg, max) = (0.539, 0.712, 0.926), stdev = 0.185
  CI (99.9%): [? 0, 1.425] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 2048, nValues = 2)

# Run progress: 26.53% complete, ETA 03:05:27
# Fork: 1 of 1
# Warmup Iteration   1: 1.210 ms/op
# Warmup Iteration   2: 1.124 ms/op
# Warmup Iteration   3: 1.128 ms/op
# Warmup Iteration   4: 1.117 ms/op
# Warmup Iteration   5: 1.121 ms/op
Iteration   1: 1.137 ms/op
Iteration   2: 1.123 ms/op
Iteration   3: 1.319 ms/op
Iteration   4: 1.802 ms/op
Iteration   5: 1.900 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  1.456 ±(99.9%) 1.426 ms/op [Average]
  (min, avg, max) = (1.123, 1.456, 1.900), stdev = 0.370
  CI (99.9%): [0.030, 2.882] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 2048, nValues = 3)

# Run progress: 26.60% complete, ETA 03:05:16
# Fork: 1 of 1
# Warmup Iteration   1: 1.166 ms/op
# Warmup Iteration   2: 1.110 ms/op
# Warmup Iteration   3: 1.141 ms/op
# Warmup Iteration   4: 1.098 ms/op
# Warmup Iteration   5: 1.101 ms/op
Iteration   1: 1.095 ms/op
Iteration   2: 1.109 ms/op
Iteration   3: 1.300 ms/op
Iteration   4: 1.723 ms/op
Iteration   5: 1.676 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  1.381 ±(99.9%) 1.165 ms/op [Average]
  (min, avg, max) = (1.095, 1.381, 1.723), stdev = 0.303
  CI (99.9%): [0.216, 2.546] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 4096, nValues = 2)

# Run progress: 26.67% complete, ETA 03:05:06
# Fork: 1 of 1
# Warmup Iteration   1: 2.454 ms/op
# Warmup Iteration   2: 2.250 ms/op
# Warmup Iteration   3: 2.242 ms/op
# Warmup Iteration   4: 2.252 ms/op
# Warmup Iteration   5: 2.249 ms/op
Iteration   1: 2.254 ms/op
Iteration   2: 2.249 ms/op
Iteration   3: 2.628 ms/op
Iteration   4: 3.631 ms/op
Iteration   5: 3.544 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  2.861 ±(99.9%) 2.624 ms/op [Average]
  (min, avg, max) = (2.249, 2.861, 3.631), stdev = 0.681
  CI (99.9%): [0.237, 5.485] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 4096, nValues = 3)

# Run progress: 26.74% complete, ETA 03:04:55
# Fork: 1 of 1
# Warmup Iteration   1: 2.441 ms/op
# Warmup Iteration   2: 2.254 ms/op
# Warmup Iteration   3: 2.275 ms/op
# Warmup Iteration   4: 2.246 ms/op
# Warmup Iteration   5: 2.294 ms/op
Iteration   1: 2.254 ms/op
Iteration   2: 2.295 ms/op
Iteration   3: 2.811 ms/op
Iteration   4: 3.494 ms/op
Iteration   5: 3.946 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  2.960 ±(99.9%) 2.869 ms/op [Average]
  (min, avg, max) = (2.254, 2.960, 3.946), stdev = 0.745
  CI (99.9%): [0.091, 5.829] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 8192, nValues = 2)

# Run progress: 26.81% complete, ETA 03:04:45
# Fork: 1 of 1
# Warmup Iteration   1: 4.875 ms/op
# Warmup Iteration   2: 4.500 ms/op
# Warmup Iteration   3: 4.486 ms/op
# Warmup Iteration   4: 4.428 ms/op
# Warmup Iteration   5: 4.454 ms/op
Iteration   1: 4.485 ms/op
Iteration   2: 4.424 ms/op
Iteration   3: 5.395 ms/op
Iteration   4: 7.261 ms/op
Iteration   5: 6.750 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  5.663 ±(99.9%) 4.994 ms/op [Average]
  (min, avg, max) = (4.424, 5.663, 7.261), stdev = 1.297
  CI (99.9%): [0.669, 10.657] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 8192, nValues = 3)

# Run progress: 26.88% complete, ETA 03:04:34
# Fork: 1 of 1
# Warmup Iteration   1: 4.870 ms/op
# Warmup Iteration   2: 4.504 ms/op
# Warmup Iteration   3: 4.511 ms/op
# Warmup Iteration   4: 4.476 ms/op
# Warmup Iteration   5: 4.498 ms/op
Iteration   1: 4.577 ms/op
Iteration   2: 4.521 ms/op
Iteration   3: 5.785 ms/op
Iteration   4: 7.693 ms/op
Iteration   5: 7.598 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  6.035 ±(99.9%) 5.988 ms/op [Average]
  (min, avg, max) = (4.521, 6.035, 7.693), stdev = 1.555
  CI (99.9%): [0.047, 12.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 16384, nValues = 2)

# Run progress: 26.94% complete, ETA 03:04:24
# Fork: 1 of 1
# Warmup Iteration   1: 9.902 ms/op
# Warmup Iteration   2: 10.710 ms/op
# Warmup Iteration   3: 9.274 ms/op
# Warmup Iteration   4: 8.949 ms/op
# Warmup Iteration   5: 8.910 ms/op
Iteration   1: 8.969 ms/op
Iteration   2: 9.042 ms/op
Iteration   3: 12.190 ms/op
Iteration   4: 15.383 ms/op
Iteration   5: 15.729 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  12.263 ±(99.9%) 12.621 ms/op [Average]
  (min, avg, max) = (8.969, 12.263, 15.729), stdev = 3.278
  CI (99.9%): [? 0, 24.884] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 16384, nValues = 3)

# Run progress: 27.01% complete, ETA 03:04:13
# Fork: 1 of 1
# Warmup Iteration   1: 10.356 ms/op
# Warmup Iteration   2: 9.067 ms/op
# Warmup Iteration   3: 9.118 ms/op
# Warmup Iteration   4: 8.912 ms/op
# Warmup Iteration   5: 9.090 ms/op
Iteration   1: 9.199 ms/op
Iteration   2: 9.157 ms/op
Iteration   3: 12.080 ms/op
Iteration   4: 15.033 ms/op
Iteration   5: 15.345 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  12.163 ±(99.9%) 11.582 ms/op [Average]
  (min, avg, max) = (9.157, 12.163, 15.345), stdev = 3.008
  CI (99.9%): [0.581, 23.745] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 1, nValues = 2)

# Run progress: 27.08% complete, ETA 03:04:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.041 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.037 ms/op
Iteration   1: 0.037 ms/op
Iteration   2: 0.037 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.059 ms/op
Iteration   5: 0.062 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.048 ±(99.9%) 0.046 ms/op [Average]
  (min, avg, max) = (0.037, 0.048, 0.062), stdev = 0.012
  CI (99.9%): [0.002, 0.093] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 1, nValues = 3)

# Run progress: 27.15% complete, ETA 03:03:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.041 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.036 ms/op
Iteration   1: 0.036 ms/op
Iteration   2: 0.036 ms/op
Iteration   3: 0.043 ms/op
Iteration   4: 0.062 ms/op
Iteration   5: 0.065 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.049 ±(99.9%) 0.054 ms/op [Average]
  (min, avg, max) = (0.036, 0.049, 0.065), stdev = 0.014
  CI (99.9%): [? 0, 0.102] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 2, nValues = 2)

# Run progress: 27.22% complete, ETA 03:03:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.058 ms/op
# Warmup Iteration   2: 0.052 ms/op
# Warmup Iteration   3: 0.050 ms/op
# Warmup Iteration   4: 0.053 ms/op
# Warmup Iteration   5: 0.052 ms/op
Iteration   1: 0.050 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.064 ms/op
Iteration   4: 0.077 ms/op
Iteration   5: 0.080 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.064 ±(99.9%) 0.055 ms/op [Average]
  (min, avg, max) = (0.050, 0.064, 0.080), stdev = 0.014
  CI (99.9%): [0.009, 0.119] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 2, nValues = 3)

# Run progress: 27.29% complete, ETA 03:03:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.057 ms/op
# Warmup Iteration   2: 0.053 ms/op
# Warmup Iteration   3: 0.051 ms/op
# Warmup Iteration   4: 0.051 ms/op
# Warmup Iteration   5: 0.051 ms/op
Iteration   1: 0.051 ms/op
Iteration   2: 0.051 ms/op
Iteration   3: 0.062 ms/op
Iteration   4: 0.087 ms/op
Iteration   5: 0.083 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.067 ±(99.9%) 0.066 ms/op [Average]
  (min, avg, max) = (0.051, 0.067, 0.087), stdev = 0.017
  CI (99.9%): [0.001, 0.133] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 4, nValues = 2)

# Run progress: 27.36% complete, ETA 03:03:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.085 ms/op
# Warmup Iteration   2: 0.080 ms/op
# Warmup Iteration   3: 0.080 ms/op
# Warmup Iteration   4: 0.080 ms/op
# Warmup Iteration   5: 0.080 ms/op
Iteration   1: 0.080 ms/op
Iteration   2: 0.080 ms/op
Iteration   3: 0.094 ms/op
Iteration   4: 0.121 ms/op
Iteration   5: 0.116 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.098 ±(99.9%) 0.075 ms/op [Average]
  (min, avg, max) = (0.080, 0.098, 0.121), stdev = 0.020
  CI (99.9%): [0.023, 0.174] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 4, nValues = 3)

# Run progress: 27.43% complete, ETA 03:03:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.086 ms/op
# Warmup Iteration   2: 0.081 ms/op
# Warmup Iteration   3: 0.079 ms/op
# Warmup Iteration   4: 0.079 ms/op
# Warmup Iteration   5: 0.079 ms/op
Iteration   1: 0.081 ms/op
Iteration   2: 0.081 ms/op
Iteration   3: 0.096 ms/op
Iteration   4: 0.126 ms/op
Iteration   5: 0.118 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.101 ±(99.9%) 0.080 ms/op [Average]
  (min, avg, max) = (0.081, 0.101, 0.126), stdev = 0.021
  CI (99.9%): [0.020, 0.181] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 8, nValues = 2)

# Run progress: 27.50% complete, ETA 03:03:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.153 ms/op
# Warmup Iteration   2: 0.144 ms/op
# Warmup Iteration   3: 0.138 ms/op
# Warmup Iteration   4: 0.137 ms/op
# Warmup Iteration   5: 0.139 ms/op
Iteration   1: 0.142 ms/op
Iteration   2: 0.142 ms/op
Iteration   3: 0.166 ms/op
Iteration   4: 0.230 ms/op
Iteration   5: 0.204 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.177 ±(99.9%) 0.150 ms/op [Average]
  (min, avg, max) = (0.142, 0.177, 0.230), stdev = 0.039
  CI (99.9%): [0.026, 0.327] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 8, nValues = 3)

# Run progress: 27.57% complete, ETA 03:02:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.145 ms/op
# Warmup Iteration   2: 0.137 ms/op
# Warmup Iteration   3: 0.140 ms/op
# Warmup Iteration   4: 0.140 ms/op
# Warmup Iteration   5: 0.138 ms/op
Iteration   1: 0.139 ms/op
Iteration   2: 0.141 ms/op
Iteration   3: 0.161 ms/op
Iteration   4: 0.213 ms/op
Iteration   5: 0.239 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.179 ±(99.9%) 0.174 ms/op [Average]
  (min, avg, max) = (0.139, 0.179, 0.239), stdev = 0.045
  CI (99.9%): [0.005, 0.352] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 16, nValues = 2)

# Run progress: 27.64% complete, ETA 03:02:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.294 ms/op
# Warmup Iteration   2: 0.276 ms/op
# Warmup Iteration   3: 0.276 ms/op
# Warmup Iteration   4: 0.269 ms/op
# Warmup Iteration   5: 0.273 ms/op
Iteration   1: 0.272 ms/op
Iteration   2: 0.279 ms/op
Iteration   3: 0.350 ms/op
Iteration   4: 0.440 ms/op
Iteration   5: 0.436 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.355 ±(99.9%) 0.313 ms/op [Average]
  (min, avg, max) = (0.272, 0.355, 0.440), stdev = 0.081
  CI (99.9%): [0.042, 0.668] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 16, nValues = 3)

# Run progress: 27.71% complete, ETA 03:02:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.294 ms/op
# Warmup Iteration   2: 0.268 ms/op
# Warmup Iteration   3: 0.274 ms/op
# Warmup Iteration   4: 0.276 ms/op
# Warmup Iteration   5: 0.274 ms/op
Iteration   1: 0.280 ms/op
Iteration   2: 0.274 ms/op
Iteration   3: 0.321 ms/op
Iteration   4: 0.433 ms/op
Iteration   5: 0.449 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.351 ±(99.9%) 0.323 ms/op [Average]
  (min, avg, max) = (0.274, 0.351, 0.449), stdev = 0.084
  CI (99.9%): [0.028, 0.674] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 32, nValues = 2)

# Run progress: 27.78% complete, ETA 03:02:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.615 ms/op
# Warmup Iteration   2: 0.570 ms/op
# Warmup Iteration   3: 0.556 ms/op
# Warmup Iteration   4: 0.573 ms/op
# Warmup Iteration   5: 0.576 ms/op
Iteration   1: 0.569 ms/op
Iteration   2: 0.570 ms/op
Iteration   3: 0.677 ms/op
Iteration   4: 0.910 ms/op
Iteration   5: 0.807 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.706 ±(99.9%) 0.578 ms/op [Average]
  (min, avg, max) = (0.569, 0.706, 0.910), stdev = 0.150
  CI (99.9%): [0.128, 1.285] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 32, nValues = 3)

# Run progress: 27.85% complete, ETA 03:02:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.599 ms/op
# Warmup Iteration   2: 0.571 ms/op
# Warmup Iteration   3: 0.556 ms/op
# Warmup Iteration   4: 0.560 ms/op
# Warmup Iteration   5: 0.562 ms/op
Iteration   1: 0.563 ms/op
Iteration   2: 0.563 ms/op
Iteration   3: 0.643 ms/op
Iteration   4: 0.803 ms/op
Iteration   5: 0.892 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  0.693 ±(99.9%) 0.571 ms/op [Average]
  (min, avg, max) = (0.563, 0.693, 0.892), stdev = 0.148
  CI (99.9%): [0.122, 1.264] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 64, nValues = 2)

# Run progress: 27.92% complete, ETA 03:01:57
# Fork: 1 of 1
# Warmup Iteration   1: 1.193 ms/op
# Warmup Iteration   2: 1.057 ms/op
# Warmup Iteration   3: 1.063 ms/op
# Warmup Iteration   4: 1.078 ms/op
# Warmup Iteration   5: 1.076 ms/op
Iteration   1: 1.073 ms/op
Iteration   2: 1.075 ms/op
Iteration   3: 1.299 ms/op
Iteration   4: 1.799 ms/op
Iteration   5: 1.634 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  1.376 ±(99.9%) 1.268 ms/op [Average]
  (min, avg, max) = (1.073, 1.376, 1.799), stdev = 0.329
  CI (99.9%): [0.108, 2.644] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 64, nValues = 3)

# Run progress: 27.99% complete, ETA 03:01:47
# Fork: 1 of 1
# Warmup Iteration   1: 1.161 ms/op
# Warmup Iteration   2: 1.066 ms/op
# Warmup Iteration   3: 1.068 ms/op
# Warmup Iteration   4: 1.074 ms/op
# Warmup Iteration   5: 1.094 ms/op
Iteration   1: 1.082 ms/op
Iteration   2: 1.055 ms/op
Iteration   3: 1.360 ms/op
Iteration   4: 1.697 ms/op
Iteration   5: 1.550 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  1.349 ±(99.9%) 1.088 ms/op [Average]
  (min, avg, max) = (1.055, 1.349, 1.697), stdev = 0.283
  CI (99.9%): [0.260, 2.437] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 128, nValues = 2)

# Run progress: 28.06% complete, ETA 03:01:36
# Fork: 1 of 1
# Warmup Iteration   1: 2.302 ms/op
# Warmup Iteration   2: 2.101 ms/op
# Warmup Iteration   3: 2.129 ms/op
# Warmup Iteration   4: 2.109 ms/op
# Warmup Iteration   5: 2.103 ms/op
Iteration   1: 2.120 ms/op
Iteration   2: 2.114 ms/op
Iteration   3: 2.560 ms/op
Iteration   4: 3.324 ms/op
Iteration   5: 3.337 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  2.691 ±(99.9%) 2.354 ms/op [Average]
  (min, avg, max) = (2.114, 2.691, 3.337), stdev = 0.611
  CI (99.9%): [0.337, 5.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 128, nValues = 3)

# Run progress: 28.13% complete, ETA 03:01:25
# Fork: 1 of 1
# Warmup Iteration   1: 2.323 ms/op
# Warmup Iteration   2: 2.161 ms/op
# Warmup Iteration   3: 2.087 ms/op
# Warmup Iteration   4: 2.102 ms/op
# Warmup Iteration   5: 2.106 ms/op
Iteration   1: 2.130 ms/op
Iteration   2: 2.131 ms/op
Iteration   3: 2.374 ms/op
Iteration   4: 3.309 ms/op
Iteration   5: 3.321 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  2.653 ±(99.9%) 2.358 ms/op [Average]
  (min, avg, max) = (2.130, 2.653, 3.321), stdev = 0.612
  CI (99.9%): [0.295, 5.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 256, nValues = 2)

# Run progress: 28.19% complete, ETA 03:01:15
# Fork: 1 of 1
# Warmup Iteration   1: 4.601 ms/op
# Warmup Iteration   2: 4.309 ms/op
# Warmup Iteration   3: 4.150 ms/op
# Warmup Iteration   4: 4.146 ms/op
# Warmup Iteration   5: 4.096 ms/op
Iteration   1: 4.171 ms/op
Iteration   2: 4.191 ms/op
Iteration   3: 5.025 ms/op
Iteration   4: 6.693 ms/op
Iteration   5: 7.136 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  5.443 ±(99.9%) 5.375 ms/op [Average]
  (min, avg, max) = (4.171, 5.443, 7.136), stdev = 1.396
  CI (99.9%): [0.069, 10.818] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 256, nValues = 3)

# Run progress: 28.26% complete, ETA 03:01:04
# Fork: 1 of 1
# Warmup Iteration   1: 4.677 ms/op
# Warmup Iteration   2: 4.290 ms/op
# Warmup Iteration   3: 4.284 ms/op
# Warmup Iteration   4: 4.370 ms/op
# Warmup Iteration   5: 4.331 ms/op
Iteration   1: 4.325 ms/op
Iteration   2: 4.228 ms/op
Iteration   3: 5.101 ms/op
Iteration   4: 6.675 ms/op
Iteration   5: 6.806 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  5.427 ±(99.9%) 4.802 ms/op [Average]
  (min, avg, max) = (4.228, 5.427, 6.806), stdev = 1.247
  CI (99.9%): [0.625, 10.229] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 512, nValues = 2)

# Run progress: 28.33% complete, ETA 03:00:54
# Fork: 1 of 1
# Warmup Iteration   1: 9.379 ms/op
# Warmup Iteration   2: 8.443 ms/op
# Warmup Iteration   3: 8.423 ms/op
# Warmup Iteration   4: 8.528 ms/op
# Warmup Iteration   5: 8.362 ms/op
Iteration   1: 8.644 ms/op
Iteration   2: 8.557 ms/op
Iteration   3: 10.212 ms/op
Iteration   4: 12.408 ms/op
Iteration   5: 13.276 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  10.619 ±(99.9%) 8.299 ms/op [Average]
  (min, avg, max) = (8.557, 10.619, 13.276), stdev = 2.155
  CI (99.9%): [2.320, 18.918] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 512, nValues = 3)

# Run progress: 28.40% complete, ETA 03:00:44
# Fork: 1 of 1
# Warmup Iteration   1: 9.336 ms/op
# Warmup Iteration   2: 8.749 ms/op
# Warmup Iteration   3: 8.347 ms/op
# Warmup Iteration   4: 8.278 ms/op
# Warmup Iteration   5: 8.458 ms/op
Iteration   1: 8.331 ms/op
Iteration   2: 8.247 ms/op
Iteration   3: 10.108 ms/op
Iteration   4: 13.676 ms/op
Iteration   5: 13.493 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  10.771 ±(99.9%) 10.298 ms/op [Average]
  (min, avg, max) = (8.247, 10.771, 13.676), stdev = 2.674
  CI (99.9%): [0.473, 21.069] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 1024, nValues = 2)

# Run progress: 28.47% complete, ETA 03:00:33
# Fork: 1 of 1
# Warmup Iteration   1: 18.564 ms/op
# Warmup Iteration   2: 17.346 ms/op
# Warmup Iteration   3: 17.336 ms/op
# Warmup Iteration   4: 16.839 ms/op
# Warmup Iteration   5: 16.959 ms/op
Iteration   1: 17.177 ms/op
Iteration   2: 17.087 ms/op
Iteration   3: 21.608 ms/op
Iteration   4: 30.668 ms/op
Iteration   5: 25.811 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  22.470 ±(99.9%) 22.462 ms/op [Average]
  (min, avg, max) = (17.087, 22.470, 30.668), stdev = 5.833
  CI (99.9%): [0.008, 44.932] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 1024, nValues = 3)

# Run progress: 28.54% complete, ETA 03:00:23
# Fork: 1 of 1
# Warmup Iteration   1: 18.490 ms/op
# Warmup Iteration   2: 17.518 ms/op
# Warmup Iteration   3: 17.379 ms/op
# Warmup Iteration   4: 17.181 ms/op
# Warmup Iteration   5: 17.027 ms/op
Iteration   1: 17.100 ms/op
Iteration   2: 17.459 ms/op
Iteration   3: 20.175 ms/op
Iteration   4: 26.116 ms/op
Iteration   5: 30.827 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  22.335 ±(99.9%) 22.964 ms/op [Average]
  (min, avg, max) = (17.100, 22.335, 30.827), stdev = 5.964
  CI (99.9%): [? 0, 45.299] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 2048, nValues = 2)

# Run progress: 28.61% complete, ETA 03:00:13
# Fork: 1 of 1
# Warmup Iteration   1: 35.799 ms/op
# Warmup Iteration   2: 35.052 ms/op
# Warmup Iteration   3: 33.852 ms/op
# Warmup Iteration   4: 33.787 ms/op
# Warmup Iteration   5: 33.677 ms/op
Iteration   1: 33.652 ms/op
Iteration   2: 34.415 ms/op
Iteration   3: 42.745 ms/op
Iteration   4: 52.955 ms/op
Iteration   5: 60.575 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  44.869 ±(99.9%) 45.222 ms/op [Average]
  (min, avg, max) = (33.652, 44.869, 60.575), stdev = 11.744
  CI (99.9%): [? 0, 90.091] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 2048, nValues = 3)

# Run progress: 28.68% complete, ETA 03:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 37.828 ms/op
# Warmup Iteration   2: 34.739 ms/op
# Warmup Iteration   3: 35.003 ms/op
# Warmup Iteration   4: 34.791 ms/op
# Warmup Iteration   5: 36.665 ms/op
Iteration   1: 35.073 ms/op
Iteration   2: 34.190 ms/op
Iteration   3: 41.755 ms/op
Iteration   4: 51.109 ms/op
Iteration   5: 61.948 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  44.815 ±(99.9%) 45.166 ms/op [Average]
  (min, avg, max) = (34.190, 44.815, 61.948), stdev = 11.729
  CI (99.9%): [? 0, 89.981] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 4096, nValues = 2)

# Run progress: 28.75% complete, ETA 02:59:53
# Fork: 1 of 1
# Warmup Iteration   1: 90.359 ms/op
# Warmup Iteration   2: 77.568 ms/op
# Warmup Iteration   3: 69.542 ms/op
# Warmup Iteration   4: 72.597 ms/op
# Warmup Iteration   5: 73.476 ms/op
Iteration   1: 70.367 ms/op
Iteration   2: 67.723 ms/op
Iteration   3: 103.901 ms/op
Iteration   4: 109.183 ms/op
Iteration   5: 119.158 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  94.066 ±(99.9%) 90.520 ms/op [Average]
  (min, avg, max) = (67.723, 94.066, 119.158), stdev = 23.508
  CI (99.9%): [3.546, 184.586] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 4096, nValues = 3)

# Run progress: 28.82% complete, ETA 02:59:44
# Fork: 1 of 1
# Warmup Iteration   1: 80.770 ms/op
# Warmup Iteration   2: 74.452 ms/op
# Warmup Iteration   3: 69.145 ms/op
# Warmup Iteration   4: 68.795 ms/op
# Warmup Iteration   5: 68.457 ms/op
Iteration   1: 68.840 ms/op
Iteration   2: 69.489 ms/op
Iteration   3: 92.339 ms/op
Iteration   4: 117.629 ms/op
Iteration   5: 95.809 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  88.821 ±(99.9%) 78.540 ms/op [Average]
  (min, avg, max) = (68.840, 88.821, 117.629), stdev = 20.397
  CI (99.9%): [10.281, 167.361] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 8192, nValues = 2)

# Run progress: 28.89% complete, ETA 02:59:34
# Fork: 1 of 1
# Warmup Iteration   1: 146.568 ms/op
# Warmup Iteration   2: 129.772 ms/op
# Warmup Iteration   3: 128.537 ms/op
# Warmup Iteration   4: 125.828 ms/op
# Warmup Iteration   5: 126.931 ms/op
Iteration   1: 126.935 ms/op
Iteration   2: 125.483 ms/op
Iteration   3: 183.049 ms/op
Iteration   4: 231.181 ms/op
Iteration   5: 242.091 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  181.748 ±(99.9%) 213.152 ms/op [Average]
  (min, avg, max) = (125.483, 181.748, 242.091), stdev = 55.355
  CI (99.9%): [? 0, 394.900] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 8192, nValues = 3)

# Run progress: 28.96% complete, ETA 02:59:25
# Fork: 1 of 1
# Warmup Iteration   1: 147.417 ms/op
# Warmup Iteration   2: 130.163 ms/op
# Warmup Iteration   3: 127.564 ms/op
# Warmup Iteration   4: 129.203 ms/op
# Warmup Iteration   5: 151.502 ms/op
Iteration   1: 154.108 ms/op
Iteration   2: 134.536 ms/op
Iteration   3: 174.524 ms/op
Iteration   4: 243.050 ms/op
Iteration   5: 231.679 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  187.579 ±(99.9%) 183.928 ms/op [Average]
  (min, avg, max) = (134.536, 187.579, 243.050), stdev = 47.765
  CI (99.9%): [3.651, 371.507] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 16384, nValues = 2)

# Run progress: 29.03% complete, ETA 02:59:17
# Fork: 1 of 1
# Warmup Iteration   1: 348.577 ms/op
# Warmup Iteration   2: 295.799 ms/op
# Warmup Iteration   3: 308.225 ms/op
# Warmup Iteration   4: 306.956 ms/op
# Warmup Iteration   5: 285.466 ms/op
Iteration   1: 269.632 ms/op
Iteration   2: 329.675 ms/op
Iteration   3: 427.100 ms/op
Iteration   4: 487.282 ms/op
Iteration   5: 510.814 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  404.900 ±(99.9%) 396.699 ms/op [Average]
  (min, avg, max) = (269.632, 404.900, 510.814), stdev = 103.021
  CI (99.9%): [8.202, 801.599] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 16384, nValues = 3)

# Run progress: 29.10% complete, ETA 02:59:11
# Fork: 1 of 1
# Warmup Iteration   1: 311.304 ms/op
# Warmup Iteration   2: 297.314 ms/op
# Warmup Iteration   3: 320.478 ms/op
# Warmup Iteration   4: 354.114 ms/op
# Warmup Iteration   5: 336.567 ms/op
Iteration   1: 291.447 ms/op
Iteration   2: 455.982 ms/op
Iteration   3: 532.858 ms/op
Iteration   4: 454.162 ms/op
Iteration   5: 546.233 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  456.136 ±(99.9%) 390.466 ms/op [Average]
  (min, avg, max) = (291.447, 456.136, 546.233), stdev = 101.403
  CI (99.9%): [65.671, 846.602] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 1, nValues = 2)

# Run progress: 29.17% complete, ETA 02:59:04
# Fork: 1 of 1
# Warmup Iteration   1: 9.483 ms/op
# Warmup Iteration   2: 9.923 ms/op
# Warmup Iteration   3: 9.595 ms/op
# Warmup Iteration   4: 8.861 ms/op
# Warmup Iteration   5: 10.673 ms/op
Iteration   1: 9.948 ms/op
Iteration   2: 11.708 ms/op
Iteration   3: 13.916 ms/op
Iteration   4: 15.968 ms/op
Iteration   5: 16.648 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  13.637 ±(99.9%) 10.876 ms/op [Average]
  (min, avg, max) = (9.948, 13.637, 16.648), stdev = 2.824
  CI (99.9%): [2.762, 24.513] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 1, nValues = 3)

# Run progress: 29.24% complete, ETA 02:58:54
# Fork: 1 of 1
# Warmup Iteration   1: 10.502 ms/op
# Warmup Iteration   2: 9.992 ms/op
# Warmup Iteration   3: 10.944 ms/op
# Warmup Iteration   4: 10.201 ms/op
# Warmup Iteration   5: 10.212 ms/op
Iteration   1: 11.645 ms/op
Iteration   2: 10.594 ms/op
Iteration   3: 15.441 ms/op
Iteration   4: 16.136 ms/op
Iteration   5: 15.647 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  13.893 ±(99.9%) 9.900 ms/op [Average]
  (min, avg, max) = (10.594, 13.893, 16.136), stdev = 2.571
  CI (99.9%): [3.992, 23.793] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 2, nValues = 2)

# Run progress: 29.31% complete, ETA 02:58:45
# Fork: 1 of 1
# Warmup Iteration   1: 12.367 ms/op
# Warmup Iteration   2: 12.764 ms/op
# Warmup Iteration   3: 13.988 ms/op
# Warmup Iteration   4: 17.137 ms/op
# Warmup Iteration   5: 14.980 ms/op
Iteration   1: 13.934 ms/op
Iteration   2: 13.725 ms/op
Iteration   3: 22.607 ms/op
Iteration   4: 23.611 ms/op
Iteration   5: 22.487 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  19.273 ±(99.9%) 19.210 ms/op [Average]
  (min, avg, max) = (13.725, 19.273, 23.611), stdev = 4.989
  CI (99.9%): [0.062, 38.483] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 2, nValues = 3)

# Run progress: 29.38% complete, ETA 02:58:35
# Fork: 1 of 1
# Warmup Iteration   1: 13.233 ms/op
# Warmup Iteration   2: 14.323 ms/op
# Warmup Iteration   3: 14.150 ms/op
# Warmup Iteration   4: 13.399 ms/op
# Warmup Iteration   5: 11.026 ms/op
Iteration   1: 12.785 ms/op
Iteration   2: 11.907 ms/op
Iteration   3: 18.388 ms/op
Iteration   4: 19.495 ms/op
Iteration   5: 18.097 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  16.134 ±(99.9%) 13.522 ms/op [Average]
  (min, avg, max) = (11.907, 16.134, 19.495), stdev = 3.512
  CI (99.9%): [2.613, 29.656] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 4, nValues = 2)

# Run progress: 29.44% complete, ETA 02:58:26
# Fork: 1 of 1
# Warmup Iteration   1: 20.051 ms/op
# Warmup Iteration   2: 17.309 ms/op
# Warmup Iteration   3: 19.463 ms/op
# Warmup Iteration   4: 18.167 ms/op
# Warmup Iteration   5: 22.596 ms/op
Iteration   1: 18.819 ms/op
Iteration   2: 17.074 ms/op
Iteration   3: 31.742 ms/op
Iteration   4: 30.136 ms/op
Iteration   5: 31.020 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  25.758 ±(99.9%) 27.649 ms/op [Average]
  (min, avg, max) = (17.074, 25.758, 31.742), stdev = 7.180
  CI (99.9%): [? 0, 53.407] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 4, nValues = 3)

# Run progress: 29.51% complete, ETA 02:58:16
# Fork: 1 of 1
# Warmup Iteration   1: 21.193 ms/op
# Warmup Iteration   2: 17.356 ms/op
# Warmup Iteration   3: 20.660 ms/op
# Warmup Iteration   4: 20.597 ms/op
# Warmup Iteration   5: 18.681 ms/op
Iteration   1: 17.459 ms/op
Iteration   2: 21.993 ms/op
Iteration   3: 26.150 ms/op
Iteration   4: 33.596 ms/op
Iteration   5: 30.060 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  25.852 ±(99.9%) 24.588 ms/op [Average]
  (min, avg, max) = (17.459, 25.852, 33.596), stdev = 6.385
  CI (99.9%): [1.264, 50.439] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 8, nValues = 2)

# Run progress: 29.58% complete, ETA 02:58:07
# Fork: 1 of 1
# Warmup Iteration   1: 34.129 ms/op
# Warmup Iteration   2: 30.833 ms/op
# Warmup Iteration   3: 30.684 ms/op
# Warmup Iteration   4: 28.826 ms/op
# Warmup Iteration   5: 29.895 ms/op
Iteration   1: 30.272 ms/op
Iteration   2: 28.653 ms/op
Iteration   3: 43.327 ms/op
Iteration   4: 54.183 ms/op
Iteration   5: 51.798 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  41.647 ±(99.9%) 45.611 ms/op [Average]
  (min, avg, max) = (28.653, 41.647, 54.183), stdev = 11.845
  CI (99.9%): [? 0, 87.258] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 8, nValues = 3)

# Run progress: 29.65% complete, ETA 02:57:57
# Fork: 1 of 1
# Warmup Iteration   1: 33.161 ms/op
# Warmup Iteration   2: 29.811 ms/op
# Warmup Iteration   3: 29.270 ms/op
# Warmup Iteration   4: 32.877 ms/op
# Warmup Iteration   5: 29.201 ms/op
Iteration   1: 33.453 ms/op
Iteration   2: 26.884 ms/op
Iteration   3: 51.204 ms/op
Iteration   4: 53.992 ms/op
Iteration   5: 53.662 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  43.839 ±(99.9%) 49.055 ms/op [Average]
  (min, avg, max) = (26.884, 43.839, 53.992), stdev = 12.739
  CI (99.9%): [? 0, 92.894] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 16, nValues = 2)

# Run progress: 29.72% complete, ETA 02:57:48
# Fork: 1 of 1
# Warmup Iteration   1: 61.524 ms/op
# Warmup Iteration   2: 56.472 ms/op
# Warmup Iteration   3: 54.203 ms/op
# Warmup Iteration   4: 54.268 ms/op
# Warmup Iteration   5: 55.297 ms/op
Iteration   1: 56.511 ms/op
Iteration   2: 77.111 ms/op
Iteration   3: 117.878 ms/op
Iteration   4: 107.804 ms/op
Iteration   5: 103.052 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  92.471 ±(99.9%) 96.682 ms/op [Average]
  (min, avg, max) = (56.511, 92.471, 117.878), stdev = 25.108
  CI (99.9%): [? 0, 189.153] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 16, nValues = 3)

# Run progress: 29.79% complete, ETA 02:57:39
# Fork: 1 of 1
# Warmup Iteration   1: 57.083 ms/op
# Warmup Iteration   2: 57.485 ms/op
# Warmup Iteration   3: 53.590 ms/op
# Warmup Iteration   4: 59.413 ms/op
# Warmup Iteration   5: 60.224 ms/op
Iteration   1: 84.204 ms/op
Iteration   2: 76.692 ms/op
Iteration   3: 117.431 ms/op
Iteration   4: 95.181 ms/op
Iteration   5: 69.431 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  88.588 ±(99.9%) 72.119 ms/op [Average]
  (min, avg, max) = (69.431, 88.588, 117.431), stdev = 18.729
  CI (99.9%): [16.468, 160.707] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 32, nValues = 2)

# Run progress: 29.86% complete, ETA 02:57:30
# Fork: 1 of 1
# Warmup Iteration   1: 132.515 ms/op
# Warmup Iteration   2: 104.086 ms/op
# Warmup Iteration   3: 98.101 ms/op
# Warmup Iteration   4: 112.492 ms/op
# Warmup Iteration   5: 101.452 ms/op
Iteration   1: 99.034 ms/op
Iteration   2: 112.496 ms/op
Iteration   3: 158.589 ms/op
Iteration   4: 179.120 ms/op
Iteration   5: 139.881 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  137.824 ±(99.9%) 126.060 ms/op [Average]
  (min, avg, max) = (99.034, 137.824, 179.120), stdev = 32.737
  CI (99.9%): [11.764, 263.884] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 32, nValues = 3)

# Run progress: 29.93% complete, ETA 02:57:22
# Fork: 1 of 1
# Warmup Iteration   1: 104.939 ms/op
# Warmup Iteration   2: 90.098 ms/op
# Warmup Iteration   3: 93.190 ms/op
# Warmup Iteration   4: 87.500 ms/op
# Warmup Iteration   5: 99.990 ms/op
Iteration   1: 92.039 ms/op
Iteration   2: 78.659 ms/op
Iteration   3: 182.799 ms/op
Iteration   4: 189.314 ms/op
Iteration   5: 163.076 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  141.177 ±(99.9%) 200.568 ms/op [Average]
  (min, avg, max) = (78.659, 141.177, 189.314), stdev = 52.087
  CI (99.9%): [? 0, 341.745] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 64, nValues = 2)

# Run progress: 30.00% complete, ETA 02:57:13
# Fork: 1 of 1
# Warmup Iteration   1: 222.366 ms/op
# Warmup Iteration   2: 200.027 ms/op
# Warmup Iteration   3: 191.921 ms/op
# Warmup Iteration   4: 191.284 ms/op
# Warmup Iteration   5: 207.550 ms/op
Iteration   1: 202.466 ms/op
Iteration   2: 255.065 ms/op
Iteration   3: 280.524 ms/op
Iteration   4: 297.423 ms/op
Iteration   5: 313.767 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  269.849 ±(99.9%) 167.427 ms/op [Average]
  (min, avg, max) = (202.466, 269.849, 313.767), stdev = 43.480
  CI (99.9%): [102.422, 437.276] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 64, nValues = 3)

# Run progress: 30.07% complete, ETA 02:57:07
# Fork: 1 of 1
# Warmup Iteration   1: 209.237 ms/op
# Warmup Iteration   2: 193.868 ms/op
# Warmup Iteration   3: 187.565 ms/op
# Warmup Iteration   4: 169.762 ms/op
# Warmup Iteration   5: 208.773 ms/op
Iteration   1: 194.433 ms/op
Iteration   2: 205.200 ms/op
Iteration   3: 255.835 ms/op
Iteration   4: 361.809 ms/op
Iteration   5: 270.901 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  257.635 ±(99.9%) 256.692 ms/op [Average]
  (min, avg, max) = (194.433, 257.635, 361.809), stdev = 66.662
  CI (99.9%): [0.944, 514.327] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 128, nValues = 2)

# Run progress: 30.14% complete, ETA 02:56:59
# Fork: 1 of 1
# Warmup Iteration   1: 449.339 ms/op
# Warmup Iteration   2: 410.035 ms/op
# Warmup Iteration   3: 384.259 ms/op
# Warmup Iteration   4: 375.264 ms/op
# Warmup Iteration   5: 390.800 ms/op
Iteration   1: 378.822 ms/op
Iteration   2: 629.806 ms/op
Iteration   3: 640.161 ms/op
Iteration   4: 602.311 ms/op
Iteration   5: 537.846 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  557.789 ±(99.9%) 414.641 ms/op [Average]
  (min, avg, max) = (378.822, 557.789, 640.161), stdev = 107.681
  CI (99.9%): [143.149, 972.430] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 128, nValues = 3)

# Run progress: 30.21% complete, ETA 02:56:54
# Fork: 1 of 1
# Warmup Iteration   1: 417.648 ms/op
# Warmup Iteration   2: 393.249 ms/op
# Warmup Iteration   3: 367.011 ms/op
# Warmup Iteration   4: 378.253 ms/op
# Warmup Iteration   5: 384.931 ms/op
Iteration   1: 373.184 ms/op
Iteration   2: 485.889 ms/op
Iteration   3: 530.418 ms/op
Iteration   4: 640.530 ms/op
Iteration   5: 540.326 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  514.069 ±(99.9%) 373.294 ms/op [Average]
  (min, avg, max) = (373.184, 514.069, 640.530), stdev = 96.943
  CI (99.9%): [140.775, 887.363] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 256, nValues = 2)

# Run progress: 30.28% complete, ETA 02:56:47
# Fork: 1 of 1
# Warmup Iteration   1: 875.472 ms/op
# Warmup Iteration   2: 774.535 ms/op
# Warmup Iteration   3: 750.002 ms/op
# Warmup Iteration   4: 709.886 ms/op
# Warmup Iteration   5: 939.816 ms/op
Iteration   1: 1204.424 ms/op
Iteration   2: 1241.859 ms/op
Iteration   3: 1104.597 ms/op
Iteration   4: 1125.513 ms/op
Iteration   5: 1311.949 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  1197.668 ±(99.9%) 327.459 ms/op [Average]
  (min, avg, max) = (1104.597, 1197.668, 1311.949), stdev = 85.040
  CI (99.9%): [870.210, 1525.127] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 256, nValues = 3)

# Run progress: 30.35% complete, ETA 02:56:49
# Fork: 1 of 1
# Warmup Iteration   1: 832.486 ms/op
# Warmup Iteration   2: 762.842 ms/op
# Warmup Iteration   3: 779.273 ms/op
# Warmup Iteration   4: 726.097 ms/op
# Warmup Iteration   5: 874.872 ms/op
Iteration   1: 1115.658 ms/op
Iteration   2: 1171.930 ms/op
Iteration   3: 1188.670 ms/op
Iteration   4: 1260.848 ms/op
Iteration   5: 1121.054 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  1171.632 ±(99.9%) 227.328 ms/op [Average]
  (min, avg, max) = (1115.658, 1171.632, 1260.848), stdev = 59.036
  CI (99.9%): [944.304, 1398.960] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 512, nValues = 2)

# Run progress: 30.42% complete, ETA 02:56:47
# Fork: 1 of 1
# Warmup Iteration   1: 1884.777 ms/op
# Warmup Iteration   2: 1656.068 ms/op
# Warmup Iteration   3: 1561.082 ms/op
# Warmup Iteration   4: 1659.207 ms/op
# Warmup Iteration   5: 1989.276 ms/op
Iteration   1: 2446.722 ms/op
Iteration   2: 2369.503 ms/op
Iteration   3: 2731.309 ms/op
Iteration   4: 2452.235 ms/op
Iteration   5: 2128.734 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  2425.701 ±(99.9%) 830.102 ms/op [Average]
  (min, avg, max) = (2128.734, 2425.701, 2731.309), stdev = 215.575
  CI (99.9%): [1595.599, 3255.802] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 512, nValues = 3)

# Run progress: 30.49% complete, ETA 02:57:02
# Fork: 1 of 1
# Warmup Iteration   1: 1886.263 ms/op
# Warmup Iteration   2: 1694.234 ms/op
# Warmup Iteration   3: 1735.695 ms/op
# Warmup Iteration   4: 1690.676 ms/op
# Warmup Iteration   5: 2173.830 ms/op
Iteration   1: 1981.228 ms/op
Iteration   2: 2514.813 ms/op
Iteration   3: 2443.159 ms/op
Iteration   4: 2340.923 ms/op
Iteration   5: 2371.380 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  2330.300 ±(99.9%) 794.844 ms/op [Average]
  (min, avg, max) = (1981.228, 2330.300, 2514.813), stdev = 206.418
  CI (99.9%): [1535.457, 3125.144] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 1024, nValues = 2)

# Run progress: 30.56% complete, ETA 02:57:16
# Fork: 1 of 1
# Warmup Iteration   1: 3735.420 ms/op
# Warmup Iteration   2: 3268.548 ms/op
# Warmup Iteration   3: 4708.070 ms/op
# Warmup Iteration   4: 4974.159 ms/op
# Warmup Iteration   5: 4896.149 ms/op
Iteration   1: 4796.543 ms/op
Iteration   2: 4913.195 ms/op
Iteration   3: 4641.749 ms/op
Iteration   4: 4919.625 ms/op
Iteration   5: 5018.424 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  4857.907 ±(99.9%) 555.085 ms/op [Average]
  (min, avg, max) = (4641.749, 4857.907, 5018.424), stdev = 144.154
  CI (99.9%): [4302.822, 5412.992] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 1024, nValues = 3)

# Run progress: 30.63% complete, ETA 02:58:27
# Fork: 1 of 1
# Warmup Iteration   1: 3699.008 ms/op
# Warmup Iteration   2: 3121.289 ms/op
# Warmup Iteration   3: 4779.546 ms/op
# Warmup Iteration   4: 4622.241 ms/op
# Warmup Iteration   5: 4762.358 ms/op
Iteration   1: 4716.081 ms/op
Iteration   2: 4494.657 ms/op
Iteration   3: 4856.920 ms/op
Iteration   4: 4563.299 ms/op
Iteration   5: 6060.360 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  4938.263 ±(99.9%) 2474.969 ms/op [Average]
  (min, avg, max) = (4494.657, 4938.263, 6060.360), stdev = 642.742
  CI (99.9%): [2463.294, 7413.232] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 2048, nValues = 2)

# Run progress: 30.69% complete, ETA 02:59:37
# Fork: 1 of 1
# Warmup Iteration   1: 9035.593 ms/op
# Warmup Iteration   2: 10014.671 ms/op
# Warmup Iteration   3: 11395.611 ms/op
# Warmup Iteration   4: 11308.751 ms/op
# Warmup Iteration   5: 11310.313 ms/op
Iteration   1: 10419.260 ms/op
Iteration   2: 9852.458 ms/op
Iteration   3: 10615.522 ms/op
Iteration   4: 10578.809 ms/op
Iteration   5: 10545.775 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  10402.365 ±(99.9%) 1217.404 ms/op [Average]
  (min, avg, max) = (9852.458, 10402.365, 10615.522), stdev = 316.156
  CI (99.9%): [9184.960, 11619.769] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 2048, nValues = 3)

# Run progress: 30.76% complete, ETA 03:03:00
# Fork: 1 of 1
# Warmup Iteration   1: 7195.268 ms/op
# Warmup Iteration   2: 10291.341 ms/op
# Warmup Iteration   3: 9372.609 ms/op
# Warmup Iteration   4: 9449.083 ms/op
# Warmup Iteration   5: 9625.178 ms/op
Iteration   1: 9679.344 ms/op
Iteration   2: 9852.027 ms/op
Iteration   3: 10484.708 ms/op
Iteration   4: 10325.491 ms/op
Iteration   5: 10037.364 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  10075.787 ±(99.9%) 1274.616 ms/op [Average]
  (min, avg, max) = (9679.344, 10075.787, 10484.708), stdev = 331.014
  CI (99.9%): [8801.171, 11350.402] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 4096, nValues = 2)

# Run progress: 30.83% complete, ETA 03:06:01
# Fork: 1 of 1
# Warmup Iteration   1: 17185.781 ms/op
# Warmup Iteration   2: 15924.511 ms/op
# Warmup Iteration   3: 14863.346 ms/op
# Warmup Iteration   4: 14319.659 ms/op
# Warmup Iteration   5: 14593.514 ms/op
Iteration   1: 15049.718 ms/op
Iteration   2: 14916.219 ms/op
Iteration   3: 14765.151 ms/op
Iteration   4: 14665.121 ms/op
Iteration   5: 14019.068 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  14683.055 ±(99.9%) 1536.339 ms/op [Average]
  (min, avg, max) = (14019.068, 14683.055, 15049.718), stdev = 398.982
  CI (99.9%): [13146.716, 16219.394] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 4096, nValues = 3)

# Run progress: 30.90% complete, ETA 03:11:03
# Fork: 1 of 1
# Warmup Iteration   1: 11377.702 ms/op
# Warmup Iteration   2: 15253.127 ms/op
# Warmup Iteration   3: 14096.808 ms/op
# Warmup Iteration   4: 13626.227 ms/op
# Warmup Iteration   5: 14726.209 ms/op
Iteration   1: 14112.220 ms/op
Iteration   2: 14803.986 ms/op
Iteration   3: 14801.863 ms/op
Iteration   4: 15250.014 ms/op
Iteration   5: 14722.027 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark":
  14738.022 ±(99.9%) 1567.036 ms/op [Average]
  (min, avg, max) = (14112.220, 14738.022, 15250.014), stdev = 406.954
  CI (99.9%): [13170.986, 16305.058] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 8192, nValues = 2)

# Run progress: 30.97% complete, ETA 03:15:46
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark(ImmutablePutAllBenchmark.java:67)
	at tools.refinery.store.map.benchmarks.putall.jmh_generated.ImmutablePutAllBenchmark_baselinePutAllAndCommitBenchmark_jmhTest.baselinePutAllAndCommitBenchmark_avgt_jmhStub(ImmutablePutAllBenchmark_baselinePutAllAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.putall.jmh_generated.ImmutablePutAllBenchmark_baselinePutAllAndCommitBenchmark_jmhTest.baselinePutAllAndCommitBenchmark_AverageTime(ImmutablePutAllBenchmark_baselinePutAllAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 8192, nValues = 3)

# Run progress: 31.04% complete, ETA 03:16:08
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark(ImmutablePutAllBenchmark.java:67)
	at tools.refinery.store.map.benchmarks.putall.jmh_generated.ImmutablePutAllBenchmark_baselinePutAllAndCommitBenchmark_jmhTest.baselinePutAllAndCommitBenchmark_avgt_jmhStub(ImmutablePutAllBenchmark_baselinePutAllAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.putall.jmh_generated.ImmutablePutAllBenchmark_baselinePutAllAndCommitBenchmark_jmhTest.baselinePutAllAndCommitBenchmark_AverageTime(ImmutablePutAllBenchmark_baselinePutAllAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 16384, nValues = 2)

# Run progress: 31.11% complete, ETA 03:16:35
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark(ImmutablePutAllBenchmark.java:67)
	at tools.refinery.store.map.benchmarks.putall.jmh_generated.ImmutablePutAllBenchmark_baselinePutAllAndCommitBenchmark_jmhTest.baselinePutAllAndCommitBenchmark_avgt_jmhStub(ImmutablePutAllBenchmark_baselinePutAllAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.putall.jmh_generated.ImmutablePutAllBenchmark_baselinePutAllAndCommitBenchmark_jmhTest.baselinePutAllAndCommitBenchmark_AverageTime(ImmutablePutAllBenchmark_baselinePutAllAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 16384, nValues = 3)

# Run progress: 31.18% complete, ETA 03:16:58
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark(ImmutablePutAllBenchmark.java:67)
	at tools.refinery.store.map.benchmarks.putall.jmh_generated.ImmutablePutAllBenchmark_baselinePutAllAndCommitBenchmark_jmhTest.baselinePutAllAndCommitBenchmark_avgt_jmhStub(ImmutablePutAllBenchmark_baselinePutAllAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.putall.jmh_generated.ImmutablePutAllBenchmark_baselinePutAllAndCommitBenchmark_jmhTest.baselinePutAllAndCommitBenchmark_AverageTime(ImmutablePutAllBenchmark_baselinePutAllAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 1, nValues = 2)

# Run progress: 31.25% complete, ETA 03:17:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 1, nValues = 3)

# Run progress: 31.32% complete, ETA 03:17:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 2, nValues = 2)

# Run progress: 31.39% complete, ETA 03:16:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 2, nValues = 3)

# Run progress: 31.46% complete, ETA 03:16:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 4, nValues = 2)

# Run progress: 31.53% complete, ETA 03:16:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10?³, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 4, nValues = 3)

# Run progress: 31.60% complete, ETA 03:16:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 8, nValues = 2)

# Run progress: 31.67% complete, ETA 03:15:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 8, nValues = 3)

# Run progress: 31.74% complete, ETA 03:15:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 16, nValues = 2)

# Run progress: 31.81% complete, ETA 03:15:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.008 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [0.001, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 16, nValues = 3)

# Run progress: 31.87% complete, ETA 03:15:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.008 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [? 10??, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 32, nValues = 2)

# Run progress: 31.94% complete, ETA 03:14:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.016 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.022), stdev = 0.005
  CI (99.9%): [? 0, 0.035] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 32, nValues = 3)

# Run progress: 32.01% complete, ETA 03:14:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.017 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.013, 0.017, 0.022), stdev = 0.004
  CI (99.9%): [? 10?³, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 64, nValues = 2)

# Run progress: 32.08% complete, ETA 03:14:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.052 ms/op
Iteration   5: 0.052 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.038 ±(99.9%) 0.049 ms/op [Average]
  (min, avg, max) = (0.027, 0.038, 0.052), stdev = 0.013
  CI (99.9%): [? 0, 0.087] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 64, nValues = 3)

# Run progress: 32.15% complete, ETA 03:14:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.029 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.038 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.031 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.023, 0.031, 0.043), stdev = 0.009
  CI (99.9%): [? 0, 0.064] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 128, nValues = 2)

# Run progress: 32.22% complete, ETA 03:13:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.064 ms/op
# Warmup Iteration   2: 0.065 ms/op
# Warmup Iteration   3: 0.062 ms/op
# Warmup Iteration   4: 0.093 ms/op
# Warmup Iteration   5: 0.097 ms/op
Iteration   1: 0.084 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.069 ms/op
Iteration   4: 0.090 ms/op
Iteration   5: 0.092 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.080 ±(99.9%) 0.049 ms/op [Average]
  (min, avg, max) = (0.064, 0.080, 0.092), stdev = 0.013
  CI (99.9%): [0.030, 0.129] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 128, nValues = 3)

# Run progress: 32.29% complete, ETA 03:13:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.080 ms/op
# Warmup Iteration   2: 0.076 ms/op
# Warmup Iteration   3: 0.078 ms/op
# Warmup Iteration   4: 0.072 ms/op
# Warmup Iteration   5: 0.067 ms/op
Iteration   1: 0.071 ms/op
Iteration   2: 0.071 ms/op
Iteration   3: 0.099 ms/op
Iteration   4: 0.155 ms/op
Iteration   5: 0.159 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.111 ±(99.9%) 0.167 ms/op [Average]
  (min, avg, max) = (0.071, 0.111, 0.159), stdev = 0.043
  CI (99.9%): [? 0, 0.278] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 256, nValues = 2)

# Run progress: 32.36% complete, ETA 03:13:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.126 ms/op
# Warmup Iteration   2: 0.126 ms/op
# Warmup Iteration   3: 0.133 ms/op
# Warmup Iteration   4: 0.119 ms/op
# Warmup Iteration   5: 0.120 ms/op
Iteration   1: 0.125 ms/op
Iteration   2: 0.115 ms/op
Iteration   3: 0.143 ms/op
Iteration   4: 0.201 ms/op
Iteration   5: 0.168 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.150 ±(99.9%) 0.134 ms/op [Average]
  (min, avg, max) = (0.115, 0.150, 0.201), stdev = 0.035
  CI (99.9%): [0.017, 0.284] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 256, nValues = 3)

# Run progress: 32.43% complete, ETA 03:13:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.096 ms/op
# Warmup Iteration   2: 0.091 ms/op
# Warmup Iteration   3: 0.094 ms/op
# Warmup Iteration   4: 0.100 ms/op
# Warmup Iteration   5: 0.095 ms/op
Iteration   1: 0.093 ms/op
Iteration   2: 0.094 ms/op
Iteration   3: 0.112 ms/op
Iteration   4: 0.169 ms/op
Iteration   5: 0.153 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.124 ±(99.9%) 0.134 ms/op [Average]
  (min, avg, max) = (0.093, 0.124, 0.169), stdev = 0.035
  CI (99.9%): [? 0, 0.258] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 512, nValues = 2)

# Run progress: 32.50% complete, ETA 03:12:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.189 ms/op
# Warmup Iteration   2: 0.182 ms/op
# Warmup Iteration   3: 0.181 ms/op
# Warmup Iteration   4: 0.182 ms/op
# Warmup Iteration   5: 0.196 ms/op
Iteration   1: 0.184 ms/op
Iteration   2: 0.181 ms/op
Iteration   3: 0.212 ms/op
Iteration   4: 0.301 ms/op
Iteration   5: 0.353 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.246 ±(99.9%) 0.297 ms/op [Average]
  (min, avg, max) = (0.181, 0.246, 0.353), stdev = 0.077
  CI (99.9%): [? 0, 0.543] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 512, nValues = 3)

# Run progress: 32.57% complete, ETA 03:12:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.188 ms/op
# Warmup Iteration   2: 0.180 ms/op
# Warmup Iteration   3: 0.183 ms/op
# Warmup Iteration   4: 0.182 ms/op
# Warmup Iteration   5: 0.194 ms/op
Iteration   1: 0.182 ms/op
Iteration   2: 0.183 ms/op
Iteration   3: 0.211 ms/op
Iteration   4: 0.308 ms/op
Iteration   5: 0.335 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.244 ±(99.9%) 0.280 ms/op [Average]
  (min, avg, max) = (0.182, 0.244, 0.335), stdev = 0.073
  CI (99.9%): [? 0, 0.523] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 1024, nValues = 2)

# Run progress: 32.64% complete, ETA 03:12:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.378 ms/op
# Warmup Iteration   2: 0.365 ms/op
# Warmup Iteration   3: 0.360 ms/op
# Warmup Iteration   4: 0.359 ms/op
# Warmup Iteration   5: 0.364 ms/op
Iteration   1: 0.374 ms/op
Iteration   2: 0.358 ms/op
Iteration   3: 0.398 ms/op
Iteration   4: 0.568 ms/op
Iteration   5: 0.580 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.456 ±(99.9%) 0.420 ms/op [Average]
  (min, avg, max) = (0.358, 0.456, 0.580), stdev = 0.109
  CI (99.9%): [0.035, 0.876] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 1024, nValues = 3)

# Run progress: 32.71% complete, ETA 03:12:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.402 ms/op
# Warmup Iteration   2: 0.367 ms/op
# Warmup Iteration   3: 0.371 ms/op
# Warmup Iteration   4: 0.369 ms/op
# Warmup Iteration   5: 0.370 ms/op
Iteration   1: 0.386 ms/op
Iteration   2: 0.373 ms/op
Iteration   3: 0.441 ms/op
Iteration   4: 0.599 ms/op
Iteration   5: 0.559 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.472 ±(99.9%) 0.393 ms/op [Average]
  (min, avg, max) = (0.373, 0.472, 0.599), stdev = 0.102
  CI (99.9%): [0.079, 0.865] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 2048, nValues = 2)

# Run progress: 32.78% complete, ETA 03:11:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.778 ms/op
# Warmup Iteration   2: 0.722 ms/op
# Warmup Iteration   3: 0.718 ms/op
# Warmup Iteration   4: 0.717 ms/op
# Warmup Iteration   5: 0.735 ms/op
Iteration   1: 0.763 ms/op
Iteration   2: 0.721 ms/op
Iteration   3: 0.807 ms/op
Iteration   4: 1.070 ms/op
Iteration   5: 0.999 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.872 ±(99.9%) 0.590 ms/op [Average]
  (min, avg, max) = (0.721, 0.872, 1.070), stdev = 0.153
  CI (99.9%): [0.282, 1.462] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 2048, nValues = 3)

# Run progress: 32.85% complete, ETA 03:11:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.823 ms/op
# Warmup Iteration   2: 0.779 ms/op
# Warmup Iteration   3: 0.790 ms/op
# Warmup Iteration   4: 0.766 ms/op
# Warmup Iteration   5: 0.772 ms/op
Iteration   1: 0.779 ms/op
Iteration   2: 0.810 ms/op
Iteration   3: 0.949 ms/op
Iteration   4: 1.339 ms/op
Iteration   5: 1.239 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  1.023 ±(99.9%) 0.977 ms/op [Average]
  (min, avg, max) = (0.779, 1.023, 1.339), stdev = 0.254
  CI (99.9%): [0.046, 2.000] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 4096, nValues = 2)

# Run progress: 32.92% complete, ETA 03:11:22
# Fork: 1 of 1
# Warmup Iteration   1: 1.828 ms/op
# Warmup Iteration   2: 1.898 ms/op
# Warmup Iteration   3: 1.751 ms/op
# Warmup Iteration   4: 1.744 ms/op
# Warmup Iteration   5: 1.755 ms/op
Iteration   1: 1.752 ms/op
Iteration   2: 1.810 ms/op
Iteration   3: 2.102 ms/op
Iteration   4: 2.837 ms/op
Iteration   5: 2.881 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  2.276 ±(99.9%) 2.111 ms/op [Average]
  (min, avg, max) = (1.752, 2.276, 2.881), stdev = 0.548
  CI (99.9%): [0.166, 4.387] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 4096, nValues = 3)

# Run progress: 32.99% complete, ETA 03:11:07
# Fork: 1 of 1
# Warmup Iteration   1: 1.862 ms/op
# Warmup Iteration   2: 1.886 ms/op
# Warmup Iteration   3: 1.717 ms/op
# Warmup Iteration   4: 1.733 ms/op
# Warmup Iteration   5: 1.772 ms/op
Iteration   1: 1.767 ms/op
Iteration   2: 1.803 ms/op
Iteration   3: 2.127 ms/op
Iteration   4: 2.575 ms/op
Iteration   5: 3.009 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  2.256 ±(99.9%) 2.045 ms/op [Average]
  (min, avg, max) = (1.767, 2.256, 3.009), stdev = 0.531
  CI (99.9%): [0.211, 4.301] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 8192, nValues = 2)

# Run progress: 33.06% complete, ETA 03:10:52
# Fork: 1 of 1
# Warmup Iteration   1: 3.646 ms/op
# Warmup Iteration   2: 3.670 ms/op
# Warmup Iteration   3: 3.618 ms/op
# Warmup Iteration   4: 3.502 ms/op
# Warmup Iteration   5: 3.516 ms/op
Iteration   1: 3.660 ms/op
Iteration   2: 3.809 ms/op
Iteration   3: 5.328 ms/op
Iteration   4: 6.980 ms/op
Iteration   5: 5.150 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  4.985 ±(99.9%) 5.188 ms/op [Average]
  (min, avg, max) = (3.660, 4.985, 6.980), stdev = 1.347
  CI (99.9%): [? 0, 10.174] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 8192, nValues = 3)

# Run progress: 33.13% complete, ETA 03:10:38
# Fork: 1 of 1
# Warmup Iteration   1: 3.704 ms/op
# Warmup Iteration   2: 3.727 ms/op
# Warmup Iteration   3: 3.976 ms/op
# Warmup Iteration   4: 4.015 ms/op
# Warmup Iteration   5: 3.981 ms/op
Iteration   1: 3.903 ms/op
Iteration   2: 3.918 ms/op
Iteration   3: 4.861 ms/op
Iteration   4: 7.621 ms/op
Iteration   5: 5.675 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  5.196 ±(99.9%) 5.943 ms/op [Average]
  (min, avg, max) = (3.903, 5.196, 7.621), stdev = 1.543
  CI (99.9%): [? 0, 11.138] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 16384, nValues = 2)

# Run progress: 33.19% complete, ETA 03:10:23
# Fork: 1 of 1
# Warmup Iteration   1: 7.453 ms/op
# Warmup Iteration   2: 7.837 ms/op
# Warmup Iteration   3: 7.686 ms/op
# Warmup Iteration   4: 8.521 ms/op
# Warmup Iteration   5: 8.338 ms/op
Iteration   1: 8.134 ms/op
Iteration   2: 8.217 ms/op
Iteration   3: 10.168 ms/op
Iteration   4: 14.379 ms/op
Iteration   5: 11.962 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  10.572 ±(99.9%) 10.203 ms/op [Average]
  (min, avg, max) = (8.134, 10.572, 14.379), stdev = 2.650
  CI (99.9%): [0.369, 20.775] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 16384, nValues = 3)

# Run progress: 33.26% complete, ETA 03:10:08
# Fork: 1 of 1
# Warmup Iteration   1: 7.982 ms/op
# Warmup Iteration   2: 8.059 ms/op
# Warmup Iteration   3: 7.535 ms/op
# Warmup Iteration   4: 7.577 ms/op
# Warmup Iteration   5: 7.862 ms/op
Iteration   1: 7.511 ms/op
Iteration   2: 7.422 ms/op
Iteration   3: 9.047 ms/op
Iteration   4: 12.742 ms/op
Iteration   5: 11.515 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  9.647 ±(99.9%) 9.221 ms/op [Average]
  (min, avg, max) = (7.422, 9.647, 12.742), stdev = 2.395
  CI (99.9%): [0.426, 18.868] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 1, nValues = 2)

# Run progress: 33.33% complete, ETA 03:09:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.019 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.015, 0.019, 0.025), stdev = 0.004
  CI (99.9%): [0.004, 0.035] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 1, nValues = 3)

# Run progress: 33.40% complete, ETA 03:09:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.018 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.014, 0.018, 0.022), stdev = 0.004
  CI (99.9%): [0.004, 0.032] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 2, nValues = 2)

# Run progress: 33.47% complete, ETA 03:09:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.029 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.027 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.033 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.040 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.034 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.026, 0.034, 0.045), stdev = 0.008
  CI (99.9%): [0.003, 0.066] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 2, nValues = 3)

# Run progress: 33.54% complete, ETA 03:09:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.029 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.051 ms/op
Iteration   5: 0.039 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.035 ±(99.9%) 0.040 ms/op [Average]
  (min, avg, max) = (0.026, 0.035, 0.051), stdev = 0.010
  CI (99.9%): [? 0, 0.074] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 4, nValues = 2)

# Run progress: 33.61% complete, ETA 03:08:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.054 ms/op
# Warmup Iteration   2: 0.052 ms/op
# Warmup Iteration   3: 0.052 ms/op
# Warmup Iteration   4: 0.058 ms/op
# Warmup Iteration   5: 0.051 ms/op
Iteration   1: 0.052 ms/op
Iteration   2: 0.051 ms/op
Iteration   3: 0.060 ms/op
Iteration   4: 0.077 ms/op
Iteration   5: 0.090 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.066 ±(99.9%) 0.065 ms/op [Average]
  (min, avg, max) = (0.051, 0.066, 0.090), stdev = 0.017
  CI (99.9%): [0.001, 0.131] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 4, nValues = 3)

# Run progress: 33.68% complete, ETA 03:08:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.056 ms/op
# Warmup Iteration   2: 0.053 ms/op
# Warmup Iteration   3: 0.052 ms/op
# Warmup Iteration   4: 0.052 ms/op
# Warmup Iteration   5: 0.057 ms/op
Iteration   1: 0.052 ms/op
Iteration   2: 0.051 ms/op
Iteration   3: 0.060 ms/op
Iteration   4: 0.080 ms/op
Iteration   5: 0.078 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.064 ±(99.9%) 0.054 ms/op [Average]
  (min, avg, max) = (0.051, 0.064, 0.080), stdev = 0.014
  CI (99.9%): [0.010, 0.118] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 8, nValues = 2)

# Run progress: 33.75% complete, ETA 03:08:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.114 ms/op
# Warmup Iteration   2: 0.105 ms/op
# Warmup Iteration   3: 0.105 ms/op
# Warmup Iteration   4: 0.104 ms/op
# Warmup Iteration   5: 0.105 ms/op
Iteration   1: 0.113 ms/op
Iteration   2: 0.105 ms/op
Iteration   3: 0.121 ms/op
Iteration   4: 0.161 ms/op
Iteration   5: 0.159 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.132 ±(99.9%) 0.102 ms/op [Average]
  (min, avg, max) = (0.105, 0.132, 0.161), stdev = 0.027
  CI (99.9%): [0.030, 0.234] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 8, nValues = 3)

# Run progress: 33.82% complete, ETA 03:08:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.119 ms/op
# Warmup Iteration   2: 0.104 ms/op
# Warmup Iteration   3: 0.105 ms/op
# Warmup Iteration   4: 0.103 ms/op
# Warmup Iteration   5: 0.103 ms/op
Iteration   1: 0.103 ms/op
Iteration   2: 0.113 ms/op
Iteration   3: 0.117 ms/op
Iteration   4: 0.176 ms/op
Iteration   5: 0.178 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.137 ±(99.9%) 0.140 ms/op [Average]
  (min, avg, max) = (0.103, 0.137, 0.178), stdev = 0.036
  CI (99.9%): [? 0, 0.278] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 16, nValues = 2)

# Run progress: 33.89% complete, ETA 03:07:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.217 ms/op
# Warmup Iteration   2: 0.224 ms/op
# Warmup Iteration   3: 0.205 ms/op
# Warmup Iteration   4: 0.204 ms/op
# Warmup Iteration   5: 0.205 ms/op
Iteration   1: 0.206 ms/op
Iteration   2: 0.207 ms/op
Iteration   3: 0.253 ms/op
Iteration   4: 0.286 ms/op
Iteration   5: 0.269 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.244 ±(99.9%) 0.140 ms/op [Average]
  (min, avg, max) = (0.206, 0.244, 0.286), stdev = 0.036
  CI (99.9%): [0.104, 0.384] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 16, nValues = 3)

# Run progress: 33.96% complete, ETA 03:07:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.209 ms/op
# Warmup Iteration   2: 0.202 ms/op
# Warmup Iteration   3: 0.220 ms/op
# Warmup Iteration   4: 0.199 ms/op
# Warmup Iteration   5: 0.202 ms/op
Iteration   1: 0.201 ms/op
Iteration   2: 0.213 ms/op
Iteration   3: 0.230 ms/op
Iteration   4: 0.346 ms/op
Iteration   5: 0.337 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.265 ±(99.9%) 0.270 ms/op [Average]
  (min, avg, max) = (0.201, 0.265, 0.346), stdev = 0.070
  CI (99.9%): [? 0, 0.535] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 32, nValues = 2)

# Run progress: 34.03% complete, ETA 03:07:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.416 ms/op
# Warmup Iteration   2: 0.407 ms/op
# Warmup Iteration   3: 0.403 ms/op
# Warmup Iteration   4: 0.436 ms/op
# Warmup Iteration   5: 0.397 ms/op
Iteration   1: 0.394 ms/op
Iteration   2: 0.402 ms/op
Iteration   3: 0.442 ms/op
Iteration   4: 0.630 ms/op
Iteration   5: 0.652 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.504 ±(99.9%) 0.488 ms/op [Average]
  (min, avg, max) = (0.394, 0.504, 0.652), stdev = 0.127
  CI (99.9%): [0.016, 0.992] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 32, nValues = 3)

# Run progress: 34.10% complete, ETA 03:07:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.417 ms/op
# Warmup Iteration   2: 0.404 ms/op
# Warmup Iteration   3: 0.394 ms/op
# Warmup Iteration   4: 0.400 ms/op
# Warmup Iteration   5: 0.438 ms/op
Iteration   1: 0.397 ms/op
Iteration   2: 0.402 ms/op
Iteration   3: 0.448 ms/op
Iteration   4: 0.637 ms/op
Iteration   5: 0.621 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.501 ±(99.9%) 0.457 ms/op [Average]
  (min, avg, max) = (0.397, 0.501, 0.637), stdev = 0.119
  CI (99.9%): [0.044, 0.958] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 64, nValues = 2)

# Run progress: 34.17% complete, ETA 03:06:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.822 ms/op
# Warmup Iteration   2: 0.835 ms/op
# Warmup Iteration   3: 0.830 ms/op
# Warmup Iteration   4: 0.778 ms/op
# Warmup Iteration   5: 0.808 ms/op
Iteration   1: 0.818 ms/op
Iteration   2: 0.788 ms/op
Iteration   3: 0.884 ms/op
Iteration   4: 1.341 ms/op
Iteration   5: 1.137 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  0.994 ±(99.9%) 0.916 ms/op [Average]
  (min, avg, max) = (0.788, 0.994, 1.341), stdev = 0.238
  CI (99.9%): [0.078, 1.910] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 64, nValues = 3)

# Run progress: 34.24% complete, ETA 03:06:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.888 ms/op
# Warmup Iteration   2: 0.790 ms/op
# Warmup Iteration   3: 0.802 ms/op
# Warmup Iteration   4: 0.794 ms/op
# Warmup Iteration   5: 0.801 ms/op
Iteration   1: 0.851 ms/op
Iteration   2: 0.797 ms/op
Iteration   3: 0.896 ms/op
Iteration   4: 1.179 ms/op
Iteration   5: 1.328 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  1.010 ±(99.9%) 0.888 ms/op [Average]
  (min, avg, max) = (0.797, 1.010, 1.328), stdev = 0.231
  CI (99.9%): [0.122, 1.899] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 128, nValues = 2)

# Run progress: 34.31% complete, ETA 03:06:28
# Fork: 1 of 1
# Warmup Iteration   1: 1.680 ms/op
# Warmup Iteration   2: 1.635 ms/op
# Warmup Iteration   3: 1.585 ms/op
# Warmup Iteration   4: 1.579 ms/op
# Warmup Iteration   5: 1.587 ms/op
Iteration   1: 1.580 ms/op
Iteration   2: 1.705 ms/op
Iteration   3: 1.788 ms/op
Iteration   4: 2.428 ms/op
Iteration   5: 2.381 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  1.976 ±(99.9%) 1.533 ms/op [Average]
  (min, avg, max) = (1.580, 1.976, 2.428), stdev = 0.398
  CI (99.9%): [0.444, 3.509] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 128, nValues = 3)

# Run progress: 34.38% complete, ETA 03:06:14
# Fork: 1 of 1
# Warmup Iteration   1: 1.647 ms/op
# Warmup Iteration   2: 1.708 ms/op
# Warmup Iteration   3: 1.608 ms/op
# Warmup Iteration   4: 1.666 ms/op
# Warmup Iteration   5: 2.199 ms/op
Iteration   1: 2.721 ms/op
Iteration   2: 2.421 ms/op
Iteration   3: 2.629 ms/op
Iteration   4: 3.704 ms/op
Iteration   5: 4.118 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  3.119 ±(99.9%) 2.871 ms/op [Average]
  (min, avg, max) = (2.421, 3.119, 4.118), stdev = 0.746
  CI (99.9%): [0.247, 5.990] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 256, nValues = 2)

# Run progress: 34.44% complete, ETA 03:06:00
# Fork: 1 of 1
# Warmup Iteration   1: 4.173 ms/op
# Warmup Iteration   2: 3.759 ms/op
# Warmup Iteration   3: 3.496 ms/op
# Warmup Iteration   4: 3.731 ms/op
# Warmup Iteration   5: 3.817 ms/op
Iteration   1: 4.266 ms/op
Iteration   2: 3.870 ms/op
Iteration   3: 4.384 ms/op
Iteration   4: 6.905 ms/op
Iteration   5: 6.428 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  5.170 ±(99.9%) 5.349 ms/op [Average]
  (min, avg, max) = (3.870, 5.170, 6.905), stdev = 1.389
  CI (99.9%): [? 0, 10.519] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 256, nValues = 3)

# Run progress: 34.51% complete, ETA 03:05:45
# Fork: 1 of 1
# Warmup Iteration   1: 3.483 ms/op
# Warmup Iteration   2: 3.285 ms/op
# Warmup Iteration   3: 3.292 ms/op
# Warmup Iteration   4: 3.274 ms/op
# Warmup Iteration   5: 3.592 ms/op
Iteration   1: 3.384 ms/op
Iteration   2: 3.492 ms/op
Iteration   3: 4.040 ms/op
Iteration   4: 4.683 ms/op
Iteration   5: 4.838 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  4.087 ±(99.9%) 2.562 ms/op [Average]
  (min, avg, max) = (3.384, 4.087, 4.838), stdev = 0.665
  CI (99.9%): [1.526, 6.649] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 512, nValues = 2)

# Run progress: 34.58% complete, ETA 03:05:31
# Fork: 1 of 1
# Warmup Iteration   1: 7.214 ms/op
# Warmup Iteration   2: 6.897 ms/op
# Warmup Iteration   3: 6.761 ms/op
# Warmup Iteration   4: 6.586 ms/op
# Warmup Iteration   5: 6.573 ms/op
Iteration   1: 7.084 ms/op
Iteration   2: 6.615 ms/op
Iteration   3: 7.634 ms/op
Iteration   4: 9.612 ms/op
Iteration   5: 9.486 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  8.086 ±(99.9%) 5.329 ms/op [Average]
  (min, avg, max) = (6.615, 8.086, 9.612), stdev = 1.384
  CI (99.9%): [2.757, 13.415] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 512, nValues = 3)

# Run progress: 34.65% complete, ETA 03:05:16
# Fork: 1 of 1
# Warmup Iteration   1: 6.786 ms/op
# Warmup Iteration   2: 6.947 ms/op
# Warmup Iteration   3: 6.415 ms/op
# Warmup Iteration   4: 6.274 ms/op
# Warmup Iteration   5: 6.353 ms/op
Iteration   1: 6.339 ms/op
Iteration   2: 6.899 ms/op
Iteration   3: 7.807 ms/op
Iteration   4: 10.002 ms/op
Iteration   5: 9.433 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  8.096 ±(99.9%) 6.096 ms/op [Average]
  (min, avg, max) = (6.339, 8.096, 10.002), stdev = 1.583
  CI (99.9%): [2.000, 14.192] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 1024, nValues = 2)

# Run progress: 34.72% complete, ETA 03:05:02
# Fork: 1 of 1
# Warmup Iteration   1: 13.306 ms/op
# Warmup Iteration   2: 13.089 ms/op
# Warmup Iteration   3: 13.881 ms/op
# Warmup Iteration   4: 12.909 ms/op
# Warmup Iteration   5: 12.854 ms/op
Iteration   1: 12.692 ms/op
Iteration   2: 12.891 ms/op
Iteration   3: 14.192 ms/op
Iteration   4: 20.122 ms/op
Iteration   5: 20.177 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  16.015 ±(99.9%) 14.703 ms/op [Average]
  (min, avg, max) = (12.692, 16.015, 20.177), stdev = 3.818
  CI (99.9%): [1.311, 30.718] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 1024, nValues = 3)

# Run progress: 34.79% complete, ETA 03:04:48
# Fork: 1 of 1
# Warmup Iteration   1: 13.432 ms/op
# Warmup Iteration   2: 12.777 ms/op
# Warmup Iteration   3: 13.315 ms/op
# Warmup Iteration   4: 13.866 ms/op
# Warmup Iteration   5: 13.008 ms/op
Iteration   1: 13.040 ms/op
Iteration   2: 13.004 ms/op
Iteration   3: 15.605 ms/op
Iteration   4: 22.120 ms/op
Iteration   5: 19.548 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  16.663 ±(99.9%) 15.610 ms/op [Average]
  (min, avg, max) = (13.004, 16.663, 22.120), stdev = 4.054
  CI (99.9%): [1.053, 32.273] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 2048, nValues = 2)

# Run progress: 34.86% complete, ETA 03:04:33
# Fork: 1 of 1
# Warmup Iteration   1: 26.996 ms/op
# Warmup Iteration   2: 25.743 ms/op
# Warmup Iteration   3: 26.057 ms/op
# Warmup Iteration   4: 26.214 ms/op
# Warmup Iteration   5: 28.149 ms/op
Iteration   1: 25.941 ms/op
Iteration   2: 25.856 ms/op
Iteration   3: 29.201 ms/op
Iteration   4: 42.380 ms/op
Iteration   5: 45.133 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  33.702 ±(99.9%) 35.917 ms/op [Average]
  (min, avg, max) = (25.856, 33.702, 45.133), stdev = 9.327
  CI (99.9%): [? 0, 69.619] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 2048, nValues = 3)

# Run progress: 34.93% complete, ETA 03:04:19
# Fork: 1 of 1
# Warmup Iteration   1: 26.222 ms/op
# Warmup Iteration   2: 25.810 ms/op
# Warmup Iteration   3: 25.490 ms/op
# Warmup Iteration   4: 25.596 ms/op
# Warmup Iteration   5: 26.951 ms/op
Iteration   1: 27.049 ms/op
Iteration   2: 25.744 ms/op
Iteration   3: 30.271 ms/op
Iteration   4: 37.479 ms/op
Iteration   5: 38.273 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  31.763 ±(99.9%) 22.430 ms/op [Average]
  (min, avg, max) = (25.744, 31.763, 38.273), stdev = 5.825
  CI (99.9%): [9.333, 54.194] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 4096, nValues = 2)

# Run progress: 35.00% complete, ETA 03:04:05
# Fork: 1 of 1
# Warmup Iteration   1: 59.949 ms/op
# Warmup Iteration   2: 50.828 ms/op
# Warmup Iteration   3: 51.881 ms/op
# Warmup Iteration   4: 50.103 ms/op
# Warmup Iteration   5: 50.358 ms/op
Iteration   1: 57.539 ms/op
Iteration   2: 57.309 ms/op
Iteration   3: 72.498 ms/op
Iteration   4: 86.769 ms/op
Iteration   5: 94.009 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  73.625 ±(99.9%) 64.275 ms/op [Average]
  (min, avg, max) = (57.309, 73.625, 94.009), stdev = 16.692
  CI (99.9%): [9.349, 137.900] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 4096, nValues = 3)

# Run progress: 35.07% complete, ETA 03:03:51
# Fork: 1 of 1
# Warmup Iteration   1: 54.053 ms/op
# Warmup Iteration   2: 55.334 ms/op
# Warmup Iteration   3: 51.776 ms/op
# Warmup Iteration   4: 49.963 ms/op
# Warmup Iteration   5: 51.826 ms/op
Iteration   1: 51.349 ms/op
Iteration   2: 55.747 ms/op
Iteration   3: 65.576 ms/op
Iteration   4: 73.082 ms/op
Iteration   5: 90.119 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  67.174 ±(99.9%) 59.184 ms/op [Average]
  (min, avg, max) = (51.349, 67.174, 90.119), stdev = 15.370
  CI (99.9%): [7.991, 126.358] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 8192, nValues = 2)

# Run progress: 35.14% complete, ETA 03:03:38
# Fork: 1 of 1
# Warmup Iteration   1: 104.394 ms/op
# Warmup Iteration   2: 109.946 ms/op
# Warmup Iteration   3: 105.281 ms/op
# Warmup Iteration   4: 101.279 ms/op
# Warmup Iteration   5: 99.742 ms/op
Iteration   1: 97.621 ms/op
Iteration   2: 101.688 ms/op
Iteration   3: 147.919 ms/op
Iteration   4: 155.286 ms/op
Iteration   5: 151.235 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  130.750 ±(99.9%) 109.906 ms/op [Average]
  (min, avg, max) = (97.621, 130.750, 155.286), stdev = 28.542
  CI (99.9%): [20.844, 240.656] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 8192, nValues = 3)

# Run progress: 35.21% complete, ETA 03:03:25
# Fork: 1 of 1
# Warmup Iteration   1: 104.651 ms/op
# Warmup Iteration   2: 103.786 ms/op
# Warmup Iteration   3: 109.783 ms/op
# Warmup Iteration   4: 99.672 ms/op
# Warmup Iteration   5: 99.994 ms/op
Iteration   1: 101.124 ms/op
Iteration   2: 101.025 ms/op
Iteration   3: 148.774 ms/op
Iteration   4: 144.713 ms/op
Iteration   5: 147.438 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  128.615 ±(99.9%) 96.972 ms/op [Average]
  (min, avg, max) = (101.025, 128.615, 148.774), stdev = 25.183
  CI (99.9%): [31.643, 225.587] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 16384, nValues = 2)

# Run progress: 35.28% complete, ETA 03:03:11
# Fork: 1 of 1
# Warmup Iteration   1: 216.884 ms/op
# Warmup Iteration   2: 200.753 ms/op
# Warmup Iteration   3: 223.157 ms/op
# Warmup Iteration   4: 203.482 ms/op
# Warmup Iteration   5: 198.749 ms/op
Iteration   1: 198.934 ms/op
Iteration   2: 240.923 ms/op
Iteration   3: 437.399 ms/op
Iteration   4: 293.563 ms/op
Iteration   5: 292.130 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  292.590 ±(99.9%) 346.621 ms/op [Average]
  (min, avg, max) = (198.934, 292.590, 437.399), stdev = 90.016
  CI (99.9%): [? 0, 639.211] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 16384, nValues = 3)

# Run progress: 35.35% complete, ETA 03:03:00
# Fork: 1 of 1
# Warmup Iteration   1: 208.876 ms/op
# Warmup Iteration   2: 206.199 ms/op
# Warmup Iteration   3: 231.039 ms/op
# Warmup Iteration   4: 211.147 ms/op
# Warmup Iteration   5: 205.073 ms/op
Iteration   1: 203.772 ms/op
Iteration   2: 205.957 ms/op
Iteration   3: 260.848 ms/op
Iteration   4: 350.602 ms/op
Iteration   5: 308.262 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  265.888 ±(99.9%) 246.919 ms/op [Average]
  (min, avg, max) = (203.772, 265.888, 350.602), stdev = 64.124
  CI (99.9%): [18.969, 512.807] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 1, nValues = 2)

# Run progress: 35.42% complete, ETA 03:02:47
# Fork: 1 of 1
# Warmup Iteration   1: 4.788 ms/op
# Warmup Iteration   2: 4.892 ms/op
# Warmup Iteration   3: 5.162 ms/op
# Warmup Iteration   4: 4.166 ms/op
# Warmup Iteration   5: 4.308 ms/op
Iteration   1: 3.971 ms/op
Iteration   2: 4.214 ms/op
Iteration   3: 5.809 ms/op
Iteration   4: 8.698 ms/op
Iteration   5: 8.488 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  6.236 ±(99.9%) 8.724 ms/op [Average]
  (min, avg, max) = (3.971, 6.236, 8.698), stdev = 2.265
  CI (99.9%): [? 0, 14.960] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 1, nValues = 3)

# Run progress: 35.49% complete, ETA 03:02:33
# Fork: 1 of 1
# Warmup Iteration   1: 4.099 ms/op
# Warmup Iteration   2: 4.597 ms/op
# Warmup Iteration   3: 4.010 ms/op
# Warmup Iteration   4: 3.971 ms/op
# Warmup Iteration   5: 4.396 ms/op
Iteration   1: 4.612 ms/op
Iteration   2: 4.292 ms/op
Iteration   3: 5.342 ms/op
Iteration   4: 5.347 ms/op
Iteration   5: 5.582 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  5.035 ±(99.9%) 2.128 ms/op [Average]
  (min, avg, max) = (4.292, 5.035, 5.582), stdev = 0.553
  CI (99.9%): [2.907, 7.163] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 2, nValues = 2)

# Run progress: 35.56% complete, ETA 03:02:20
# Fork: 1 of 1
# Warmup Iteration   1: 6.517 ms/op
# Warmup Iteration   2: 5.845 ms/op
# Warmup Iteration   3: 5.601 ms/op
# Warmup Iteration   4: 6.562 ms/op
# Warmup Iteration   5: 5.577 ms/op
Iteration   1: 5.990 ms/op
Iteration   2: 6.625 ms/op
Iteration   3: 7.081 ms/op
Iteration   4: 8.874 ms/op
Iteration   5: 9.142 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  7.542 ±(99.9%) 5.376 ms/op [Average]
  (min, avg, max) = (5.990, 7.542, 9.142), stdev = 1.396
  CI (99.9%): [2.166, 12.919] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 2, nValues = 3)

# Run progress: 35.63% complete, ETA 03:02:06
# Fork: 1 of 1
# Warmup Iteration   1: 6.427 ms/op
# Warmup Iteration   2: 7.584 ms/op
# Warmup Iteration   3: 6.164 ms/op
# Warmup Iteration   4: 5.851 ms/op
# Warmup Iteration   5: 5.532 ms/op
Iteration   1: 5.403 ms/op
Iteration   2: 5.950 ms/op
Iteration   3: 8.235 ms/op
Iteration   4: 8.091 ms/op
Iteration   5: 8.433 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  7.222 ±(99.9%) 5.506 ms/op [Average]
  (min, avg, max) = (5.403, 7.222, 8.433), stdev = 1.430
  CI (99.9%): [1.717, 12.728] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 4, nValues = 2)

# Run progress: 35.69% complete, ETA 03:01:52
# Fork: 1 of 1
# Warmup Iteration   1: 10.124 ms/op
# Warmup Iteration   2: 8.991 ms/op
# Warmup Iteration   3: 10.641 ms/op
# Warmup Iteration   4: 10.719 ms/op
# Warmup Iteration   5: 8.828 ms/op
Iteration   1: 8.571 ms/op
Iteration   2: 8.936 ms/op
Iteration   3: 10.026 ms/op
Iteration   4: 14.621 ms/op
Iteration   5: 11.510 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  10.733 ±(99.9%) 9.457 ms/op [Average]
  (min, avg, max) = (8.571, 10.733, 14.621), stdev = 2.456
  CI (99.9%): [1.276, 20.190] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 4, nValues = 3)

# Run progress: 35.76% complete, ETA 03:01:38
# Fork: 1 of 1
# Warmup Iteration   1: 11.613 ms/op
# Warmup Iteration   2: 9.839 ms/op
# Warmup Iteration   3: 10.370 ms/op
# Warmup Iteration   4: 12.506 ms/op
# Warmup Iteration   5: 11.414 ms/op
Iteration   1: 10.995 ms/op
Iteration   2: 9.306 ms/op
Iteration   3: 12.476 ms/op
Iteration   4: 16.180 ms/op
Iteration   5: 18.129 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  13.417 ±(99.9%) 14.081 ms/op [Average]
  (min, avg, max) = (9.306, 13.417, 18.129), stdev = 3.657
  CI (99.9%): [? 0, 27.498] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 8, nValues = 2)

# Run progress: 35.83% complete, ETA 03:01:25
# Fork: 1 of 1
# Warmup Iteration   1: 16.735 ms/op
# Warmup Iteration   2: 16.777 ms/op
# Warmup Iteration   3: 16.207 ms/op
# Warmup Iteration   4: 16.002 ms/op
# Warmup Iteration   5: 16.427 ms/op
Iteration   1: 16.215 ms/op
Iteration   2: 15.575 ms/op
Iteration   3: 19.939 ms/op
Iteration   4: 20.759 ms/op
Iteration   5: 26.877 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  19.873 ±(99.9%) 17.403 ms/op [Average]
  (min, avg, max) = (15.575, 19.873, 26.877), stdev = 4.519
  CI (99.9%): [2.470, 37.276] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 8, nValues = 3)

# Run progress: 35.90% complete, ETA 03:01:11
# Fork: 1 of 1
# Warmup Iteration   1: 17.327 ms/op
# Warmup Iteration   2: 15.469 ms/op
# Warmup Iteration   3: 15.904 ms/op
# Warmup Iteration   4: 16.161 ms/op
# Warmup Iteration   5: 15.972 ms/op
Iteration   1: 16.475 ms/op
Iteration   2: 16.086 ms/op
Iteration   3: 20.088 ms/op
Iteration   4: 27.058 ms/op
Iteration   5: 22.562 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  20.454 ±(99.9%) 17.551 ms/op [Average]
  (min, avg, max) = (16.086, 20.454, 27.058), stdev = 4.558
  CI (99.9%): [2.902, 38.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 16, nValues = 2)

# Run progress: 35.97% complete, ETA 03:00:57
# Fork: 1 of 1
# Warmup Iteration   1: 33.050 ms/op
# Warmup Iteration   2: 29.832 ms/op
# Warmup Iteration   3: 28.599 ms/op
# Warmup Iteration   4: 29.977 ms/op
# Warmup Iteration   5: 28.607 ms/op
Iteration   1: 31.660 ms/op
Iteration   2: 29.324 ms/op
Iteration   3: 39.000 ms/op
Iteration   4: 51.091 ms/op
Iteration   5: 49.947 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  40.205 ±(99.9%) 38.808 ms/op [Average]
  (min, avg, max) = (29.324, 40.205, 51.091), stdev = 10.078
  CI (99.9%): [1.397, 79.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 16, nValues = 3)

# Run progress: 36.04% complete, ETA 03:00:44
# Fork: 1 of 1
# Warmup Iteration   1: 32.575 ms/op
# Warmup Iteration   2: 29.193 ms/op
# Warmup Iteration   3: 29.423 ms/op
# Warmup Iteration   4: 28.743 ms/op
# Warmup Iteration   5: 28.010 ms/op
Iteration   1: 28.020 ms/op
Iteration   2: 32.134 ms/op
Iteration   3: 41.805 ms/op
Iteration   4: 42.609 ms/op
Iteration   5: 41.485 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  37.211 ±(99.9%) 25.742 ms/op [Average]
  (min, avg, max) = (28.020, 37.211, 42.609), stdev = 6.685
  CI (99.9%): [11.468, 62.953] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 32, nValues = 2)

# Run progress: 36.11% complete, ETA 03:00:30
# Fork: 1 of 1
# Warmup Iteration   1: 62.407 ms/op
# Warmup Iteration   2: 69.075 ms/op
# Warmup Iteration   3: 63.332 ms/op
# Warmup Iteration   4: 60.766 ms/op
# Warmup Iteration   5: 57.515 ms/op
Iteration   1: 65.109 ms/op
Iteration   2: 60.664 ms/op
Iteration   3: 98.124 ms/op
Iteration   4: 113.571 ms/op
Iteration   5: 90.610 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  85.616 ±(99.9%) 86.233 ms/op [Average]
  (min, avg, max) = (60.664, 85.616, 113.571), stdev = 22.394
  CI (99.9%): [? 0, 171.849] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 32, nValues = 3)

# Run progress: 36.18% complete, ETA 03:00:17
# Fork: 1 of 1
# Warmup Iteration   1: 58.022 ms/op
# Warmup Iteration   2: 58.671 ms/op
# Warmup Iteration   3: 58.733 ms/op
# Warmup Iteration   4: 58.239 ms/op
# Warmup Iteration   5: 60.174 ms/op
Iteration   1: 60.675 ms/op
Iteration   2: 60.631 ms/op
Iteration   3: 120.219 ms/op
Iteration   4: 96.288 ms/op
Iteration   5: 84.881 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  84.539 ±(99.9%) 97.268 ms/op [Average]
  (min, avg, max) = (60.631, 84.539, 120.219), stdev = 25.260
  CI (99.9%): [? 0, 181.807] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 64, nValues = 2)

# Run progress: 36.25% complete, ETA 03:00:04
# Fork: 1 of 1
# Warmup Iteration   1: 111.521 ms/op
# Warmup Iteration   2: 111.613 ms/op
# Warmup Iteration   3: 121.572 ms/op
# Warmup Iteration   4: 113.653 ms/op
# Warmup Iteration   5: 120.342 ms/op
Iteration   1: 113.329 ms/op
Iteration   2: 119.364 ms/op
Iteration   3: 215.265 ms/op
Iteration   4: 178.090 ms/op
Iteration   5: 168.463 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  158.902 ±(99.9%) 164.235 ms/op [Average]
  (min, avg, max) = (113.329, 158.902, 215.265), stdev = 42.651
  CI (99.9%): [? 0, 323.137] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 64, nValues = 3)

# Run progress: 36.32% complete, ETA 02:59:51
# Fork: 1 of 1
# Warmup Iteration   1: 112.565 ms/op
# Warmup Iteration   2: 105.317 ms/op
# Warmup Iteration   3: 125.457 ms/op
# Warmup Iteration   4: 187.624 ms/op
# Warmup Iteration   5: 249.404 ms/op
Iteration   1: 247.368 ms/op
Iteration   2: 277.871 ms/op
Iteration   3: 320.166 ms/op
Iteration   4: 257.698 ms/op
Iteration   5: 222.676 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  265.156 ±(99.9%) 141.014 ms/op [Average]
  (min, avg, max) = (222.676, 265.156, 320.166), stdev = 36.621
  CI (99.9%): [124.142, 406.170] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 128, nValues = 2)

# Run progress: 36.39% complete, ETA 02:59:40
# Fork: 1 of 1
# Warmup Iteration   1: 242.122 ms/op
# Warmup Iteration   2: 291.375 ms/op
# Warmup Iteration   3: 265.989 ms/op
# Warmup Iteration   4: 354.952 ms/op
# Warmup Iteration   5: 306.295 ms/op
Iteration   1: 238.287 ms/op
Iteration   2: 334.611 ms/op
Iteration   3: 356.461 ms/op
Iteration   4: 341.097 ms/op
Iteration   5: 297.491 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  313.589 ±(99.9%) 182.308 ms/op [Average]
  (min, avg, max) = (238.287, 313.589, 356.461), stdev = 47.345
  CI (99.9%): [131.282, 495.897] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 128, nValues = 3)

# Run progress: 36.46% complete, ETA 02:59:29
# Fork: 1 of 1
# Warmup Iteration   1: 225.997 ms/op
# Warmup Iteration   2: 204.749 ms/op
# Warmup Iteration   3: 229.143 ms/op
# Warmup Iteration   4: 210.202 ms/op
# Warmup Iteration   5: 218.891 ms/op
Iteration   1: 209.019 ms/op
Iteration   2: 213.806 ms/op
Iteration   3: 345.834 ms/op
Iteration   4: 394.537 ms/op
Iteration   5: 360.432 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  304.725 ±(99.9%) 335.057 ms/op [Average]
  (min, avg, max) = (209.019, 304.725, 394.537), stdev = 87.013
  CI (99.9%): [? 0, 639.783] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 256, nValues = 2)

# Run progress: 36.53% complete, ETA 02:59:16
# Fork: 1 of 1
# Warmup Iteration   1: 460.221 ms/op
# Warmup Iteration   2: 458.412 ms/op
# Warmup Iteration   3: 429.080 ms/op
# Warmup Iteration   4: 420.607 ms/op
# Warmup Iteration   5: 474.953 ms/op
Iteration   1: 522.201 ms/op
Iteration   2: 662.468 ms/op
Iteration   3: 588.347 ms/op
Iteration   4: 695.391 ms/op
Iteration   5: 656.469 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  624.975 ±(99.9%) 267.198 ms/op [Average]
  (min, avg, max) = (522.201, 624.975, 695.391), stdev = 69.390
  CI (99.9%): [357.777, 892.173] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 256, nValues = 3)

# Run progress: 36.60% complete, ETA 02:59:08
# Fork: 1 of 1
# Warmup Iteration   1: 440.550 ms/op
# Warmup Iteration   2: 412.473 ms/op
# Warmup Iteration   3: 407.483 ms/op
# Warmup Iteration   4: 429.069 ms/op
# Warmup Iteration   5: 431.630 ms/op
Iteration   1: 410.949 ms/op
Iteration   2: 662.880 ms/op
Iteration   3: 544.600 ms/op
Iteration   4: 621.814 ms/op
Iteration   5: 704.607 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  588.970 ±(99.9%) 445.634 ms/op [Average]
  (min, avg, max) = (410.949, 588.970, 704.607), stdev = 115.730
  CI (99.9%): [143.336, 1034.604] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 512, nValues = 2)

# Run progress: 36.67% complete, ETA 02:58:59
# Fork: 1 of 1
# Warmup Iteration   1: 871.176 ms/op
# Warmup Iteration   2: 838.513 ms/op
# Warmup Iteration   3: 869.720 ms/op
# Warmup Iteration   4: 829.188 ms/op
# Warmup Iteration   5: 1038.518 ms/op
Iteration   1: 1341.177 ms/op
Iteration   2: 1228.853 ms/op
Iteration   3: 1780.515 ms/op
Iteration   4: 1315.993 ms/op
Iteration   5: 1248.140 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  1382.936 ±(99.9%) 874.287 ms/op [Average]
  (min, avg, max) = (1228.853, 1382.936, 1780.515), stdev = 227.050
  CI (99.9%): [508.648, 2257.223] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 512, nValues = 3)

# Run progress: 36.74% complete, ETA 02:58:55
# Fork: 1 of 1
# Warmup Iteration   1: 867.462 ms/op
# Warmup Iteration   2: 832.797 ms/op
# Warmup Iteration   3: 845.167 ms/op
# Warmup Iteration   4: 793.114 ms/op
# Warmup Iteration   5: 982.991 ms/op
Iteration   1: 1869.466 ms/op
Iteration   2: 1179.051 ms/op
Iteration   3: 1207.674 ms/op
Iteration   4: 1156.641 ms/op
Iteration   5: 1297.384 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  1342.043 ±(99.9%) 1153.853 ms/op [Average]
  (min, avg, max) = (1156.641, 1342.043, 1869.466), stdev = 299.652
  CI (99.9%): [188.190, 2495.896] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 1024, nValues = 2)

# Run progress: 36.81% complete, ETA 02:58:50
# Fork: 1 of 1
# Warmup Iteration   1: 1750.053 ms/op
# Warmup Iteration   2: 1671.146 ms/op
# Warmup Iteration   3: 1655.518 ms/op
# Warmup Iteration   4: 1735.030 ms/op
# Warmup Iteration   5: 3278.555 ms/op
Iteration   1: 3110.624 ms/op
Iteration   2: 2587.096 ms/op
Iteration   3: 2426.666 ms/op
Iteration   4: 2416.671 ms/op
Iteration   5: 2617.344 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  2631.680 ±(99.9%) 1088.856 ms/op [Average]
  (min, avg, max) = (2416.671, 2631.680, 3110.624), stdev = 282.772
  CI (99.9%): [1542.824, 3720.536] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 1024, nValues = 3)

# Run progress: 36.88% complete, ETA 02:58:58
# Fork: 1 of 1
# Warmup Iteration   1: 1978.069 ms/op
# Warmup Iteration   2: 1853.869 ms/op
# Warmup Iteration   3: 1816.361 ms/op
# Warmup Iteration   4: 1625.268 ms/op
# Warmup Iteration   5: 2316.523 ms/op
Iteration   1: 2760.219 ms/op
Iteration   2: 2702.447 ms/op
Iteration   3: 2677.818 ms/op
Iteration   4: 3769.563 ms/op
Iteration   5: 2674.116 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  2916.832 ±(99.9%) 1840.347 ms/op [Average]
  (min, avg, max) = (2674.116, 2916.832, 3769.563), stdev = 477.932
  CI (99.9%): [1076.485, 4757.179] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 2048, nValues = 2)

# Run progress: 36.94% complete, ETA 02:59:09
# Fork: 1 of 1
# Warmup Iteration   1: 3576.539 ms/op
# Warmup Iteration   2: 3352.569 ms/op
# Warmup Iteration   3: 4858.512 ms/op
# Warmup Iteration   4: 5596.392 ms/op
# Warmup Iteration   5: 7867.651 ms/op
Iteration   1: 5180.833 ms/op
Iteration   2: 5395.408 ms/op
Iteration   3: 5413.794 ms/op
Iteration   4: 5196.514 ms/op
Iteration   5: 5374.290 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  5312.168 ±(99.9%) 437.943 ms/op [Average]
  (min, avg, max) = (5180.833, 5312.168, 5413.794), stdev = 113.732
  CI (99.9%): [4874.224, 5750.111] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 2048, nValues = 3)

# Run progress: 37.01% complete, ETA 03:00:05
# Fork: 1 of 1
# Warmup Iteration   1: 3609.650 ms/op
# Warmup Iteration   2: 3405.906 ms/op
# Warmup Iteration   3: 5494.894 ms/op
# Warmup Iteration   4: 5273.499 ms/op
# Warmup Iteration   5: 5053.369 ms/op
Iteration   1: 5472.090 ms/op
Iteration   2: 5422.879 ms/op
Iteration   3: 5031.445 ms/op
Iteration   4: 6643.281 ms/op
Iteration   5: 4831.052 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  5480.149 ±(99.9%) 2708.404 ms/op [Average]
  (min, avg, max) = (4831.052, 5480.149, 6643.281), stdev = 703.364
  CI (99.9%): [2771.745, 8188.554] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 4096, nValues = 2)

# Run progress: 37.08% complete, ETA 03:00:59
# Fork: 1 of 1
# Warmup Iteration   1: 7553.097 ms/op
# Warmup Iteration   2: 6960.705 ms/op
# Warmup Iteration   3: 6758.744 ms/op
# Warmup Iteration   4: 6725.883 ms/op
# Warmup Iteration   5: 6723.821 ms/op
Iteration   1: 7337.513 ms/op
Iteration   2: 6659.464 ms/op
Iteration   3: 6643.805 ms/op
Iteration   4: 6622.873 ms/op
Iteration   5: 6605.679 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  6773.867 ±(99.9%) 1215.834 ms/op [Average]
  (min, avg, max) = (6605.679, 6773.867, 7337.513), stdev = 315.748
  CI (99.9%): [5558.033, 7989.700] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 4096, nValues = 3)

# Run progress: 37.15% complete, ETA 03:02:24
# Fork: 1 of 1
# Warmup Iteration   1: 7197.647 ms/op
# Warmup Iteration   2: 6603.651 ms/op
# Warmup Iteration   3: 6564.032 ms/op
# Warmup Iteration   4: 7180.708 ms/op
# Warmup Iteration   5: 6593.950 ms/op
Iteration   1: 6557.895 ms/op
Iteration   2: 6454.372 ms/op
Iteration   3: 6506.029 ms/op
Iteration   4: 6475.658 ms/op
Iteration   5: 6482.370 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  6495.265 ±(99.9%) 152.348 ms/op [Average]
  (min, avg, max) = (6454.372, 6495.265, 6557.895), stdev = 39.564
  CI (99.9%): [6342.917, 6647.613] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 8192, nValues = 2)

# Run progress: 37.22% complete, ETA 03:03:45
# Fork: 1 of 1
# Warmup Iteration   1: 14012.557 ms/op
# Warmup Iteration   2: 13517.961 ms/op
# Warmup Iteration   3: 13482.202 ms/op
# Warmup Iteration   4: 13529.251 ms/op
# Warmup Iteration   5: 13379.356 ms/op
Iteration   1: 13974.080 ms/op
Iteration   2: 13486.741 ms/op
Iteration   3: 13446.715 ms/op
Iteration   4: 13626.572 ms/op
Iteration   5: 13398.705 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  13586.563 ±(99.9%) 896.015 ms/op [Average]
  (min, avg, max) = (13398.705, 13586.563, 13974.080), stdev = 232.692
  CI (99.9%): [12690.548, 14482.577] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 8192, nValues = 3)

# Run progress: 37.29% complete, ETA 03:07:01
# Fork: 1 of 1
# Warmup Iteration   1: 14291.980 ms/op
# Warmup Iteration   2: 13231.240 ms/op
# Warmup Iteration   3: 13129.281 ms/op
# Warmup Iteration   4: 14624.039 ms/op
# Warmup Iteration   5: 13197.880 ms/op
Iteration   1: 13116.603 ms/op
Iteration   2: 13096.563 ms/op
Iteration   3: 13214.558 ms/op
Iteration   4: 13310.308 ms/op
Iteration   5: 13291.329 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  13205.872 ±(99.9%) 376.314 ms/op [Average]
  (min, avg, max) = (13096.563, 13205.872, 13310.308), stdev = 97.728
  CI (99.9%): [12829.558, 13582.186] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 16384, nValues = 2)

# Run progress: 37.36% complete, ETA 03:10:14
# Fork: 1 of 1
# Warmup Iteration   1: 27741.695 ms/op
# Warmup Iteration   2: 26623.405 ms/op
# Warmup Iteration   3: 27179.203 ms/op
# Warmup Iteration   4: 28501.767 ms/op
# Warmup Iteration   5: 35076.880 ms/op
Iteration   1: 27191.427 ms/op
Iteration   2: 26995.952 ms/op
Iteration   3: 29288.016 ms/op
Iteration   4: 29822.237 ms/op
Iteration   5: 29610.995 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  28581.725 ±(99.9%) 5288.407 ms/op [Average]
  (min, avg, max) = (26995.952, 28581.725, 29822.237), stdev = 1373.383
  CI (99.9%): [23293.318, 33870.133] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 16384, nValues = 3)

# Run progress: 37.43% complete, ETA 03:17:42
# Fork: 1 of 1
# Warmup Iteration   1: 27865.579 ms/op
# Warmup Iteration   2: 26208.863 ms/op
# Warmup Iteration   3: 27477.753 ms/op
# Warmup Iteration   4: 25990.244 ms/op
# Warmup Iteration   5: 26313.201 ms/op
Iteration   1: 26268.506 ms/op
Iteration   2: 26330.718 ms/op
Iteration   3: 30874.239 ms/op
Iteration   4: 28828.825 ms/op
Iteration   5: 28618.527 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark":
  28184.163 ±(99.9%) 7443.249 ms/op [Average]
  (min, avg, max) = (26268.506, 28184.163, 30874.239), stdev = 1932.988
  CI (99.9%): [20740.914, 35627.411] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 1, nValues = 2)

# Run progress: 37.50% complete, ETA 03:24:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 1, nValues = 3)

# Run progress: 37.57% complete, ETA 03:24:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 2, nValues = 2)

# Run progress: 37.64% complete, ETA 03:24:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 2, nValues = 3)

# Run progress: 37.71% complete, ETA 03:23:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 4, nValues = 2)

# Run progress: 37.78% complete, ETA 03:23:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 4, nValues = 3)

# Run progress: 37.85% complete, ETA 03:23:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.003, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 8, nValues = 2)

# Run progress: 37.92% complete, ETA 03:22:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.007 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.006, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 8, nValues = 3)

# Run progress: 37.99% complete, ETA 03:22:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.007 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.007, 0.007, 0.008), stdev = 0.001
  CI (99.9%): [0.007, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 16, nValues = 2)

# Run progress: 38.06% complete, ETA 03:22:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.009 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.009, 0.009, 0.010), stdev = 0.001
  CI (99.9%): [0.008, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 16, nValues = 3)

# Run progress: 38.13% complete, ETA 03:21:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.014 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.014, 0.014, 0.014), stdev = 0.001
  CI (99.9%): [0.012, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 32, nValues = 2)

# Run progress: 38.19% complete, ETA 03:21:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.017 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.016, 0.017, 0.018), stdev = 0.001
  CI (99.9%): [0.015, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 32, nValues = 3)

# Run progress: 38.26% complete, ETA 03:21:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.024 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.023, 0.024, 0.025), stdev = 0.001
  CI (99.9%): [0.021, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 64, nValues = 2)

# Run progress: 38.33% complete, ETA 03:21:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
# Warmup Iteration   2: 0.036 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.039 ms/op
# Warmup Iteration   5: 0.037 ms/op
Iteration   1: 0.037 ms/op
Iteration   2: 0.037 ms/op
Iteration   3: 0.038 ms/op
Iteration   4: 0.040 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.038 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.037, 0.038, 0.040), stdev = 0.001
  CI (99.9%): [0.033, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 64, nValues = 3)

# Run progress: 38.40% complete, ETA 03:20:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.043 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.035 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.035 ms/op
Iteration   1: 0.035 ms/op
Iteration   2: 0.034 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.034 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.035 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.034, 0.035, 0.037), stdev = 0.001
  CI (99.9%): [0.030, 0.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 128, nValues = 2)

# Run progress: 38.47% complete, ETA 03:20:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.087 ms/op
# Warmup Iteration   2: 0.069 ms/op
# Warmup Iteration   3: 0.069 ms/op
# Warmup Iteration   4: 0.070 ms/op
# Warmup Iteration   5: 0.074 ms/op
Iteration   1: 0.069 ms/op
Iteration   2: 0.069 ms/op
Iteration   3: 0.069 ms/op
Iteration   4: 0.070 ms/op
Iteration   5: 0.073 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.070 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.069, 0.070, 0.073), stdev = 0.002
  CI (99.9%): [0.063, 0.077] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 128, nValues = 3)

# Run progress: 38.54% complete, ETA 03:20:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.084 ms/op
# Warmup Iteration   2: 0.069 ms/op
# Warmup Iteration   3: 0.069 ms/op
# Warmup Iteration   4: 0.069 ms/op
# Warmup Iteration   5: 0.070 ms/op
Iteration   1: 0.074 ms/op
Iteration   2: 0.069 ms/op
Iteration   3: 0.070 ms/op
Iteration   4: 0.069 ms/op
Iteration   5: 0.069 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.070 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.069, 0.070, 0.074), stdev = 0.002
  CI (99.9%): [0.063, 0.078] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 256, nValues = 2)

# Run progress: 38.61% complete, ETA 03:19:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.139 ms/op
# Warmup Iteration   2: 0.106 ms/op
# Warmup Iteration   3: 0.104 ms/op
# Warmup Iteration   4: 0.104 ms/op
# Warmup Iteration   5: 0.105 ms/op
Iteration   1: 0.113 ms/op
Iteration   2: 0.105 ms/op
Iteration   3: 0.105 ms/op
Iteration   4: 0.104 ms/op
Iteration   5: 0.105 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.106 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.104, 0.106, 0.113), stdev = 0.004
  CI (99.9%): [0.092, 0.121] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 256, nValues = 3)

# Run progress: 38.68% complete, ETA 03:19:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.204 ms/op
# Warmup Iteration   2: 0.160 ms/op
# Warmup Iteration   3: 0.154 ms/op
# Warmup Iteration   4: 0.153 ms/op
# Warmup Iteration   5: 0.155 ms/op
Iteration   1: 0.155 ms/op
Iteration   2: 0.165 ms/op
Iteration   3: 0.155 ms/op
Iteration   4: 0.155 ms/op
Iteration   5: 0.155 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.157 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.155, 0.157, 0.165), stdev = 0.005
  CI (99.9%): [0.139, 0.175] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 512, nValues = 2)

# Run progress: 38.75% complete, ETA 03:19:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.309 ms/op
# Warmup Iteration   2: 0.295 ms/op
# Warmup Iteration   3: 0.269 ms/op
# Warmup Iteration   4: 0.268 ms/op
# Warmup Iteration   5: 0.273 ms/op
Iteration   1: 0.269 ms/op
Iteration   2: 0.275 ms/op
Iteration   3: 0.281 ms/op
Iteration   4: 0.266 ms/op
Iteration   5: 0.270 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.272 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.266, 0.272, 0.281), stdev = 0.006
  CI (99.9%): [0.249, 0.295] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 512, nValues = 3)

# Run progress: 38.82% complete, ETA 03:18:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.461 ms/op
# Warmup Iteration   2: 0.399 ms/op
# Warmup Iteration   3: 0.420 ms/op
# Warmup Iteration   4: 0.389 ms/op
# Warmup Iteration   5: 0.397 ms/op
Iteration   1: 0.393 ms/op
Iteration   2: 0.391 ms/op
Iteration   3: 0.429 ms/op
Iteration   4: 0.394 ms/op
Iteration   5: 0.395 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.400 ±(99.9%) 0.061 ms/op [Average]
  (min, avg, max) = (0.391, 0.400, 0.429), stdev = 0.016
  CI (99.9%): [0.339, 0.462] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 1024, nValues = 2)

# Run progress: 38.89% complete, ETA 03:18:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.458 ms/op
# Warmup Iteration   2: 0.390 ms/op
# Warmup Iteration   3: 0.415 ms/op
# Warmup Iteration   4: 0.384 ms/op
# Warmup Iteration   5: 0.383 ms/op
Iteration   1: 0.383 ms/op
Iteration   2: 0.389 ms/op
Iteration   3: 0.382 ms/op
Iteration   4: 0.409 ms/op
Iteration   5: 0.388 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.390 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.382, 0.390, 0.409), stdev = 0.011
  CI (99.9%): [0.349, 0.431] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 1024, nValues = 3)

# Run progress: 38.96% complete, ETA 03:18:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.804 ms/op
# Warmup Iteration   2: 0.685 ms/op
# Warmup Iteration   3: 0.690 ms/op
# Warmup Iteration   4: 0.750 ms/op
# Warmup Iteration   5: 0.688 ms/op
Iteration   1: 0.682 ms/op
Iteration   2: 0.683 ms/op
Iteration   3: 0.698 ms/op
Iteration   4: 0.739 ms/op
Iteration   5: 0.736 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.708 ±(99.9%) 0.107 ms/op [Average]
  (min, avg, max) = (0.682, 0.708, 0.739), stdev = 0.028
  CI (99.9%): [0.600, 0.815] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 2048, nValues = 2)

# Run progress: 39.03% complete, ETA 03:17:55
# Fork: 1 of 1
# Warmup Iteration   1: 1.532 ms/op
# Warmup Iteration   2: 1.246 ms/op
# Warmup Iteration   3: 1.241 ms/op
# Warmup Iteration   4: 1.249 ms/op
# Warmup Iteration   5: 1.317 ms/op
Iteration   1: 1.235 ms/op
Iteration   2: 1.227 ms/op
Iteration   3: 1.235 ms/op
Iteration   4: 1.249 ms/op
Iteration   5: 1.329 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  1.255 ±(99.9%) 0.161 ms/op [Average]
  (min, avg, max) = (1.227, 1.255, 1.329), stdev = 0.042
  CI (99.9%): [1.094, 1.416] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 2048, nValues = 3)

# Run progress: 39.10% complete, ETA 03:17:36
# Fork: 1 of 1
# Warmup Iteration   1: 1.790 ms/op
# Warmup Iteration   2: 1.450 ms/op
# Warmup Iteration   3: 1.447 ms/op
# Warmup Iteration   4: 1.444 ms/op
# Warmup Iteration   5: 1.567 ms/op
Iteration   1: 1.456 ms/op
Iteration   2: 1.427 ms/op
Iteration   3: 1.461 ms/op
Iteration   4: 1.448 ms/op
Iteration   5: 1.449 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  1.448 ±(99.9%) 0.049 ms/op [Average]
  (min, avg, max) = (1.427, 1.448, 1.461), stdev = 0.013
  CI (99.9%): [1.399, 1.497] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 4096, nValues = 2)

# Run progress: 39.17% complete, ETA 03:17:18
# Fork: 1 of 1
# Warmup Iteration   1: 2.240 ms/op
# Warmup Iteration   2: 1.870 ms/op
# Warmup Iteration   3: 1.801 ms/op
# Warmup Iteration   4: 1.856 ms/op
# Warmup Iteration   5: 1.799 ms/op
Iteration   1: 1.958 ms/op
Iteration   2: 1.840 ms/op
Iteration   3: 1.826 ms/op
Iteration   4: 1.843 ms/op
Iteration   5: 1.829 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  1.859 ±(99.9%) 0.215 ms/op [Average]
  (min, avg, max) = (1.826, 1.859, 1.958), stdev = 0.056
  CI (99.9%): [1.645, 2.074] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 4096, nValues = 3)

# Run progress: 39.24% complete, ETA 03:17:00
# Fork: 1 of 1
# Warmup Iteration   1: 4.589 ms/op
# Warmup Iteration   2: 3.002 ms/op
# Warmup Iteration   3: 2.968 ms/op
# Warmup Iteration   4: 2.972 ms/op
# Warmup Iteration   5: 2.964 ms/op
Iteration   1: 3.197 ms/op
Iteration   2: 3.086 ms/op
Iteration   3: 2.994 ms/op
Iteration   4: 3.000 ms/op
Iteration   5: 2.991 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  3.054 ±(99.9%) 0.343 ms/op [Average]
  (min, avg, max) = (2.991, 3.054, 3.197), stdev = 0.089
  CI (99.9%): [2.710, 3.397] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 8192, nValues = 2)

# Run progress: 39.31% complete, ETA 03:16:42
# Fork: 1 of 1
# Warmup Iteration   1: 5.601 ms/op
# Warmup Iteration   2: 4.654 ms/op
# Warmup Iteration   3: 4.499 ms/op
# Warmup Iteration   4: 4.510 ms/op
# Warmup Iteration   5: 4.467 ms/op
Iteration   1: 4.455 ms/op
Iteration   2: 4.838 ms/op
Iteration   3: 4.504 ms/op
Iteration   4: 4.482 ms/op
Iteration   5: 4.448 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  4.545 ±(99.9%) 0.635 ms/op [Average]
  (min, avg, max) = (4.448, 4.545, 4.838), stdev = 0.165
  CI (99.9%): [3.910, 5.180] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 8192, nValues = 3)

# Run progress: 39.38% complete, ETA 03:16:23
# Fork: 1 of 1
# Warmup Iteration   1: 6.816 ms/op
# Warmup Iteration   2: 6.264 ms/op
# Warmup Iteration   3: 5.639 ms/op
# Warmup Iteration   4: 5.652 ms/op
# Warmup Iteration   5: 5.600 ms/op
Iteration   1: 5.546 ms/op
Iteration   2: 5.646 ms/op
Iteration   3: 6.026 ms/op
Iteration   4: 5.651 ms/op
Iteration   5: 5.620 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  5.698 ±(99.9%) 0.725 ms/op [Average]
  (min, avg, max) = (5.546, 5.698, 6.026), stdev = 0.188
  CI (99.9%): [4.973, 6.423] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 16384, nValues = 2)

# Run progress: 39.44% complete, ETA 03:16:05
# Fork: 1 of 1
# Warmup Iteration   1: 8.422 ms/op
# Warmup Iteration   2: 7.167 ms/op
# Warmup Iteration   3: 7.607 ms/op
# Warmup Iteration   4: 6.981 ms/op
# Warmup Iteration   5: 7.110 ms/op
Iteration   1: 7.084 ms/op
Iteration   2: 7.070 ms/op
Iteration   3: 7.474 ms/op
Iteration   4: 7.097 ms/op
Iteration   5: 7.080 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  7.161 ±(99.9%) 0.675 ms/op [Average]
  (min, avg, max) = (7.070, 7.161, 7.474), stdev = 0.175
  CI (99.9%): [6.486, 7.836] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 32, nPutAll = 16384, nValues = 3)

# Run progress: 39.51% complete, ETA 03:15:47
# Fork: 1 of 1
# Warmup Iteration   1: 13.233 ms/op
# Warmup Iteration   2: 10.941 ms/op
# Warmup Iteration   3: 11.108 ms/op
# Warmup Iteration   4: 10.900 ms/op
# Warmup Iteration   5: 10.638 ms/op
Iteration   1: 10.662 ms/op
Iteration   2: 10.733 ms/op
Iteration   3: 10.676 ms/op
Iteration   4: 11.790 ms/op
Iteration   5: 10.606 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  10.893 ±(99.9%) 1.938 ms/op [Average]
  (min, avg, max) = (10.606, 10.893, 11.790), stdev = 0.503
  CI (99.9%): [8.955, 12.832] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 1, nValues = 2)

# Run progress: 39.58% complete, ETA 03:15:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.135 ms/op
# Warmup Iteration   2: 0.120 ms/op
# Warmup Iteration   3: 0.120 ms/op
# Warmup Iteration   4: 0.128 ms/op
# Warmup Iteration   5: 0.120 ms/op
Iteration   1: 0.120 ms/op
Iteration   2: 0.118 ms/op
Iteration   3: 0.120 ms/op
Iteration   4: 0.123 ms/op
Iteration   5: 0.127 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.122 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.118, 0.122, 0.127), stdev = 0.004
  CI (99.9%): [0.108, 0.135] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 1, nValues = 3)

# Run progress: 39.65% complete, ETA 03:15:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.195 ms/op
# Warmup Iteration   2: 0.184 ms/op
# Warmup Iteration   3: 0.180 ms/op
# Warmup Iteration   4: 0.179 ms/op
# Warmup Iteration   5: 0.194 ms/op
Iteration   1: 0.179 ms/op
Iteration   2: 0.178 ms/op
Iteration   3: 0.178 ms/op
Iteration   4: 0.179 ms/op
Iteration   5: 0.191 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.181 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.178, 0.181, 0.191), stdev = 0.006
  CI (99.9%): [0.160, 0.202] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 2, nValues = 2)

# Run progress: 39.72% complete, ETA 03:14:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.155 ms/op
# Warmup Iteration   2: 0.135 ms/op
# Warmup Iteration   3: 0.135 ms/op
# Warmup Iteration   4: 0.135 ms/op
# Warmup Iteration   5: 0.141 ms/op
Iteration   1: 0.141 ms/op
Iteration   2: 0.135 ms/op
Iteration   3: 0.135 ms/op
Iteration   4: 0.136 ms/op
Iteration   5: 0.136 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.137 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.135, 0.137, 0.141), stdev = 0.002
  CI (99.9%): [0.127, 0.146] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 2, nValues = 3)

# Run progress: 39.79% complete, ETA 03:14:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.260 ms/op
# Warmup Iteration   2: 0.219 ms/op
# Warmup Iteration   3: 0.215 ms/op
# Warmup Iteration   4: 0.216 ms/op
# Warmup Iteration   5: 0.216 ms/op
Iteration   1: 0.235 ms/op
Iteration   2: 0.219 ms/op
Iteration   3: 0.215 ms/op
Iteration   4: 0.215 ms/op
Iteration   5: 0.216 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.220 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.215, 0.220, 0.235), stdev = 0.008
  CI (99.9%): [0.187, 0.253] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 4, nValues = 2)

# Run progress: 39.86% complete, ETA 03:14:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.262 ms/op
# Warmup Iteration   2: 0.203 ms/op
# Warmup Iteration   3: 0.202 ms/op
# Warmup Iteration   4: 0.204 ms/op
# Warmup Iteration   5: 0.204 ms/op
Iteration   1: 0.202 ms/op
Iteration   2: 0.216 ms/op
Iteration   3: 0.203 ms/op
Iteration   4: 0.202 ms/op
Iteration   5: 0.202 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.205 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.202, 0.205, 0.216), stdev = 0.006
  CI (99.9%): [0.182, 0.228] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 4, nValues = 3)

# Run progress: 39.93% complete, ETA 03:13:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.320 ms/op
# Warmup Iteration   2: 0.289 ms/op
# Warmup Iteration   3: 0.268 ms/op
# Warmup Iteration   4: 0.265 ms/op
# Warmup Iteration   5: 0.263 ms/op
Iteration   1: 0.268 ms/op
Iteration   2: 0.279 ms/op
Iteration   3: 0.274 ms/op
Iteration   4: 0.265 ms/op
Iteration   5: 0.268 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.271 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.265, 0.271, 0.279), stdev = 0.006
  CI (99.9%): [0.248, 0.293] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 8, nValues = 2)

# Run progress: 40.00% complete, ETA 03:13:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.334 ms/op
# Warmup Iteration   2: 0.280 ms/op
# Warmup Iteration   3: 0.297 ms/op
# Warmup Iteration   4: 0.278 ms/op
# Warmup Iteration   5: 0.277 ms/op
Iteration   1: 0.278 ms/op
Iteration   2: 0.280 ms/op
Iteration   3: 0.300 ms/op
Iteration   4: 0.277 ms/op
Iteration   5: 0.279 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.283 ±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (0.277, 0.283, 0.300), stdev = 0.010
  CI (99.9%): [0.246, 0.319] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 8, nValues = 3)

# Run progress: 40.07% complete, ETA 03:13:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.447 ms/op
# Warmup Iteration   2: 0.347 ms/op
# Warmup Iteration   3: 0.369 ms/op
# Warmup Iteration   4: 0.343 ms/op
# Warmup Iteration   5: 0.345 ms/op
Iteration   1: 0.340 ms/op
Iteration   2: 0.343 ms/op
Iteration   3: 0.342 ms/op
Iteration   4: 0.369 ms/op
Iteration   5: 0.341 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.347 ±(99.9%) 0.048 ms/op [Average]
  (min, avg, max) = (0.340, 0.347, 0.369), stdev = 0.012
  CI (99.9%): [0.299, 0.395] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 16, nValues = 2)

# Run progress: 40.14% complete, ETA 03:13:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.513 ms/op
# Warmup Iteration   2: 0.419 ms/op
# Warmup Iteration   3: 0.423 ms/op
# Warmup Iteration   4: 0.456 ms/op
# Warmup Iteration   5: 0.422 ms/op
Iteration   1: 0.414 ms/op
Iteration   2: 0.420 ms/op
Iteration   3: 0.423 ms/op
Iteration   4: 0.441 ms/op
Iteration   5: 0.420 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.424 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.414, 0.424, 0.441), stdev = 0.010
  CI (99.9%): [0.385, 0.463] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 16, nValues = 3)

# Run progress: 40.21% complete, ETA 03:12:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.662 ms/op
# Warmup Iteration   2: 0.533 ms/op
# Warmup Iteration   3: 0.536 ms/op
# Warmup Iteration   4: 0.542 ms/op
# Warmup Iteration   5: 0.547 ms/op
Iteration   1: 0.528 ms/op
Iteration   2: 0.529 ms/op
Iteration   3: 0.526 ms/op
Iteration   4: 0.528 ms/op
Iteration   5: 0.563 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.535 ±(99.9%) 0.061 ms/op [Average]
  (min, avg, max) = (0.526, 0.535, 0.563), stdev = 0.016
  CI (99.9%): [0.474, 0.596] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 32, nValues = 2)

# Run progress: 40.28% complete, ETA 03:12:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.953 ms/op
# Warmup Iteration   2: 0.783 ms/op
# Warmup Iteration   3: 0.769 ms/op
# Warmup Iteration   4: 0.758 ms/op
# Warmup Iteration   5: 0.816 ms/op
Iteration   1: 0.749 ms/op
Iteration   2: 0.752 ms/op
Iteration   3: 0.751 ms/op
Iteration   4: 0.754 ms/op
Iteration   5: 0.772 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  0.756 ±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (0.749, 0.756, 0.772), stdev = 0.009
  CI (99.9%): [0.721, 0.791] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 32, nValues = 3)

# Run progress: 40.35% complete, ETA 03:12:11
# Fork: 1 of 1
# Warmup Iteration   1: 1.274 ms/op
# Warmup Iteration   2: 0.996 ms/op
# Warmup Iteration   3: 0.996 ms/op
# Warmup Iteration   4: 1.001 ms/op
# Warmup Iteration   5: 0.996 ms/op
Iteration   1: 1.072 ms/op
Iteration   2: 0.985 ms/op
Iteration   3: 0.992 ms/op
Iteration   4: 0.983 ms/op
Iteration   5: 0.996 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  1.006 ±(99.9%) 0.146 ms/op [Average]
  (min, avg, max) = (0.983, 1.006, 1.072), stdev = 0.038
  CI (99.9%): [0.860, 1.151] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 64, nValues = 2)

# Run progress: 40.42% complete, ETA 03:11:53
# Fork: 1 of 1
# Warmup Iteration   1: 1.850 ms/op
# Warmup Iteration   2: 1.372 ms/op
# Warmup Iteration   3: 1.361 ms/op
# Warmup Iteration   4: 1.339 ms/op
# Warmup Iteration   5: 1.377 ms/op
Iteration   1: 1.391 ms/op
Iteration   2: 1.404 ms/op
Iteration   3: 1.340 ms/op
Iteration   4: 1.342 ms/op
Iteration   5: 1.352 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  1.366 ±(99.9%) 0.116 ms/op [Average]
  (min, avg, max) = (1.340, 1.366, 1.404), stdev = 0.030
  CI (99.9%): [1.250, 1.481] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 64, nValues = 3)

# Run progress: 40.49% complete, ETA 03:11:35
# Fork: 1 of 1
# Warmup Iteration   1: 2.387 ms/op
# Warmup Iteration   2: 1.941 ms/op
# Warmup Iteration   3: 1.859 ms/op
# Warmup Iteration   4: 1.832 ms/op
# Warmup Iteration   5: 1.835 ms/op
Iteration   1: 1.828 ms/op
Iteration   2: 2.015 ms/op
Iteration   3: 1.837 ms/op
Iteration   4: 1.844 ms/op
Iteration   5: 1.877 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  1.880 ±(99.9%) 0.299 ms/op [Average]
  (min, avg, max) = (1.828, 1.880, 2.015), stdev = 0.078
  CI (99.9%): [1.581, 2.179] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 128, nValues = 2)

# Run progress: 40.56% complete, ETA 03:11:18
# Fork: 1 of 1
# Warmup Iteration   1: 3.545 ms/op
# Warmup Iteration   2: 3.035 ms/op
# Warmup Iteration   3: 2.809 ms/op
# Warmup Iteration   4: 2.784 ms/op
# Warmup Iteration   5: 2.793 ms/op
Iteration   1: 2.821 ms/op
Iteration   2: 2.783 ms/op
Iteration   3: 2.987 ms/op
Iteration   4: 2.797 ms/op
Iteration   5: 2.779 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  2.833 ±(99.9%) 0.337 ms/op [Average]
  (min, avg, max) = (2.779, 2.833, 2.987), stdev = 0.087
  CI (99.9%): [2.497, 3.170] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 128, nValues = 3)

# Run progress: 40.63% complete, ETA 03:11:00
# Fork: 1 of 1
# Warmup Iteration   1: 4.506 ms/op
# Warmup Iteration   2: 3.672 ms/op
# Warmup Iteration   3: 3.942 ms/op
# Warmup Iteration   4: 3.670 ms/op
# Warmup Iteration   5: 3.657 ms/op
Iteration   1: 3.664 ms/op
Iteration   2: 3.610 ms/op
Iteration   3: 3.846 ms/op
Iteration   4: 3.675 ms/op
Iteration   5: 3.616 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  3.682 ±(99.9%) 0.369 ms/op [Average]
  (min, avg, max) = (3.610, 3.682, 3.846), stdev = 0.096
  CI (99.9%): [3.313, 4.051] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 256, nValues = 2)

# Run progress: 40.69% complete, ETA 03:10:42
# Fork: 1 of 1
# Warmup Iteration   1: 6.974 ms/op
# Warmup Iteration   2: 5.673 ms/op
# Warmup Iteration   3: 5.795 ms/op
# Warmup Iteration   4: 5.980 ms/op
# Warmup Iteration   5: 5.593 ms/op
Iteration   1: 5.672 ms/op
Iteration   2: 5.560 ms/op
Iteration   3: 5.629 ms/op
Iteration   4: 5.862 ms/op
Iteration   5: 5.664 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  5.677 ±(99.9%) 0.431 ms/op [Average]
  (min, avg, max) = (5.560, 5.677, 5.862), stdev = 0.112
  CI (99.9%): [5.246, 6.109] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 256, nValues = 3)

# Run progress: 40.76% complete, ETA 03:10:24
# Fork: 1 of 1
# Warmup Iteration   1: 8.916 ms/op
# Warmup Iteration   2: 7.246 ms/op
# Warmup Iteration   3: 7.172 ms/op
# Warmup Iteration   4: 7.761 ms/op
# Warmup Iteration   5: 7.132 ms/op
Iteration   1: 7.093 ms/op
Iteration   2: 7.194 ms/op
Iteration   3: 7.178 ms/op
Iteration   4: 7.159 ms/op
Iteration   5: 7.710 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  7.267 ±(99.9%) 0.965 ms/op [Average]
  (min, avg, max) = (7.093, 7.267, 7.710), stdev = 0.251
  CI (99.9%): [6.302, 8.232] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 512, nValues = 2)

# Run progress: 40.83% complete, ETA 03:10:07
# Fork: 1 of 1
# Warmup Iteration   1: 14.313 ms/op
# Warmup Iteration   2: 11.832 ms/op
# Warmup Iteration   3: 11.969 ms/op
# Warmup Iteration   4: 11.858 ms/op
# Warmup Iteration   5: 12.726 ms/op
Iteration   1: 11.897 ms/op
Iteration   2: 11.838 ms/op
Iteration   3: 11.722 ms/op
Iteration   4: 11.782 ms/op
Iteration   5: 12.821 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  12.012 ±(99.9%) 1.759 ms/op [Average]
  (min, avg, max) = (11.722, 12.012, 12.821), stdev = 0.457
  CI (99.9%): [10.253, 13.771] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 512, nValues = 3)

# Run progress: 40.90% complete, ETA 03:09:49
# Fork: 1 of 1
# Warmup Iteration   1: 16.774 ms/op
# Warmup Iteration   2: 13.596 ms/op
# Warmup Iteration   3: 13.437 ms/op
# Warmup Iteration   4: 13.443 ms/op
# Warmup Iteration   5: 14.184 ms/op
Iteration   1: 13.795 ms/op
Iteration   2: 13.533 ms/op
Iteration   3: 13.464 ms/op
Iteration   4: 13.395 ms/op
Iteration   5: 13.421 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  13.522 ±(99.9%) 0.622 ms/op [Average]
  (min, avg, max) = (13.395, 13.522, 13.795), stdev = 0.161
  CI (99.9%): [12.900, 14.143] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 1024, nValues = 2)

# Run progress: 40.97% complete, ETA 03:09:31
# Fork: 1 of 1
# Warmup Iteration   1: 28.366 ms/op
# Warmup Iteration   2: 22.156 ms/op
# Warmup Iteration   3: 21.969 ms/op
# Warmup Iteration   4: 22.000 ms/op
# Warmup Iteration   5: 21.943 ms/op
Iteration   1: 23.692 ms/op
Iteration   2: 21.947 ms/op
Iteration   3: 21.740 ms/op
Iteration   4: 21.931 ms/op
Iteration   5: 22.024 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  22.267 ±(99.9%) 3.094 ms/op [Average]
  (min, avg, max) = (21.740, 22.267, 23.692), stdev = 0.804
  CI (99.9%): [19.172, 25.361] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 1024, nValues = 3)

# Run progress: 41.04% complete, ETA 03:09:14
# Fork: 1 of 1
# Warmup Iteration   1: 37.668 ms/op
# Warmup Iteration   2: 28.395 ms/op
# Warmup Iteration   3: 28.092 ms/op
# Warmup Iteration   4: 28.022 ms/op
# Warmup Iteration   5: 27.992 ms/op
Iteration   1: 29.999 ms/op
Iteration   2: 28.521 ms/op
Iteration   3: 28.267 ms/op
Iteration   4: 28.237 ms/op
Iteration   5: 28.315 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  28.668 ±(99.9%) 2.898 ms/op [Average]
  (min, avg, max) = (28.237, 28.668, 29.999), stdev = 0.753
  CI (99.9%): [25.769, 31.566] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 2048, nValues = 2)

# Run progress: 41.11% complete, ETA 03:08:57
# Fork: 1 of 1
# Warmup Iteration   1: 53.639 ms/op
# Warmup Iteration   2: 41.122 ms/op
# Warmup Iteration   3: 39.427 ms/op
# Warmup Iteration   4: 39.898 ms/op
# Warmup Iteration   5: 39.563 ms/op
Iteration   1: 39.428 ms/op
Iteration   2: 42.799 ms/op
Iteration   3: 40.047 ms/op
Iteration   4: 39.758 ms/op
Iteration   5: 39.643 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  40.335 ±(99.9%) 5.374 ms/op [Average]
  (min, avg, max) = (39.428, 40.335, 42.799), stdev = 1.395
  CI (99.9%): [34.962, 45.709] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 2048, nValues = 3)

# Run progress: 41.18% complete, ETA 03:08:39
# Fork: 1 of 1
# Warmup Iteration   1: 67.542 ms/op
# Warmup Iteration   2: 58.376 ms/op
# Warmup Iteration   3: 54.741 ms/op
# Warmup Iteration   4: 54.022 ms/op
# Warmup Iteration   5: 53.550 ms/op
Iteration   1: 53.297 ms/op
Iteration   2: 57.939 ms/op
Iteration   3: 53.736 ms/op
Iteration   4: 53.440 ms/op
Iteration   5: 54.406 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  54.564 ±(99.9%) 7.449 ms/op [Average]
  (min, avg, max) = (53.297, 54.564, 57.939), stdev = 1.935
  CI (99.9%): [47.114, 62.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 4096, nValues = 2)

# Run progress: 41.25% complete, ETA 03:08:22
# Fork: 1 of 1
# Warmup Iteration   1: 104.403 ms/op
# Warmup Iteration   2: 93.827 ms/op
# Warmup Iteration   3: 87.544 ms/op
# Warmup Iteration   4: 85.355 ms/op
# Warmup Iteration   5: 85.069 ms/op
Iteration   1: 86.232 ms/op
Iteration   2: 87.242 ms/op
Iteration   3: 90.249 ms/op
Iteration   4: 85.309 ms/op
Iteration   5: 86.415 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  87.090 ±(99.9%) 7.298 ms/op [Average]
  (min, avg, max) = (85.309, 87.090, 90.249), stdev = 1.895
  CI (99.9%): [79.792, 94.387] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 4096, nValues = 3)

# Run progress: 41.32% complete, ETA 03:08:05
# Fork: 1 of 1
# Warmup Iteration   1: 150.096 ms/op
# Warmup Iteration   2: 116.361 ms/op
# Warmup Iteration   3: 118.750 ms/op
# Warmup Iteration   4: 113.067 ms/op
# Warmup Iteration   5: 113.012 ms/op
Iteration   1: 112.560 ms/op
Iteration   2: 114.212 ms/op
Iteration   3: 120.352 ms/op
Iteration   4: 114.638 ms/op
Iteration   5: 114.835 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  115.319 ±(99.9%) 11.368 ms/op [Average]
  (min, avg, max) = (112.560, 115.319, 120.352), stdev = 2.952
  CI (99.9%): [103.951, 126.688] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 8192, nValues = 2)

# Run progress: 41.39% complete, ETA 03:07:48
# Fork: 1 of 1
# Warmup Iteration   1: 229.105 ms/op
# Warmup Iteration   2: 184.258 ms/op
# Warmup Iteration   3: 200.959 ms/op
# Warmup Iteration   4: 184.392 ms/op
# Warmup Iteration   5: 185.478 ms/op
Iteration   1: 184.809 ms/op
Iteration   2: 183.969 ms/op
Iteration   3: 198.669 ms/op
Iteration   4: 185.397 ms/op
Iteration   5: 187.146 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  187.998 ±(99.9%) 23.404 ms/op [Average]
  (min, avg, max) = (183.969, 187.998, 198.669), stdev = 6.078
  CI (99.9%): [164.594, 211.402] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 8192, nValues = 3)

# Run progress: 41.46% complete, ETA 03:07:32
# Fork: 1 of 1
# Warmup Iteration   1: 277.641 ms/op
# Warmup Iteration   2: 217.873 ms/op
# Warmup Iteration   3: 213.388 ms/op
# Warmup Iteration   4: 209.799 ms/op
# Warmup Iteration   5: 207.267 ms/op
Iteration   1: 204.989 ms/op
Iteration   2: 205.740 ms/op
Iteration   3: 216.655 ms/op
Iteration   4: 205.906 ms/op
Iteration   5: 205.401 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  207.738 ±(99.9%) 19.241 ms/op [Average]
  (min, avg, max) = (204.989, 207.738, 216.655), stdev = 4.997
  CI (99.9%): [188.497, 226.979] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 16384, nValues = 2)

# Run progress: 41.53% complete, ETA 03:07:15
# Fork: 1 of 1
# Warmup Iteration   1: 407.378 ms/op
# Warmup Iteration   2: 345.355 ms/op
# Warmup Iteration   3: 364.894 ms/op
# Warmup Iteration   4: 346.014 ms/op
# Warmup Iteration   5: 347.366 ms/op
Iteration   1: 345.604 ms/op
Iteration   2: 347.440 ms/op
Iteration   3: 383.623 ms/op
Iteration   4: 347.624 ms/op
Iteration   5: 343.580 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  353.574 ±(99.9%) 64.988 ms/op [Average]
  (min, avg, max) = (343.580, 353.574, 383.623), stdev = 16.877
  CI (99.9%): [288.586, 418.562] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 1000, nPutAll = 16384, nValues = 3)

# Run progress: 41.60% complete, ETA 03:06:59
# Fork: 1 of 1
# Warmup Iteration   1: 565.257 ms/op
# Warmup Iteration   2: 441.796 ms/op
# Warmup Iteration   3: 435.923 ms/op
# Warmup Iteration   4: 427.296 ms/op
# Warmup Iteration   5: 421.656 ms/op
Iteration   1: 422.714 ms/op
Iteration   2: 447.347 ms/op
Iteration   3: 426.014 ms/op
Iteration   4: 423.671 ms/op
Iteration   5: 426.413 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  429.232 ±(99.9%) 39.452 ms/op [Average]
  (min, avg, max) = (422.714, 429.232, 447.347), stdev = 10.246
  CI (99.9%): [389.780, 468.684] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 1, nValues = 2)

# Run progress: 41.67% complete, ETA 03:06:45
# Fork: 1 of 1
# Warmup Iteration   1: 39.898 ms/op
# Warmup Iteration   2: 31.303 ms/op
# Warmup Iteration   3: 30.912 ms/op
# Warmup Iteration   4: 30.970 ms/op
# Warmup Iteration   5: 31.306 ms/op
Iteration   1: 32.973 ms/op
Iteration   2: 30.639 ms/op
Iteration   3: 31.269 ms/op
Iteration   4: 30.882 ms/op
Iteration   5: 30.650 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  31.283 ±(99.9%) 3.770 ms/op [Average]
  (min, avg, max) = (30.639, 31.283, 32.973), stdev = 0.979
  CI (99.9%): [27.513, 35.052] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 1, nValues = 3)

# Run progress: 41.74% complete, ETA 03:06:28
# Fork: 1 of 1
# Warmup Iteration   1: 57.597 ms/op
# Warmup Iteration   2: 44.254 ms/op
# Warmup Iteration   3: 42.977 ms/op
# Warmup Iteration   4: 43.378 ms/op
# Warmup Iteration   5: 42.738 ms/op
Iteration   1: 44.443 ms/op
Iteration   2: 44.331 ms/op
Iteration   3: 42.937 ms/op
Iteration   4: 43.351 ms/op
Iteration   5: 43.068 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  43.626 ±(99.9%) 2.740 ms/op [Average]
  (min, avg, max) = (42.937, 43.626, 44.443), stdev = 0.712
  CI (99.9%): [40.886, 46.366] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 2, nValues = 2)

# Run progress: 41.81% complete, ETA 03:06:11
# Fork: 1 of 1
# Warmup Iteration   1: 47.369 ms/op
# Warmup Iteration   2: 37.878 ms/op
# Warmup Iteration   3: 36.748 ms/op
# Warmup Iteration   4: 36.704 ms/op
# Warmup Iteration   5: 36.687 ms/op
Iteration   1: 36.932 ms/op
Iteration   2: 39.261 ms/op
Iteration   3: 37.201 ms/op
Iteration   4: 36.627 ms/op
Iteration   5: 37.029 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  37.410 ±(99.9%) 4.065 ms/op [Average]
  (min, avg, max) = (36.627, 37.410, 39.261), stdev = 1.056
  CI (99.9%): [33.345, 41.475] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 2, nValues = 3)

# Run progress: 41.88% complete, ETA 03:05:54
# Fork: 1 of 1
# Warmup Iteration   1: 64.275 ms/op
# Warmup Iteration   2: 53.608 ms/op
# Warmup Iteration   3: 48.241 ms/op
# Warmup Iteration   4: 48.758 ms/op
# Warmup Iteration   5: 48.524 ms/op
Iteration   1: 49.123 ms/op
Iteration   2: 52.704 ms/op
Iteration   3: 49.344 ms/op
Iteration   4: 48.716 ms/op
Iteration   5: 48.448 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  49.667 ±(99.9%) 6.672 ms/op [Average]
  (min, avg, max) = (48.448, 49.667, 52.704), stdev = 1.733
  CI (99.9%): [42.995, 56.339] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 4, nValues = 2)

# Run progress: 41.94% complete, ETA 03:05:37
# Fork: 1 of 1
# Warmup Iteration   1: 65.658 ms/op
# Warmup Iteration   2: 56.154 ms/op
# Warmup Iteration   3: 52.880 ms/op
# Warmup Iteration   4: 53.220 ms/op
# Warmup Iteration   5: 52.799 ms/op
Iteration   1: 52.518 ms/op
Iteration   2: 52.883 ms/op
Iteration   3: 56.768 ms/op
Iteration   4: 53.545 ms/op
Iteration   5: 52.938 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  53.730 ±(99.9%) 6.691 ms/op [Average]
  (min, avg, max) = (52.518, 53.730, 56.768), stdev = 1.738
  CI (99.9%): [47.039, 60.422] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 4, nValues = 3)

# Run progress: 42.01% complete, ETA 03:05:20
# Fork: 1 of 1
# Warmup Iteration   1: 94.734 ms/op
# Warmup Iteration   2: 71.828 ms/op
# Warmup Iteration   3: 73.081 ms/op
# Warmup Iteration   4: 69.533 ms/op
# Warmup Iteration   5: 69.236 ms/op
Iteration   1: 68.509 ms/op
Iteration   2: 69.391 ms/op
Iteration   3: 74.579 ms/op
Iteration   4: 69.122 ms/op
Iteration   5: 68.729 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  70.066 ±(99.9%) 9.804 ms/op [Average]
  (min, avg, max) = (68.509, 70.066, 74.579), stdev = 2.546
  CI (99.9%): [60.263, 79.870] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 8, nValues = 2)

# Run progress: 42.08% complete, ETA 03:05:04
# Fork: 1 of 1
# Warmup Iteration   1: 104.255 ms/op
# Warmup Iteration   2: 82.596 ms/op
# Warmup Iteration   3: 89.920 ms/op
# Warmup Iteration   4: 81.569 ms/op
# Warmup Iteration   5: 81.056 ms/op
Iteration   1: 81.147 ms/op
Iteration   2: 81.944 ms/op
Iteration   3: 89.720 ms/op
Iteration   4: 81.715 ms/op
Iteration   5: 81.063 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  83.118 ±(99.9%) 14.284 ms/op [Average]
  (min, avg, max) = (81.063, 83.118, 89.720), stdev = 3.709
  CI (99.9%): [68.834, 97.401] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 8, nValues = 3)

# Run progress: 42.15% complete, ETA 03:04:47
# Fork: 1 of 1
# Warmup Iteration   1: 137.305 ms/op
# Warmup Iteration   2: 105.018 ms/op
# Warmup Iteration   3: 115.301 ms/op
# Warmup Iteration   4: 105.961 ms/op
# Warmup Iteration   5: 104.029 ms/op
Iteration   1: 104.527 ms/op
Iteration   2: 102.783 ms/op
Iteration   3: 114.398 ms/op
Iteration   4: 105.322 ms/op
Iteration   5: 104.254 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  106.257 ±(99.9%) 17.878 ms/op [Average]
  (min, avg, max) = (102.783, 106.257, 114.398), stdev = 4.643
  CI (99.9%): [88.379, 124.135] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 16, nValues = 2)

# Run progress: 42.22% complete, ETA 03:04:31
# Fork: 1 of 1
# Warmup Iteration   1: 179.597 ms/op
# Warmup Iteration   2: 137.800 ms/op
# Warmup Iteration   3: 150.572 ms/op
# Warmup Iteration   4: 134.833 ms/op
# Warmup Iteration   5: 137.560 ms/op
Iteration   1: 136.731 ms/op
Iteration   2: 136.394 ms/op
Iteration   3: 150.286 ms/op
Iteration   4: 136.207 ms/op
Iteration   5: 134.932 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  138.910 ±(99.9%) 24.628 ms/op [Average]
  (min, avg, max) = (134.932, 138.910, 150.286), stdev = 6.396
  CI (99.9%): [114.282, 163.539] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 16, nValues = 3)

# Run progress: 42.29% complete, ETA 03:04:15
# Fork: 1 of 1
# Warmup Iteration   1: 250.777 ms/op
# Warmup Iteration   2: 178.910 ms/op
# Warmup Iteration   3: 195.250 ms/op
# Warmup Iteration   4: 179.881 ms/op
# Warmup Iteration   5: 179.325 ms/op
Iteration   1: 181.125 ms/op
Iteration   2: 182.095 ms/op
Iteration   3: 193.283 ms/op
Iteration   4: 176.696 ms/op
Iteration   5: 178.535 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  182.347 ±(99.9%) 24.927 ms/op [Average]
  (min, avg, max) = (176.696, 182.347, 193.283), stdev = 6.473
  CI (99.9%): [157.420, 207.273] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 32, nValues = 2)

# Run progress: 42.36% complete, ETA 03:03:59
# Fork: 1 of 1
# Warmup Iteration   1: 312.252 ms/op
# Warmup Iteration   2: 264.523 ms/op
# Warmup Iteration   3: 262.032 ms/op
# Warmup Iteration   4: 247.728 ms/op
# Warmup Iteration   5: 246.800 ms/op
Iteration   1: 252.262 ms/op
Iteration   2: 265.808 ms/op
Iteration   3: 256.614 ms/op
Iteration   4: 247.619 ms/op
Iteration   5: 247.302 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  253.921 ±(99.9%) 29.504 ms/op [Average]
  (min, avg, max) = (247.302, 253.921, 265.808), stdev = 7.662
  CI (99.9%): [224.417, 283.425] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 32, nValues = 3)

# Run progress: 42.43% complete, ETA 03:03:44
# Fork: 1 of 1
# Warmup Iteration   1: 447.146 ms/op
# Warmup Iteration   2: 370.301 ms/op
# Warmup Iteration   3: 339.989 ms/op
# Warmup Iteration   4: 344.949 ms/op
# Warmup Iteration   5: 341.592 ms/op
Iteration   1: 349.006 ms/op
Iteration   2: 367.455 ms/op
Iteration   3: 333.342 ms/op
Iteration   4: 342.168 ms/op
Iteration   5: 344.018 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  347.198 ±(99.9%) 48.746 ms/op [Average]
  (min, avg, max) = (333.342, 347.198, 367.455), stdev = 12.659
  CI (99.9%): [298.452, 395.943] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 64, nValues = 2)

# Run progress: 42.50% complete, ETA 03:03:29
# Fork: 1 of 1
# Warmup Iteration   1: 660.448 ms/op
# Warmup Iteration   2: 479.685 ms/op
# Warmup Iteration   3: 474.153 ms/op
# Warmup Iteration   4: 479.558 ms/op
# Warmup Iteration   5: 520.602 ms/op
Iteration   1: 469.306 ms/op
Iteration   2: 479.600 ms/op
Iteration   3: 469.043 ms/op
Iteration   4: 503.943 ms/op
Iteration   5: 488.004 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  481.979 ±(99.9%) 56.210 ms/op [Average]
  (min, avg, max) = (469.043, 481.979, 503.943), stdev = 14.598
  CI (99.9%): [425.769, 538.189] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 64, nValues = 3)

# Run progress: 42.57% complete, ETA 03:03:16
# Fork: 1 of 1
# Warmup Iteration   1: 783.415 ms/op
# Warmup Iteration   2: 623.466 ms/op
# Warmup Iteration   3: 667.828 ms/op
# Warmup Iteration   4: 622.100 ms/op
# Warmup Iteration   5: 616.435 ms/op
Iteration   1: 608.100 ms/op
Iteration   2: 617.621 ms/op
Iteration   3: 664.238 ms/op
Iteration   4: 620.222 ms/op
Iteration   5: 621.619 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  626.360 ±(99.9%) 84.027 ms/op [Average]
  (min, avg, max) = (608.100, 626.360, 664.238), stdev = 21.822
  CI (99.9%): [542.333, 710.387] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 128, nValues = 2)

# Run progress: 42.64% complete, ETA 03:03:03
# Fork: 1 of 1
# Warmup Iteration   1: 1245.401 ms/op
# Warmup Iteration   2: 1047.895 ms/op
# Warmup Iteration   3: 922.310 ms/op
# Warmup Iteration   4: 905.511 ms/op
# Warmup Iteration   5: 972.377 ms/op
Iteration   1: 927.194 ms/op
Iteration   2: 926.005 ms/op
Iteration   3: 970.280 ms/op
Iteration   4: 917.850 ms/op
Iteration   5: 920.540 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  932.374 ±(99.9%) 82.929 ms/op [Average]
  (min, avg, max) = (917.850, 932.374, 970.280), stdev = 21.536
  CI (99.9%): [849.444, 1015.303] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 128, nValues = 3)

# Run progress: 42.71% complete, ETA 03:02:55
# Fork: 1 of 1
# Warmup Iteration   1: 1681.519 ms/op
# Warmup Iteration   2: 1276.071 ms/op
# Warmup Iteration   3: 1256.329 ms/op
# Warmup Iteration   4: 1277.710 ms/op
# Warmup Iteration   5: 1363.690 ms/op
Iteration   1: 1279.781 ms/op
Iteration   2: 1236.616 ms/op
Iteration   3: 1252.999 ms/op
Iteration   4: 1294.687 ms/op
Iteration   5: 1327.027 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  1278.222 ±(99.9%) 136.450 ms/op [Average]
  (min, avg, max) = (1236.616, 1278.222, 1327.027), stdev = 35.436
  CI (99.9%): [1141.772, 1414.672] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 256, nValues = 2)

# Run progress: 42.78% complete, ETA 03:02:43
# Fork: 1 of 1
# Warmup Iteration   1: 2233.386 ms/op
# Warmup Iteration   2: 2048.436 ms/op
# Warmup Iteration   3: 1918.984 ms/op
# Warmup Iteration   4: 1932.711 ms/op
# Warmup Iteration   5: 2036.133 ms/op
Iteration   1: 1911.558 ms/op
Iteration   2: 1922.525 ms/op
Iteration   3: 2053.387 ms/op
Iteration   4: 1923.125 ms/op
Iteration   5: 1930.317 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  1948.182 ±(99.9%) 227.927 ms/op [Average]
  (min, avg, max) = (1911.558, 1948.182, 2053.387), stdev = 59.192
  CI (99.9%): [1720.255, 2176.109] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 256, nValues = 3)

# Run progress: 42.85% complete, ETA 03:02:39
# Fork: 1 of 1
# Warmup Iteration   1: 2859.018 ms/op
# Warmup Iteration   2: 2474.575 ms/op
# Warmup Iteration   3: 2561.067 ms/op
# Warmup Iteration   4: 2468.656 ms/op
# Warmup Iteration   5: 2531.266 ms/op
Iteration   1: 2479.346 ms/op
Iteration   2: 2548.083 ms/op
Iteration   3: 2465.536 ms/op
Iteration   4: 2560.227 ms/op
Iteration   5: 2457.390 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  2502.116 ±(99.9%) 186.139 ms/op [Average]
  (min, avg, max) = (2457.390, 2502.116, 2560.227), stdev = 48.340
  CI (99.9%): [2315.977, 2688.256] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 512, nValues = 2)

# Run progress: 42.92% complete, ETA 03:02:42
# Fork: 1 of 1
# Warmup Iteration   1: 4095.467 ms/op
# Warmup Iteration   2: 3585.454 ms/op
# Warmup Iteration   3: 3676.971 ms/op
# Warmup Iteration   4: 3710.386 ms/op
# Warmup Iteration   5: 3559.670 ms/op
Iteration   1: 3699.633 ms/op
Iteration   2: 3676.419 ms/op
Iteration   3: 3558.576 ms/op
Iteration   4: 3660.493 ms/op
Iteration   5: 3705.037 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  3660.031 ±(99.9%) 229.072 ms/op [Average]
  (min, avg, max) = (3558.576, 3660.031, 3705.037), stdev = 59.489
  CI (99.9%): [3430.960, 3889.103] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 512, nValues = 3)

# Run progress: 42.99% complete, ETA 03:03:01
# Fork: 1 of 1
# Warmup Iteration   1: 5422.064 ms/op
# Warmup Iteration   2: 5031.381 ms/op
# Warmup Iteration   3: 4975.981 ms/op
# Warmup Iteration   4: 4881.281 ms/op
# Warmup Iteration   5: 4937.942 ms/op
Iteration   1: 4966.513 ms/op
Iteration   2: 4987.599 ms/op
Iteration   3: 4982.882 ms/op
Iteration   4: 4989.043 ms/op
Iteration   5: 4991.788 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  4983.565 ±(99.9%) 38.754 ms/op [Average]
  (min, avg, max) = (4966.513, 4983.565, 4991.788), stdev = 10.064
  CI (99.9%): [4944.811, 5022.319] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 1024, nValues = 2)

# Run progress: 43.06% complete, ETA 03:03:37
# Fork: 1 of 1
# Warmup Iteration   1: 7717.107 ms/op
# Warmup Iteration   2: 7367.048 ms/op
# Warmup Iteration   3: 7291.853 ms/op
# Warmup Iteration   4: 7294.834 ms/op
# Warmup Iteration   5: 7388.325 ms/op
Iteration   1: 7333.083 ms/op
Iteration   2: 7306.505 ms/op
Iteration   3: 7341.294 ms/op
Iteration   4: 7387.822 ms/op
Iteration   5: 7337.523 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  7341.245 ±(99.9%) 113.197 ms/op [Average]
  (min, avg, max) = (7306.505, 7341.245, 7387.822), stdev = 29.397
  CI (99.9%): [7228.048, 7454.443] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 1024, nValues = 3)

# Run progress: 43.13% complete, ETA 03:04:43
# Fork: 1 of 1
# Warmup Iteration   1: 10429.746 ms/op
# Warmup Iteration   2: 9737.562 ms/op
# Warmup Iteration   3: 9533.783 ms/op
# Warmup Iteration   4: 9619.298 ms/op
# Warmup Iteration   5: 9728.659 ms/op
Iteration   1: 9643.663 ms/op
Iteration   2: 9631.623 ms/op
Iteration   3: 9656.472 ms/op
Iteration   4: 9788.084 ms/op
Iteration   5: 9711.164 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  9686.201 ±(99.9%) 248.623 ms/op [Average]
  (min, avg, max) = (9631.623, 9686.201, 9788.084), stdev = 64.566
  CI (99.9%): [9437.579, 9934.824] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 2048, nValues = 2)

# Run progress: 43.19% complete, ETA 03:06:21
# Fork: 1 of 1
# Warmup Iteration   1: 15509.435 ms/op
# Warmup Iteration   2: 14839.600 ms/op
# Warmup Iteration   3: 14865.149 ms/op
# Warmup Iteration   4: 14771.266 ms/op
# Warmup Iteration   5: 14880.983 ms/op
Iteration   1: 14859.548 ms/op
Iteration   2: 14738.196 ms/op
Iteration   3: 14764.792 ms/op
Iteration   4: 14897.960 ms/op
Iteration   5: 14652.071 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  14782.513 ±(99.9%) 378.049 ms/op [Average]
  (min, avg, max) = (14652.071, 14782.513, 14897.960), stdev = 98.178
  CI (99.9%): [14404.465, 15160.562] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 2048, nValues = 3)

# Run progress: 43.26% complete, ETA 03:09:05
# Fork: 1 of 1
# Warmup Iteration   1: 21137.166 ms/op
# Warmup Iteration   2: 19964.803 ms/op
# Warmup Iteration   3: 23524.835 ms/op
# Warmup Iteration   4: 23669.667 ms/op
# Warmup Iteration   5: 21239.786 ms/op
Iteration   1: 20104.420 ms/op
Iteration   2: 20418.488 ms/op
Iteration   3: 20290.764 ms/op
Iteration   4: 19943.473 ms/op
Iteration   5: 19855.217 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  20122.472 ±(99.9%) 902.521 ms/op [Average]
  (min, avg, max) = (19855.217, 20122.472, 20418.488), stdev = 234.382
  CI (99.9%): [19219.951, 21024.993] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 4096, nValues = 2)

# Run progress: 43.33% complete, ETA 03:13:08
# Fork: 1 of 1
# Warmup Iteration   1: 30411.886 ms/op
# Warmup Iteration   2: 29455.268 ms/op
# Warmup Iteration   3: 29475.690 ms/op
# Warmup Iteration   4: 29875.947 ms/op
# Warmup Iteration   5: 29539.525 ms/op
Iteration   1: 29551.835 ms/op
Iteration   2: 29459.335 ms/op
Iteration   3: 29632.872 ms/op
Iteration   4: 29503.054 ms/op
Iteration   5: 29717.157 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  29572.851 ±(99.9%) 397.502 ms/op [Average]
  (min, avg, max) = (29459.335, 29572.851, 29717.157), stdev = 103.230
  CI (99.9%): [29175.349, 29970.353] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 4096, nValues = 3)

# Run progress: 43.40% complete, ETA 03:19:03
# Fork: 1 of 1
# Warmup Iteration   1: 43496.735 ms/op
# Warmup Iteration   2: 41635.557 ms/op
# Warmup Iteration   3: 41556.813 ms/op
# Warmup Iteration   4: 44763.607 ms/op
# Warmup Iteration   5: 41593.554 ms/op
Iteration   1: 42387.854 ms/op
Iteration   2: 42216.428 ms/op
Iteration   3: 41550.394 ms/op
Iteration   4: 41939.990 ms/op
Iteration   5: 41703.191 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  41959.571 ±(99.9%) 1337.983 ms/op [Average]
  (min, avg, max) = (41550.394, 41959.571, 42387.854), stdev = 347.470
  CI (99.9%): [40621.588, 43297.555] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 8192, nValues = 2)

# Run progress: 43.47% complete, ETA 03:27:40
# Fork: 1 of 1
# Warmup Iteration   1: 60463.826 ms/op
# Warmup Iteration   2: 59796.702 ms/op
# Warmup Iteration   3: 59504.909 ms/op
# Warmup Iteration   4: 59801.401 ms/op
# Warmup Iteration   5: 59963.142 ms/op
Iteration   1: 59182.492 ms/op
Iteration   2: 59897.257 ms/op
Iteration   3: 59473.863 ms/op
Iteration   4: 59564.132 ms/op
Iteration   5: 59985.866 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  59620.722 ±(99.9%) 1257.542 ms/op [Average]
  (min, avg, max) = (59182.492, 59620.722, 59985.866), stdev = 326.580
  CI (99.9%): [58363.180, 60878.264] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 8192, nValues = 3)

# Run progress: 43.54% complete, ETA 03:40:00
# Fork: 1 of 1
# Warmup Iteration   1: 78804.635 ms/op
# Warmup Iteration   2: 78550.413 ms/op
# Warmup Iteration   3: 80335.766 ms/op
# Warmup Iteration   4: 77133.823 ms/op
# Warmup Iteration   5: 98669.987 ms/op
Iteration   1: 142570.020 ms/op
Iteration   2: 153951.628 ms/op
Iteration   3: 158651.808 ms/op
Iteration   4: 161518.951 ms/op
Iteration   5: 142318.780 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  151802.237 ±(99.9%) 34501.470 ms/op [Average]
  (min, avg, max) = (142318.780, 151802.237, 161518.951), stdev = 8959.922
  CI (99.9%): [117300.767, 186303.707] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 16384, nValues = 2)

# Run progress: 43.61% complete, ETA 04:04:40
# Fork: 1 of 1
# Warmup Iteration   1: 177510.499 ms/op
# Warmup Iteration   2: 114933.084 ms/op
# Warmup Iteration   3: 117654.754 ms/op
# Warmup Iteration   4: 116845.748 ms/op
# Warmup Iteration   5: 117048.777 ms/op
Iteration   1: 116295.207 ms/op
Iteration   2: 116522.245 ms/op
Iteration   3: 117357.196 ms/op
Iteration   4: 116473.100 ms/op
Iteration   5: 116524.236 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  116634.397 ±(99.9%) 1597.226 ms/op [Average]
  (min, avg, max) = (116295.207, 116634.397, 117357.196), stdev = 414.794
  CI (99.9%): [115037.171, 118231.623] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark
# Parameters: (nKeys = 100000, nPutAll = 16384, nValues = 3)

# Run progress: 43.68% complete, ETA 04:30:21
# Fork: 1 of 1
# Warmup Iteration   1: 164593.762 ms/op
# Warmup Iteration   2: 163118.471 ms/op
# Warmup Iteration   3: 159237.099 ms/op
# Warmup Iteration   4: 161393.594 ms/op
# Warmup Iteration   5: 161245.034 ms/op
Iteration   1: 164775.822 ms/op
Iteration   2: 165534.084 ms/op
Iteration   3: 161807.925 ms/op
Iteration   4: 160102.532 ms/op
Iteration   5: 161333.716 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark":
  162710.816 ±(99.9%) 8979.073 ms/op [Average]
  (min, avg, max) = (160102.532, 162710.816, 165534.084), stdev = 2331.837
  CI (99.9%): [153731.742, 171689.889] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 1, nValues = 2)

# Run progress: 43.75% complete, ETA 05:04:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 1, nValues = 3)

# Run progress: 43.82% complete, ETA 05:03:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 2, nValues = 2)

# Run progress: 43.89% complete, ETA 05:03:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 2, nValues = 3)

# Run progress: 43.96% complete, ETA 05:02:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.003, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 4, nValues = 2)

# Run progress: 44.03% complete, ETA 05:01:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 4, nValues = 3)

# Run progress: 44.10% complete, ETA 05:01:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.007 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.007, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.007, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 8, nValues = 2)

# Run progress: 44.17% complete, ETA 05:00:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.009 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.009, 0.009, 0.009), stdev = 0.001
  CI (99.9%): [0.009, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 8, nValues = 3)

# Run progress: 44.24% complete, ETA 04:59:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.020 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.019, 0.020, 0.020), stdev = 0.001
  CI (99.9%): [0.018, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 16, nValues = 2)

# Run progress: 44.31% complete, ETA 04:59:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.013 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.013, 0.013, 0.014), stdev = 0.001
  CI (99.9%): [0.012, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 16, nValues = 3)

# Run progress: 44.38% complete, ETA 04:58:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.031 ms/op
Iteration   1: 0.030 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.030 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.030 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.030, 0.030, 0.031), stdev = 0.001
  CI (99.9%): [0.028, 0.032] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 32, nValues = 2)

# Run progress: 44.44% complete, ETA 04:58:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.061 ms/op
# Warmup Iteration   2: 0.056 ms/op
# Warmup Iteration   3: 0.055 ms/op
# Warmup Iteration   4: 0.055 ms/op
# Warmup Iteration   5: 0.057 ms/op
Iteration   1: 0.055 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.044 ms/op
Iteration   5: 0.046 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.047 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.044, 0.047, 0.055), stdev = 0.005
  CI (99.9%): [0.029, 0.065] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 32, nValues = 3)

# Run progress: 44.51% complete, ETA 04:57:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.064 ms/op
# Warmup Iteration   3: 0.064 ms/op
# Warmup Iteration   4: 0.064 ms/op
# Warmup Iteration   5: 0.064 ms/op
Iteration   1: 0.063 ms/op
Iteration   2: 0.063 ms/op
Iteration   3: 0.064 ms/op
Iteration   4: 0.067 ms/op
Iteration   5: 0.067 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.065 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.063, 0.065, 0.067), stdev = 0.002
  CI (99.9%): [0.057, 0.073] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 64, nValues = 2)

# Run progress: 44.58% complete, ETA 04:56:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.134 ms/op
# Warmup Iteration   2: 0.120 ms/op
# Warmup Iteration   3: 0.119 ms/op
# Warmup Iteration   4: 0.120 ms/op
# Warmup Iteration   5: 0.123 ms/op
Iteration   1: 0.120 ms/op
Iteration   2: 0.121 ms/op
Iteration   3: 0.120 ms/op
Iteration   4: 0.120 ms/op
Iteration   5: 0.123 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.121 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.120, 0.121, 0.123), stdev = 0.002
  CI (99.9%): [0.115, 0.127] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 64, nValues = 3)

# Run progress: 44.65% complete, ETA 04:56:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.168 ms/op
# Warmup Iteration   2: 0.149 ms/op
# Warmup Iteration   3: 0.146 ms/op
# Warmup Iteration   4: 0.145 ms/op
# Warmup Iteration   5: 0.150 ms/op
Iteration   1: 0.144 ms/op
Iteration   2: 0.145 ms/op
Iteration   3: 0.147 ms/op
Iteration   4: 0.147 ms/op
Iteration   5: 0.147 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.146 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.144, 0.146, 0.147), stdev = 0.001
  CI (99.9%): [0.141, 0.151] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 128, nValues = 2)

# Run progress: 44.72% complete, ETA 04:55:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.259 ms/op
# Warmup Iteration   2: 0.231 ms/op
# Warmup Iteration   3: 0.225 ms/op
# Warmup Iteration   4: 0.229 ms/op
# Warmup Iteration   5: 0.233 ms/op
Iteration   1: 0.233 ms/op
Iteration   2: 0.229 ms/op
Iteration   3: 0.230 ms/op
Iteration   4: 0.228 ms/op
Iteration   5: 0.232 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.230 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.228, 0.230, 0.233), stdev = 0.002
  CI (99.9%): [0.222, 0.238] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 128, nValues = 3)

# Run progress: 44.79% complete, ETA 04:55:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.349 ms/op
# Warmup Iteration   2: 0.317 ms/op
# Warmup Iteration   3: 0.318 ms/op
# Warmup Iteration   4: 0.322 ms/op
# Warmup Iteration   5: 0.317 ms/op
Iteration   1: 0.321 ms/op
Iteration   2: 0.317 ms/op
Iteration   3: 0.311 ms/op
Iteration   4: 0.314 ms/op
Iteration   5: 0.317 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.316 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.311, 0.316, 0.321), stdev = 0.004
  CI (99.9%): [0.301, 0.330] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 256, nValues = 2)

# Run progress: 44.86% complete, ETA 04:54:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.393 ms/op
# Warmup Iteration   2: 0.357 ms/op
# Warmup Iteration   3: 0.355 ms/op
# Warmup Iteration   4: 0.357 ms/op
# Warmup Iteration   5: 0.356 ms/op
Iteration   1: 0.368 ms/op
Iteration   2: 0.353 ms/op
Iteration   3: 0.354 ms/op
Iteration   4: 0.352 ms/op
Iteration   5: 0.359 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.357 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (0.352, 0.357, 0.368), stdev = 0.007
  CI (99.9%): [0.331, 0.383] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 256, nValues = 3)

# Run progress: 44.93% complete, ETA 04:53:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.547 ms/op
# Warmup Iteration   2: 0.490 ms/op
# Warmup Iteration   3: 0.489 ms/op
# Warmup Iteration   4: 0.483 ms/op
# Warmup Iteration   5: 0.487 ms/op
Iteration   1: 0.493 ms/op
Iteration   2: 0.492 ms/op
Iteration   3: 0.490 ms/op
Iteration   4: 0.496 ms/op
Iteration   5: 0.493 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.493 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.490, 0.493, 0.496), stdev = 0.002
  CI (99.9%): [0.484, 0.502] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 512, nValues = 2)

# Run progress: 45.00% complete, ETA 04:53:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.851 ms/op
# Warmup Iteration   2: 0.731 ms/op
# Warmup Iteration   3: 0.742 ms/op
# Warmup Iteration   4: 0.746 ms/op
# Warmup Iteration   5: 0.737 ms/op
Iteration   1: 0.761 ms/op
Iteration   2: 0.745 ms/op
Iteration   3: 0.737 ms/op
Iteration   4: 0.739 ms/op
Iteration   5: 0.740 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.745 ±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (0.737, 0.745, 0.761), stdev = 0.010
  CI (99.9%): [0.707, 0.782] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 512, nValues = 3)

# Run progress: 45.07% complete, ETA 04:52:34
# Fork: 1 of 1
# Warmup Iteration   1: 1.002 ms/op
# Warmup Iteration   2: 0.866 ms/op
# Warmup Iteration   3: 0.868 ms/op
# Warmup Iteration   4: 0.865 ms/op
# Warmup Iteration   5: 0.862 ms/op
Iteration   1: 0.903 ms/op
Iteration   2: 0.858 ms/op
Iteration   3: 0.871 ms/op
Iteration   4: 0.862 ms/op
Iteration   5: 0.865 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.872 ±(99.9%) 0.069 ms/op [Average]
  (min, avg, max) = (0.858, 0.872, 0.903), stdev = 0.018
  CI (99.9%): [0.802, 0.941] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 1024, nValues = 2)

# Run progress: 45.14% complete, ETA 04:51:58
# Fork: 1 of 1
# Warmup Iteration   1: 1.307 ms/op
# Warmup Iteration   2: 1.141 ms/op
# Warmup Iteration   3: 1.150 ms/op
# Warmup Iteration   4: 1.142 ms/op
# Warmup Iteration   5: 1.127 ms/op
Iteration   1: 1.169 ms/op
Iteration   2: 1.128 ms/op
Iteration   3: 1.139 ms/op
Iteration   4: 1.141 ms/op
Iteration   5: 1.133 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  1.142 ±(99.9%) 0.061 ms/op [Average]
  (min, avg, max) = (1.128, 1.142, 1.169), stdev = 0.016
  CI (99.9%): [1.081, 1.203] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 1024, nValues = 3)

# Run progress: 45.21% complete, ETA 04:51:21
# Fork: 1 of 1
# Warmup Iteration   1: 2.727 ms/op
# Warmup Iteration   2: 2.472 ms/op
# Warmup Iteration   3: 2.450 ms/op
# Warmup Iteration   4: 2.452 ms/op
# Warmup Iteration   5: 2.473 ms/op
Iteration   1: 2.523 ms/op
Iteration   2: 2.455 ms/op
Iteration   3: 2.413 ms/op
Iteration   4: 2.435 ms/op
Iteration   5: 2.467 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  2.458 ±(99.9%) 0.160 ms/op [Average]
  (min, avg, max) = (2.413, 2.458, 2.523), stdev = 0.042
  CI (99.9%): [2.298, 2.618] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 2048, nValues = 2)

# Run progress: 45.28% complete, ETA 04:50:45
# Fork: 1 of 1
# Warmup Iteration   1: 4.515 ms/op
# Warmup Iteration   2: 3.919 ms/op
# Warmup Iteration   3: 3.931 ms/op
# Warmup Iteration   4: 3.967 ms/op
# Warmup Iteration   5: 3.924 ms/op
Iteration   1: 3.945 ms/op
Iteration   2: 4.051 ms/op
Iteration   3: 3.855 ms/op
Iteration   4: 3.955 ms/op
Iteration   5: 3.894 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  3.940 ±(99.9%) 0.285 ms/op [Average]
  (min, avg, max) = (3.855, 3.940, 4.051), stdev = 0.074
  CI (99.9%): [3.654, 4.225] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 2048, nValues = 3)

# Run progress: 45.35% complete, ETA 04:50:09
# Fork: 1 of 1
# Warmup Iteration   1: 4.595 ms/op
# Warmup Iteration   2: 4.298 ms/op
# Warmup Iteration   3: 4.177 ms/op
# Warmup Iteration   4: 4.132 ms/op
# Warmup Iteration   5: 4.099 ms/op
Iteration   1: 4.093 ms/op
Iteration   2: 4.323 ms/op
Iteration   3: 4.111 ms/op
Iteration   4: 4.157 ms/op
Iteration   5: 4.084 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  4.154 ±(99.9%) 0.381 ms/op [Average]
  (min, avg, max) = (4.084, 4.154, 4.323), stdev = 0.099
  CI (99.9%): [3.773, 4.534] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 4096, nValues = 2)

# Run progress: 45.42% complete, ETA 04:49:32
# Fork: 1 of 1
# Warmup Iteration   1: 6.049 ms/op
# Warmup Iteration   2: 5.768 ms/op
# Warmup Iteration   3: 5.561 ms/op
# Warmup Iteration   4: 5.501 ms/op
# Warmup Iteration   5: 5.685 ms/op
Iteration   1: 5.842 ms/op
Iteration   2: 5.886 ms/op
Iteration   3: 5.665 ms/op
Iteration   4: 5.574 ms/op
Iteration   5: 5.586 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  5.710 ±(99.9%) 0.559 ms/op [Average]
  (min, avg, max) = (5.574, 5.710, 5.886), stdev = 0.145
  CI (99.9%): [5.152, 6.269] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 4096, nValues = 3)

# Run progress: 45.49% complete, ETA 04:48:56
# Fork: 1 of 1
# Warmup Iteration   1: 8.106 ms/op
# Warmup Iteration   2: 7.543 ms/op
# Warmup Iteration   3: 7.299 ms/op
# Warmup Iteration   4: 7.425 ms/op
# Warmup Iteration   5: 7.403 ms/op
Iteration   1: 7.298 ms/op
Iteration   2: 7.451 ms/op
Iteration   3: 7.334 ms/op
Iteration   4: 7.395 ms/op
Iteration   5: 7.345 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  7.365 ±(99.9%) 0.229 ms/op [Average]
  (min, avg, max) = (7.298, 7.365, 7.451), stdev = 0.059
  CI (99.9%): [7.136, 7.594] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 8192, nValues = 2)

# Run progress: 45.56% complete, ETA 04:48:20
# Fork: 1 of 1
# Warmup Iteration   1: 12.262 ms/op
# Warmup Iteration   2: 11.292 ms/op
# Warmup Iteration   3: 11.106 ms/op
# Warmup Iteration   4: 10.929 ms/op
# Warmup Iteration   5: 11.024 ms/op
Iteration   1: 11.018 ms/op
Iteration   2: 10.930 ms/op
Iteration   3: 11.342 ms/op
Iteration   4: 10.894 ms/op
Iteration   5: 10.963 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  11.029 ±(99.9%) 0.696 ms/op [Average]
  (min, avg, max) = (10.894, 11.029, 11.342), stdev = 0.181
  CI (99.9%): [10.334, 11.725] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 8192, nValues = 3)

# Run progress: 45.63% complete, ETA 04:47:44
# Fork: 1 of 1
# Warmup Iteration   1: 19.558 ms/op
# Warmup Iteration   2: 17.730 ms/op
# Warmup Iteration   3: 18.237 ms/op
# Warmup Iteration   4: 17.642 ms/op
# Warmup Iteration   5: 17.725 ms/op
Iteration   1: 17.386 ms/op
Iteration   2: 17.670 ms/op
Iteration   3: 18.368 ms/op
Iteration   4: 17.765 ms/op
Iteration   5: 17.706 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  17.779 ±(99.9%) 1.387 ms/op [Average]
  (min, avg, max) = (17.386, 17.779, 18.368), stdev = 0.360
  CI (99.9%): [16.392, 19.166] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 16384, nValues = 2)

# Run progress: 45.69% complete, ETA 04:47:09
# Fork: 1 of 1
# Warmup Iteration   1: 21.773 ms/op
# Warmup Iteration   2: 19.396 ms/op
# Warmup Iteration   3: 19.907 ms/op
# Warmup Iteration   4: 19.529 ms/op
# Warmup Iteration   5: 19.562 ms/op
Iteration   1: 19.887 ms/op
Iteration   2: 19.418 ms/op
Iteration   3: 20.520 ms/op
Iteration   4: 19.556 ms/op
Iteration   5: 19.524 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  19.781 ±(99.9%) 1.728 ms/op [Average]
  (min, avg, max) = (19.418, 19.781, 20.520), stdev = 0.449
  CI (99.9%): [18.054, 21.509] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 32, nPutAll = 16384, nValues = 3)

# Run progress: 45.76% complete, ETA 04:46:33
# Fork: 1 of 1
# Warmup Iteration   1: 44.187 ms/op
# Warmup Iteration   2: 40.475 ms/op
# Warmup Iteration   3: 41.981 ms/op
# Warmup Iteration   4: 40.470 ms/op
# Warmup Iteration   5: 40.898 ms/op
Iteration   1: 40.182 ms/op
Iteration   2: 39.870 ms/op
Iteration   3: 42.102 ms/op
Iteration   4: 39.954 ms/op
Iteration   5: 40.395 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  40.501 ±(99.9%) 3.536 ms/op [Average]
  (min, avg, max) = (39.870, 40.501, 42.102), stdev = 0.918
  CI (99.9%): [36.965, 44.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 1, nValues = 2)

# Run progress: 45.83% complete, ETA 04:45:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.146 ms/op
# Warmup Iteration   2: 0.136 ms/op
# Warmup Iteration   3: 0.140 ms/op
# Warmup Iteration   4: 0.132 ms/op
# Warmup Iteration   5: 0.133 ms/op
Iteration   1: 0.133 ms/op
Iteration   2: 0.132 ms/op
Iteration   3: 0.139 ms/op
Iteration   4: 0.132 ms/op
Iteration   5: 0.132 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.134 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.132, 0.134, 0.139), stdev = 0.003
  CI (99.9%): [0.123, 0.144] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 1, nValues = 3)

# Run progress: 45.90% complete, ETA 04:45:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.222 ms/op
# Warmup Iteration   2: 0.216 ms/op
# Warmup Iteration   3: 0.222 ms/op
# Warmup Iteration   4: 0.213 ms/op
# Warmup Iteration   5: 0.208 ms/op
Iteration   1: 0.213 ms/op
Iteration   2: 0.214 ms/op
Iteration   3: 0.215 ms/op
Iteration   4: 0.224 ms/op
Iteration   5: 0.212 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.216 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.212, 0.216, 0.224), stdev = 0.005
  CI (99.9%): [0.197, 0.235] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 2, nValues = 2)

# Run progress: 45.97% complete, ETA 04:44:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.333 ms/op
# Warmup Iteration   2: 0.315 ms/op
# Warmup Iteration   3: 0.309 ms/op
# Warmup Iteration   4: 0.324 ms/op
# Warmup Iteration   5: 0.311 ms/op
Iteration   1: 0.310 ms/op
Iteration   2: 0.307 ms/op
Iteration   3: 0.311 ms/op
Iteration   4: 0.323 ms/op
Iteration   5: 0.312 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.313 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.307, 0.313, 0.323), stdev = 0.006
  CI (99.9%): [0.290, 0.336] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 2, nValues = 3)

# Run progress: 46.04% complete, ETA 04:44:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.435 ms/op
# Warmup Iteration   2: 0.400 ms/op
# Warmup Iteration   3: 0.393 ms/op
# Warmup Iteration   4: 0.410 ms/op
# Warmup Iteration   5: 0.391 ms/op
Iteration   1: 0.396 ms/op
Iteration   2: 0.393 ms/op
Iteration   3: 0.393 ms/op
Iteration   4: 0.412 ms/op
Iteration   5: 0.393 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.397 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.393, 0.397, 0.412), stdev = 0.008
  CI (99.9%): [0.366, 0.429] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 4, nValues = 2)

# Run progress: 46.11% complete, ETA 04:43:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.627 ms/op
# Warmup Iteration   2: 0.565 ms/op
# Warmup Iteration   3: 0.563 ms/op
# Warmup Iteration   4: 0.587 ms/op
# Warmup Iteration   5: 0.569 ms/op
Iteration   1: 0.561 ms/op
Iteration   2: 0.562 ms/op
Iteration   3: 0.561 ms/op
Iteration   4: 0.568 ms/op
Iteration   5: 0.577 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.566 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (0.561, 0.566, 0.577), stdev = 0.007
  CI (99.9%): [0.540, 0.592] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 4, nValues = 3)

# Run progress: 46.18% complete, ETA 04:43:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.998 ms/op
# Warmup Iteration   2: 0.893 ms/op
# Warmup Iteration   3: 0.883 ms/op
# Warmup Iteration   4: 0.913 ms/op
# Warmup Iteration   5: 0.899 ms/op
Iteration   1: 0.884 ms/op
Iteration   2: 0.882 ms/op
Iteration   3: 0.879 ms/op
Iteration   4: 0.890 ms/op
Iteration   5: 0.915 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  0.890 ±(99.9%) 0.055 ms/op [Average]
  (min, avg, max) = (0.879, 0.890, 0.915), stdev = 0.014
  CI (99.9%): [0.835, 0.945] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 8, nValues = 2)

# Run progress: 46.25% complete, ETA 04:42:25
# Fork: 1 of 1
# Warmup Iteration   1: 1.321 ms/op
# Warmup Iteration   2: 1.209 ms/op
# Warmup Iteration   3: 1.223 ms/op
# Warmup Iteration   4: 1.222 ms/op
# Warmup Iteration   5: 1.297 ms/op
Iteration   1: 1.219 ms/op
Iteration   2: 1.215 ms/op
Iteration   3: 1.213 ms/op
Iteration   4: 1.220 ms/op
Iteration   5: 1.263 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  1.226 ±(99.9%) 0.080 ms/op [Average]
  (min, avg, max) = (1.213, 1.226, 1.263), stdev = 0.021
  CI (99.9%): [1.146, 1.306] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 8, nValues = 3)

# Run progress: 46.32% complete, ETA 04:41:50
# Fork: 1 of 1
# Warmup Iteration   1: 1.874 ms/op
# Warmup Iteration   2: 1.720 ms/op
# Warmup Iteration   3: 1.695 ms/op
# Warmup Iteration   4: 1.693 ms/op
# Warmup Iteration   5: 1.750 ms/op
Iteration   1: 1.692 ms/op
Iteration   2: 1.678 ms/op
Iteration   3: 1.692 ms/op
Iteration   4: 1.689 ms/op
Iteration   5: 1.739 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  1.698 ±(99.9%) 0.090 ms/op [Average]
  (min, avg, max) = (1.678, 1.698, 1.739), stdev = 0.023
  CI (99.9%): [1.607, 1.788] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 16, nValues = 2)

# Run progress: 46.39% complete, ETA 04:41:15
# Fork: 1 of 1
# Warmup Iteration   1: 2.585 ms/op
# Warmup Iteration   2: 2.303 ms/op
# Warmup Iteration   3: 2.336 ms/op
# Warmup Iteration   4: 2.317 ms/op
# Warmup Iteration   5: 2.431 ms/op
Iteration   1: 2.334 ms/op
Iteration   2: 2.340 ms/op
Iteration   3: 2.315 ms/op
Iteration   4: 2.319 ms/op
Iteration   5: 2.382 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  2.338 ±(99.9%) 0.104 ms/op [Average]
  (min, avg, max) = (2.315, 2.338, 2.382), stdev = 0.027
  CI (99.9%): [2.234, 2.442] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 16, nValues = 3)

# Run progress: 46.46% complete, ETA 04:40:40
# Fork: 1 of 1
# Warmup Iteration   1: 3.832 ms/op
# Warmup Iteration   2: 3.401 ms/op
# Warmup Iteration   3: 3.417 ms/op
# Warmup Iteration   4: 3.376 ms/op
# Warmup Iteration   5: 3.525 ms/op
Iteration   1: 3.373 ms/op
Iteration   2: 3.422 ms/op
Iteration   3: 3.429 ms/op
Iteration   4: 3.364 ms/op
Iteration   5: 3.350 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  3.388 ±(99.9%) 0.137 ms/op [Average]
  (min, avg, max) = (3.350, 3.388, 3.429), stdev = 0.035
  CI (99.9%): [3.251, 3.524] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 32, nValues = 2)

# Run progress: 46.53% complete, ETA 04:40:05
# Fork: 1 of 1
# Warmup Iteration   1: 4.961 ms/op
# Warmup Iteration   2: 4.443 ms/op
# Warmup Iteration   3: 4.444 ms/op
# Warmup Iteration   4: 4.381 ms/op
# Warmup Iteration   5: 4.526 ms/op
Iteration   1: 4.479 ms/op
Iteration   2: 4.424 ms/op
Iteration   3: 4.371 ms/op
Iteration   4: 4.543 ms/op
Iteration   5: 4.428 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  4.449 ±(99.9%) 0.250 ms/op [Average]
  (min, avg, max) = (4.371, 4.449, 4.543), stdev = 0.065
  CI (99.9%): [4.199, 4.700] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 32, nValues = 3)

# Run progress: 46.60% complete, ETA 04:39:30
# Fork: 1 of 1
# Warmup Iteration   1: 7.313 ms/op
# Warmup Iteration   2: 6.556 ms/op
# Warmup Iteration   3: 6.457 ms/op
# Warmup Iteration   4: 6.409 ms/op
# Warmup Iteration   5: 6.540 ms/op
Iteration   1: 6.718 ms/op
Iteration   2: 6.493 ms/op
Iteration   3: 6.504 ms/op
Iteration   4: 6.526 ms/op
Iteration   5: 6.523 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  6.553 ±(99.9%) 0.360 ms/op [Average]
  (min, avg, max) = (6.493, 6.553, 6.718), stdev = 0.093
  CI (99.9%): [6.193, 6.912] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 64, nValues = 2)

# Run progress: 46.67% complete, ETA 04:38:55
# Fork: 1 of 1
# Warmup Iteration   1: 10.371 ms/op
# Warmup Iteration   2: 9.554 ms/op
# Warmup Iteration   3: 9.478 ms/op
# Warmup Iteration   4: 9.527 ms/op
# Warmup Iteration   5: 9.587 ms/op
Iteration   1: 9.804 ms/op
Iteration   2: 9.500 ms/op
Iteration   3: 9.523 ms/op
Iteration   4: 9.611 ms/op
Iteration   5: 9.445 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  9.577 ±(99.9%) 0.540 ms/op [Average]
  (min, avg, max) = (9.445, 9.577, 9.804), stdev = 0.140
  CI (99.9%): [9.036, 10.117] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 64, nValues = 3)

# Run progress: 46.74% complete, ETA 04:38:20
# Fork: 1 of 1
# Warmup Iteration   1: 15.262 ms/op
# Warmup Iteration   2: 13.840 ms/op
# Warmup Iteration   3: 13.503 ms/op
# Warmup Iteration   4: 13.598 ms/op
# Warmup Iteration   5: 13.646 ms/op
Iteration   1: 14.234 ms/op
Iteration   2: 13.729 ms/op
Iteration   3: 13.676 ms/op
Iteration   4: 13.717 ms/op
Iteration   5: 13.610 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  13.793 ±(99.9%) 0.965 ms/op [Average]
  (min, avg, max) = (13.610, 13.793, 14.234), stdev = 0.251
  CI (99.9%): [12.828, 14.758] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 128, nValues = 2)

# Run progress: 46.81% complete, ETA 04:37:46
# Fork: 1 of 1
# Warmup Iteration   1: 20.518 ms/op
# Warmup Iteration   2: 17.847 ms/op
# Warmup Iteration   3: 17.809 ms/op
# Warmup Iteration   4: 17.672 ms/op
# Warmup Iteration   5: 17.629 ms/op
Iteration   1: 18.352 ms/op
Iteration   2: 17.757 ms/op
Iteration   3: 17.764 ms/op
Iteration   4: 17.778 ms/op
Iteration   5: 17.717 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  17.874 ±(99.9%) 1.033 ms/op [Average]
  (min, avg, max) = (17.717, 17.874, 18.352), stdev = 0.268
  CI (99.9%): [16.841, 18.906] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 128, nValues = 3)

# Run progress: 46.88% complete, ETA 04:37:11
# Fork: 1 of 1
# Warmup Iteration   1: 30.101 ms/op
# Warmup Iteration   2: 27.010 ms/op
# Warmup Iteration   3: 26.350 ms/op
# Warmup Iteration   4: 26.377 ms/op
# Warmup Iteration   5: 26.475 ms/op
Iteration   1: 27.289 ms/op
Iteration   2: 26.629 ms/op
Iteration   3: 26.257 ms/op
Iteration   4: 26.682 ms/op
Iteration   5: 26.390 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  26.649 ±(99.9%) 1.531 ms/op [Average]
  (min, avg, max) = (26.257, 26.649, 27.289), stdev = 0.398
  CI (99.9%): [25.119, 28.180] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 256, nValues = 2)

# Run progress: 46.94% complete, ETA 04:36:37
# Fork: 1 of 1
# Warmup Iteration   1: 42.693 ms/op
# Warmup Iteration   2: 38.102 ms/op
# Warmup Iteration   3: 37.865 ms/op
# Warmup Iteration   4: 37.600 ms/op
# Warmup Iteration   5: 37.812 ms/op
Iteration   1: 39.183 ms/op
Iteration   2: 37.927 ms/op
Iteration   3: 37.758 ms/op
Iteration   4: 37.910 ms/op
Iteration   5: 37.560 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  38.068 ±(99.9%) 2.467 ms/op [Average]
  (min, avg, max) = (37.560, 38.068, 39.183), stdev = 0.641
  CI (99.9%): [35.600, 40.535] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 256, nValues = 3)

# Run progress: 47.01% complete, ETA 04:36:03
# Fork: 1 of 1
# Warmup Iteration   1: 58.251 ms/op
# Warmup Iteration   2: 51.948 ms/op
# Warmup Iteration   3: 51.186 ms/op
# Warmup Iteration   4: 51.149 ms/op
# Warmup Iteration   5: 51.105 ms/op
Iteration   1: 52.633 ms/op
Iteration   2: 50.899 ms/op
Iteration   3: 50.929 ms/op
Iteration   4: 51.180 ms/op
Iteration   5: 51.521 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  51.432 ±(99.9%) 2.758 ms/op [Average]
  (min, avg, max) = (50.899, 51.432, 52.633), stdev = 0.716
  CI (99.9%): [48.675, 54.190] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 512, nValues = 2)

# Run progress: 47.08% complete, ETA 04:35:29
# Fork: 1 of 1
# Warmup Iteration   1: 90.626 ms/op
# Warmup Iteration   2: 79.443 ms/op
# Warmup Iteration   3: 80.374 ms/op
# Warmup Iteration   4: 80.087 ms/op
# Warmup Iteration   5: 80.359 ms/op
Iteration   1: 82.949 ms/op
Iteration   2: 80.492 ms/op
Iteration   3: 80.575 ms/op
Iteration   4: 79.364 ms/op
Iteration   5: 80.119 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  80.700 ±(99.9%) 5.181 ms/op [Average]
  (min, avg, max) = (79.364, 80.700, 82.949), stdev = 1.346
  CI (99.9%): [75.518, 85.881] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 512, nValues = 3)

# Run progress: 47.15% complete, ETA 04:34:55
# Fork: 1 of 1
# Warmup Iteration   1: 148.981 ms/op
# Warmup Iteration   2: 129.388 ms/op
# Warmup Iteration   3: 126.324 ms/op
# Warmup Iteration   4: 128.138 ms/op
# Warmup Iteration   5: 132.730 ms/op
Iteration   1: 129.001 ms/op
Iteration   2: 129.863 ms/op
Iteration   3: 129.650 ms/op
Iteration   4: 128.464 ms/op
Iteration   5: 132.182 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  129.832 ±(99.9%) 5.487 ms/op [Average]
  (min, avg, max) = (128.464, 129.832, 132.182), stdev = 1.425
  CI (99.9%): [124.345, 135.319] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 1024, nValues = 2)

# Run progress: 47.22% complete, ETA 04:34:21
# Fork: 1 of 1
# Warmup Iteration   1: 164.889 ms/op
# Warmup Iteration   2: 142.460 ms/op
# Warmup Iteration   3: 143.681 ms/op
# Warmup Iteration   4: 144.108 ms/op
# Warmup Iteration   5: 147.600 ms/op
Iteration   1: 144.102 ms/op
Iteration   2: 143.316 ms/op
Iteration   3: 142.734 ms/op
Iteration   4: 143.142 ms/op
Iteration   5: 148.448 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  144.348 ±(99.9%) 9.031 ms/op [Average]
  (min, avg, max) = (142.734, 144.348, 148.448), stdev = 2.345
  CI (99.9%): [135.318, 153.379] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 1024, nValues = 3)

# Run progress: 47.29% complete, ETA 04:33:48
# Fork: 1 of 1
# Warmup Iteration   1: 260.581 ms/op
# Warmup Iteration   2: 240.910 ms/op
# Warmup Iteration   3: 238.982 ms/op
# Warmup Iteration   4: 245.440 ms/op
# Warmup Iteration   5: 235.491 ms/op
Iteration   1: 235.722 ms/op
Iteration   2: 240.498 ms/op
Iteration   3: 244.324 ms/op
Iteration   4: 237.446 ms/op
Iteration   5: 241.584 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  239.915 ±(99.9%) 13.093 ms/op [Average]
  (min, avg, max) = (235.722, 239.915, 244.324), stdev = 3.400
  CI (99.9%): [226.822, 253.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 2048, nValues = 2)

# Run progress: 47.36% complete, ETA 04:33:16
# Fork: 1 of 1
# Warmup Iteration   1: 345.406 ms/op
# Warmup Iteration   2: 311.748 ms/op
# Warmup Iteration   3: 318.392 ms/op
# Warmup Iteration   4: 311.240 ms/op
# Warmup Iteration   5: 311.060 ms/op
Iteration   1: 308.356 ms/op
Iteration   2: 317.051 ms/op
Iteration   3: 309.391 ms/op
Iteration   4: 309.909 ms/op
Iteration   5: 310.609 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  311.063 ±(99.9%) 13.271 ms/op [Average]
  (min, avg, max) = (308.356, 311.063, 317.051), stdev = 3.447
  CI (99.9%): [297.792, 324.334] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 2048, nValues = 3)

# Run progress: 47.43% complete, ETA 04:32:44
# Fork: 1 of 1
# Warmup Iteration   1: 475.854 ms/op
# Warmup Iteration   2: 430.248 ms/op
# Warmup Iteration   3: 428.994 ms/op
# Warmup Iteration   4: 432.077 ms/op
# Warmup Iteration   5: 441.840 ms/op
Iteration   1: 432.478 ms/op
Iteration   2: 432.226 ms/op
Iteration   3: 428.386 ms/op
Iteration   4: 442.574 ms/op
Iteration   5: 430.259 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  433.185 ±(99.9%) 21.192 ms/op [Average]
  (min, avg, max) = (428.386, 433.185, 442.574), stdev = 5.504
  CI (99.9%): [411.993, 454.377] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 4096, nValues = 2)

# Run progress: 47.50% complete, ETA 04:32:13
# Fork: 1 of 1
# Warmup Iteration   1: 831.105 ms/op
# Warmup Iteration   2: 659.857 ms/op
# Warmup Iteration   3: 643.474 ms/op
# Warmup Iteration   4: 646.892 ms/op
# Warmup Iteration   5: 645.958 ms/op
Iteration   1: 653.735 ms/op
Iteration   2: 651.050 ms/op
Iteration   3: 640.706 ms/op
Iteration   4: 646.184 ms/op
Iteration   5: 641.836 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  646.702 ±(99.9%) 21.805 ms/op [Average]
  (min, avg, max) = (640.706, 646.702, 653.735), stdev = 5.663
  CI (99.9%): [624.897, 668.508] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 4096, nValues = 3)

# Run progress: 47.57% complete, ETA 04:31:43
# Fork: 1 of 1
# Warmup Iteration   1: 941.929 ms/op
# Warmup Iteration   2: 901.380 ms/op
# Warmup Iteration   3: 911.004 ms/op
# Warmup Iteration   4: 899.972 ms/op
# Warmup Iteration   5: 904.469 ms/op
Iteration   1: 920.567 ms/op
Iteration   2: 905.773 ms/op
Iteration   3: 923.171 ms/op
Iteration   4: 924.415 ms/op
Iteration   5: 903.793 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  915.544 ±(99.9%) 38.296 ms/op [Average]
  (min, avg, max) = (903.793, 915.544, 924.415), stdev = 9.945
  CI (99.9%): [877.248, 953.840] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 8192, nValues = 2)

# Run progress: 47.64% complete, ETA 04:31:18
# Fork: 1 of 1
# Warmup Iteration   1: 1488.469 ms/op
# Warmup Iteration   2: 1323.530 ms/op
# Warmup Iteration   3: 1274.586 ms/op
# Warmup Iteration   4: 1274.260 ms/op
# Warmup Iteration   5: 1275.296 ms/op
Iteration   1: 1311.517 ms/op
Iteration   2: 1270.882 ms/op
Iteration   3: 1278.015 ms/op
Iteration   4: 1264.071 ms/op
Iteration   5: 1302.162 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  1285.329 ±(99.9%) 78.991 ms/op [Average]
  (min, avg, max) = (1264.071, 1285.329, 1311.517), stdev = 20.514
  CI (99.9%): [1206.338, 1364.321] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 8192, nValues = 3)

# Run progress: 47.71% complete, ETA 04:30:48
# Fork: 1 of 1
# Warmup Iteration   1: 1940.910 ms/op
# Warmup Iteration   2: 1825.504 ms/op
# Warmup Iteration   3: 1854.560 ms/op
# Warmup Iteration   4: 1793.784 ms/op
# Warmup Iteration   5: 1807.256 ms/op
Iteration   1: 1845.343 ms/op
Iteration   2: 1801.194 ms/op
Iteration   3: 1795.185 ms/op
Iteration   4: 1834.488 ms/op
Iteration   5: 1797.974 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  1814.837 ±(99.9%) 89.760 ms/op [Average]
  (min, avg, max) = (1795.185, 1814.837, 1845.343), stdev = 23.310
  CI (99.9%): [1725.077, 1904.597] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 16384, nValues = 2)

# Run progress: 47.78% complete, ETA 04:30:23
# Fork: 1 of 1
# Warmup Iteration   1: 3600.375 ms/op
# Warmup Iteration   2: 2300.610 ms/op
# Warmup Iteration   3: 2314.381 ms/op
# Warmup Iteration   4: 2274.834 ms/op
# Warmup Iteration   5: 2281.901 ms/op
Iteration   1: 2323.105 ms/op
Iteration   2: 2277.716 ms/op
Iteration   3: 2317.845 ms/op
Iteration   4: 2274.295 ms/op
Iteration   5: 2289.497 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  2296.492 ±(99.9%) 87.352 ms/op [Average]
  (min, avg, max) = (2274.295, 2296.492, 2323.105), stdev = 22.685
  CI (99.9%): [2209.140, 2383.843] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 1000, nPutAll = 16384, nValues = 3)

# Run progress: 47.85% complete, ETA 04:30:05
# Fork: 1 of 1
# Warmup Iteration   1: 4993.194 ms/op
# Warmup Iteration   2: 3535.537 ms/op
# Warmup Iteration   3: 3554.963 ms/op
# Warmup Iteration   4: 3568.279 ms/op
# Warmup Iteration   5: 3532.190 ms/op
Iteration   1: 3569.041 ms/op
Iteration   2: 3578.202 ms/op
Iteration   3: 3832.449 ms/op
Iteration   4: 3800.190 ms/op
Iteration   5: 4010.642 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  3758.105 ±(99.9%) 718.285 ms/op [Average]
  (min, avg, max) = (3569.041, 3758.105, 4010.642), stdev = 186.536
  CI (99.9%): [3039.819, 4476.390] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 1, nValues = 2)

# Run progress: 47.92% complete, ETA 04:30:01
# Fork: 1 of 1
# Warmup Iteration   1: 42.595 ms/op
# Warmup Iteration   2: 41.947 ms/op
# Warmup Iteration   3: 34.878 ms/op
# Warmup Iteration   4: 35.023 ms/op
# Warmup Iteration   5: 35.108 ms/op
Iteration   1: 32.842 ms/op
Iteration   2: 35.309 ms/op
Iteration   3: 40.553 ms/op
Iteration   4: 60.822 ms/op
Iteration   5: 65.023 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  46.910 ±(99.9%) 57.583 ms/op [Average]
  (min, avg, max) = (32.842, 46.910, 65.023), stdev = 14.954
  CI (99.9%): [? 0, 104.493] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 1, nValues = 3)

# Run progress: 47.99% complete, ETA 04:29:28
# Fork: 1 of 1
# Warmup Iteration   1: 52.819 ms/op
# Warmup Iteration   2: 44.318 ms/op
# Warmup Iteration   3: 41.227 ms/op
# Warmup Iteration   4: 41.409 ms/op
# Warmup Iteration   5: 43.953 ms/op
Iteration   1: 42.822 ms/op
Iteration   2: 44.119 ms/op
Iteration   3: 61.630 ms/op
Iteration   4: 84.710 ms/op
Iteration   5: 79.050 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  62.466 ±(99.9%) 74.394 ms/op [Average]
  (min, avg, max) = (42.822, 62.466, 84.710), stdev = 19.320
  CI (99.9%): [? 0, 136.860] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 2, nValues = 2)

# Run progress: 48.06% complete, ETA 04:28:55
# Fork: 1 of 1
# Warmup Iteration   1: 82.761 ms/op
# Warmup Iteration   2: 66.422 ms/op
# Warmup Iteration   3: 65.130 ms/op
# Warmup Iteration   4: 65.073 ms/op
# Warmup Iteration   5: 69.962 ms/op
Iteration   1: 67.180 ms/op
Iteration   2: 61.671 ms/op
Iteration   3: 87.131 ms/op
Iteration   4: 113.707 ms/op
Iteration   5: 101.342 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  86.206 ±(99.9%) 85.024 ms/op [Average]
  (min, avg, max) = (61.671, 86.206, 113.707), stdev = 22.081
  CI (99.9%): [1.182, 171.231] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 2, nValues = 3)

# Run progress: 48.13% complete, ETA 04:28:22
# Fork: 1 of 1
# Warmup Iteration   1: 96.985 ms/op
# Warmup Iteration   2: 77.855 ms/op
# Warmup Iteration   3: 77.382 ms/op
# Warmup Iteration   4: 76.304 ms/op
# Warmup Iteration   5: 75.813 ms/op
Iteration   1: 80.616 ms/op
Iteration   2: 76.888 ms/op
Iteration   3: 116.491 ms/op
Iteration   4: 155.827 ms/op
Iteration   5: 139.237 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  113.812 ±(99.9%) 134.555 ms/op [Average]
  (min, avg, max) = (76.888, 113.812, 155.827), stdev = 34.944
  CI (99.9%): [? 0, 248.367] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 4, nValues = 2)

# Run progress: 48.19% complete, ETA 04:27:49
# Fork: 1 of 1
# Warmup Iteration   1: 168.663 ms/op
# Warmup Iteration   2: 127.507 ms/op
# Warmup Iteration   3: 127.503 ms/op
# Warmup Iteration   4: 124.515 ms/op
# Warmup Iteration   5: 124.547 ms/op
Iteration   1: 132.818 ms/op
Iteration   2: 125.051 ms/op
Iteration   3: 214.185 ms/op
Iteration   4: 247.405 ms/op
Iteration   5: 202.129 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  184.318 ±(99.9%) 205.154 ms/op [Average]
  (min, avg, max) = (125.051, 184.318, 247.405), stdev = 53.278
  CI (99.9%): [? 0, 389.471] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 4, nValues = 3)

# Run progress: 48.26% complete, ETA 04:27:16
# Fork: 1 of 1
# Warmup Iteration   1: 209.451 ms/op
# Warmup Iteration   2: 169.362 ms/op
# Warmup Iteration   3: 166.154 ms/op
# Warmup Iteration   4: 166.122 ms/op
# Warmup Iteration   5: 168.076 ms/op
Iteration   1: 171.416 ms/op
Iteration   2: 170.043 ms/op
Iteration   3: 342.275 ms/op
Iteration   4: 314.548 ms/op
Iteration   5: 339.761 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  267.609 ±(99.9%) 343.099 ms/op [Average]
  (min, avg, max) = (170.043, 267.609, 342.275), stdev = 89.102
  CI (99.9%): [? 0, 610.708] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 8, nValues = 2)

# Run progress: 48.33% complete, ETA 04:26:44
# Fork: 1 of 1
# Warmup Iteration   1: 343.187 ms/op
# Warmup Iteration   2: 276.219 ms/op
# Warmup Iteration   3: 260.917 ms/op
# Warmup Iteration   4: 248.388 ms/op
# Warmup Iteration   5: 281.613 ms/op
Iteration   1: 253.156 ms/op
Iteration   2: 250.740 ms/op
Iteration   3: 416.303 ms/op
Iteration   4: 419.395 ms/op
Iteration   5: 461.084 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  360.135 ±(99.9%) 386.358 ms/op [Average]
  (min, avg, max) = (250.740, 360.135, 461.084), stdev = 100.336
  CI (99.9%): [? 0, 746.493] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 8, nValues = 3)

# Run progress: 48.40% complete, ETA 04:26:13
# Fork: 1 of 1
# Warmup Iteration   1: 440.813 ms/op
# Warmup Iteration   2: 498.273 ms/op
# Warmup Iteration   3: 512.285 ms/op
# Warmup Iteration   4: 425.759 ms/op
# Warmup Iteration   5: 382.811 ms/op
Iteration   1: 370.802 ms/op
Iteration   2: 564.895 ms/op
Iteration   3: 652.972 ms/op
Iteration   4: 647.882 ms/op
Iteration   5: 653.593 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  578.029 ±(99.9%) 468.931 ms/op [Average]
  (min, avg, max) = (370.802, 578.029, 653.593), stdev = 121.780
  CI (99.9%): [109.097, 1046.960] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 16, nValues = 2)

# Run progress: 48.47% complete, ETA 04:25:42
# Fork: 1 of 1
# Warmup Iteration   1: 687.353 ms/op
# Warmup Iteration   2: 606.674 ms/op
# Warmup Iteration   3: 543.989 ms/op
# Warmup Iteration   4: 539.477 ms/op
# Warmup Iteration   5: 562.640 ms/op
Iteration   1: 601.116 ms/op
Iteration   2: 775.904 ms/op
Iteration   3: 948.956 ms/op
Iteration   4: 1043.185 ms/op
Iteration   5: 951.470 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  864.126 ±(99.9%) 677.550 ms/op [Average]
  (min, avg, max) = (601.116, 864.126, 1043.185), stdev = 175.958
  CI (99.9%): [186.576, 1541.676] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 16, nValues = 3)

# Run progress: 48.54% complete, ETA 04:25:14
# Fork: 1 of 1
# Warmup Iteration   1: 1021.802 ms/op
# Warmup Iteration   2: 741.327 ms/op
# Warmup Iteration   3: 734.632 ms/op
# Warmup Iteration   4: 712.569 ms/op
# Warmup Iteration   5: 682.136 ms/op
Iteration   1: 859.723 ms/op
Iteration   2: 1009.534 ms/op
Iteration   3: 1140.098 ms/op
Iteration   4: 1306.503 ms/op
Iteration   5: 1373.335 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  1137.838 ±(99.9%) 811.660 ms/op [Average]
  (min, avg, max) = (859.723, 1137.838, 1373.335), stdev = 210.785
  CI (99.9%): [326.179, 1949.498] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 32, nValues = 2)

# Run progress: 48.61% complete, ETA 04:24:44
# Fork: 1 of 1
# Warmup Iteration   1: 1321.427 ms/op
# Warmup Iteration   2: 1283.015 ms/op
# Warmup Iteration   3: 1153.545 ms/op
# Warmup Iteration   4: 1149.993 ms/op
# Warmup Iteration   5: 1257.314 ms/op
Iteration   1: 1310.507 ms/op
Iteration   2: 1906.242 ms/op
Iteration   3: 2004.266 ms/op
Iteration   4: 1915.289 ms/op
Iteration   5: 1943.240 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  1815.909 ±(99.9%) 1097.872 ms/op [Average]
  (min, avg, max) = (1310.507, 1815.909, 2004.266), stdev = 285.114
  CI (99.9%): [718.037, 2913.780] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 32, nValues = 3)

# Run progress: 48.68% complete, ETA 04:24:17
# Fork: 1 of 1
# Warmup Iteration   1: 1838.440 ms/op
# Warmup Iteration   2: 1597.659 ms/op
# Warmup Iteration   3: 1517.723 ms/op
# Warmup Iteration   4: 1520.408 ms/op
# Warmup Iteration   5: 1901.426 ms/op
Iteration   1: 2738.177 ms/op
Iteration   2: 2838.016 ms/op
Iteration   3: 2705.559 ms/op
Iteration   4: 2593.425 ms/op
Iteration   5: 2711.554 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  2717.346 ±(99.9%) 336.375 ms/op [Average]
  (min, avg, max) = (2593.425, 2717.346, 2838.016), stdev = 87.355
  CI (99.9%): [2380.971, 3053.721] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 64, nValues = 2)

# Run progress: 48.75% complete, ETA 04:23:56
# Fork: 1 of 1
# Warmup Iteration   1: 2511.841 ms/op
# Warmup Iteration   2: 2401.053 ms/op
# Warmup Iteration   3: 2297.734 ms/op
# Warmup Iteration   4: 3990.910 ms/op
# Warmup Iteration   5: 4067.147 ms/op
Iteration   1: 4156.335 ms/op
Iteration   2: 3894.955 ms/op
Iteration   3: 4086.686 ms/op
Iteration   4: 3963.078 ms/op
Iteration   5: 4240.007 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  4068.212 ±(99.9%) 540.092 ms/op [Average]
  (min, avg, max) = (3894.955, 4068.212, 4240.007), stdev = 140.260
  CI (99.9%): [3528.120, 4608.304] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 64, nValues = 3)

# Run progress: 48.82% complete, ETA 04:23:50
# Fork: 1 of 1
# Warmup Iteration   1: 3414.284 ms/op
# Warmup Iteration   2: 2997.652 ms/op
# Warmup Iteration   3: 4512.299 ms/op
# Warmup Iteration   4: 4947.915 ms/op
# Warmup Iteration   5: 5107.182 ms/op
Iteration   1: 5124.784 ms/op
Iteration   2: 5345.044 ms/op
Iteration   3: 5010.506 ms/op
Iteration   4: 5351.040 ms/op
Iteration   5: 5110.056 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  5188.286 ±(99.9%) 586.576 ms/op [Average]
  (min, avg, max) = (5010.506, 5188.286, 5351.040), stdev = 152.332
  CI (99.9%): [4601.709, 5774.862] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 128, nValues = 2)

# Run progress: 48.89% complete, ETA 04:23:56
# Fork: 1 of 1
# Warmup Iteration   1: 4891.888 ms/op
# Warmup Iteration   2: 5658.695 ms/op
# Warmup Iteration   3: 7728.430 ms/op
# Warmup Iteration   4: 7799.264 ms/op
# Warmup Iteration   5: 7813.223 ms/op
Iteration   1: 7616.207 ms/op
Iteration   2: 7856.409 ms/op
Iteration   3: 7379.538 ms/op
Iteration   4: 7745.748 ms/op
Iteration   5: 7574.396 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  7634.460 ±(99.9%) 695.711 ms/op [Average]
  (min, avg, max) = (7379.538, 7634.460, 7856.409), stdev = 180.674
  CI (99.9%): [6938.749, 8330.171] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 128, nValues = 3)

# Run progress: 48.96% complete, ETA 04:24:28
# Fork: 1 of 1
# Warmup Iteration   1: 6677.834 ms/op
# Warmup Iteration   2: 9601.333 ms/op
# Warmup Iteration   3: 10337.707 ms/op
# Warmup Iteration   4: 10492.817 ms/op
# Warmup Iteration   5: 10780.492 ms/op
Iteration   1: 10322.323 ms/op
Iteration   2: 10478.033 ms/op
Iteration   3: 10720.044 ms/op
Iteration   4: 10629.928 ms/op
Iteration   5: 10436.293 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  10517.324 ±(99.9%) 608.567 ms/op [Average]
  (min, avg, max) = (10322.323, 10517.324, 10720.044), stdev = 158.043
  CI (99.9%): [9908.757, 11125.891] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 256, nValues = 2)

# Run progress: 49.03% complete, ETA 04:25:29
# Fork: 1 of 1
# Warmup Iteration   1: 12218.309 ms/op
# Warmup Iteration   2: 18532.490 ms/op
# Warmup Iteration   3: 18257.389 ms/op
# Warmup Iteration   4: 17803.656 ms/op
# Warmup Iteration   5: 18474.029 ms/op
Iteration   1: 18181.006 ms/op
Iteration   2: 17859.396 ms/op
Iteration   3: 16023.916 ms/op
Iteration   4: 14802.485 ms/op
Iteration   5: 14881.688 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  16349.698 ±(99.9%) 6175.434 ms/op [Average]
  (min, avg, max) = (14802.485, 16349.698, 18181.006), stdev = 1603.741
  CI (99.9%): [10174.265, 22525.132] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 256, nValues = 3)

# Run progress: 49.10% complete, ETA 04:27:38
# Fork: 1 of 1
# Warmup Iteration   1: 15168.193 ms/op
# Warmup Iteration   2: 16837.379 ms/op
# Warmup Iteration   3: 18546.971 ms/op
# Warmup Iteration   4: 18879.567 ms/op
# Warmup Iteration   5: 18235.575 ms/op
Iteration   1: 18157.296 ms/op
Iteration   2: 20350.432 ms/op
Iteration   3: 20206.879 ms/op
Iteration   4: 20902.480 ms/op
Iteration   5: 20022.953 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  19928.008 ±(99.9%) 4015.690 ms/op [Average]
  (min, avg, max) = (18157.296, 19928.008, 20902.480), stdev = 1042.862
  CI (99.9%): [15912.318, 23943.698] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 512, nValues = 2)

# Run progress: 49.17% complete, ETA 04:30:08
# Fork: 1 of 1
# Warmup Iteration   1: 27785.123 ms/op
# Warmup Iteration   2: 31794.945 ms/op
# Warmup Iteration   3: 32298.595 ms/op
# Warmup Iteration   4: 31640.864 ms/op
# Warmup Iteration   5: 30046.380 ms/op
Iteration   1: 30082.508 ms/op
Iteration   2: 32264.379 ms/op
Iteration   3: 31570.835 ms/op
Iteration   4: 27399.111 ms/op
Iteration   5: 25661.299 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  29395.626 ±(99.9%) 10782.551 ms/op [Average]
  (min, avg, max) = (25661.299, 29395.626, 32264.379), stdev = 2800.194
  CI (99.9%): [18613.075, 40178.178] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 512, nValues = 3)

# Run progress: 49.24% complete, ETA 04:34:33
# Fork: 1 of 1
# Warmup Iteration   1: 34478.970 ms/op
# Warmup Iteration   2: 34758.159 ms/op
# Warmup Iteration   3: 34723.819 ms/op
# Warmup Iteration   4: 34640.066 ms/op
# Warmup Iteration   5: 35716.153 ms/op
Iteration   1: 34832.004 ms/op
Iteration   2: 34842.343 ms/op
Iteration   3: 35521.424 ms/op
Iteration   4: 34711.214 ms/op
Iteration   5: 35371.938 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  35055.785 ±(99.9%) 1403.158 ms/op [Average]
  (min, avg, max) = (34711.214, 35055.785, 35521.424), stdev = 364.396
  CI (99.9%): [33652.627, 36458.942] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 1024, nValues = 2)

# Run progress: 49.31% complete, ETA 04:39:47
# Fork: 1 of 1
# Warmup Iteration   1: 51749.974 ms/op
# Warmup Iteration   2: 50108.130 ms/op
# Warmup Iteration   3: 49982.081 ms/op
# Warmup Iteration   4: 50569.146 ms/op
# Warmup Iteration   5: 50674.953 ms/op
Iteration   1: 52083.720 ms/op
Iteration   2: 50051.441 ms/op
Iteration   3: 50541.516 ms/op
Iteration   4: 49552.813 ms/op
Iteration   5: 50342.556 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  50514.409 ±(99.9%) 3669.248 ms/op [Average]
  (min, avg, max) = (49552.813, 50514.409, 52083.720), stdev = 952.892
  CI (99.9%): [46845.161, 54183.657] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 1024, nValues = 3)

# Run progress: 49.38% complete, ETA 04:47:40
# Fork: 1 of 1
# Warmup Iteration   1: 70517.930 ms/op
# Warmup Iteration   2: 69992.113 ms/op
# Warmup Iteration   3: 68208.034 ms/op
# Warmup Iteration   4: 68329.357 ms/op
# Warmup Iteration   5: 67637.046 ms/op
Iteration   1: 68651.078 ms/op
Iteration   2: 68078.429 ms/op
Iteration   3: 69306.297 ms/op
Iteration   4: 69162.893 ms/op
Iteration   5: 69463.844 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  68932.508 ±(99.9%) 2181.456 ms/op [Average]
  (min, avg, max) = (68078.429, 68932.508, 69463.844), stdev = 566.517
  CI (99.9%): [66751.052, 71113.964] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 2048, nValues = 2)

# Run progress: 49.44% complete, ETA 04:58:37
# Fork: 1 of 1
# Warmup Iteration   1: 101445.603 ms/op
# Warmup Iteration   2: 103071.902 ms/op
# Warmup Iteration   3: 103511.661 ms/op
# Warmup Iteration   4: 104155.854 ms/op
# Warmup Iteration   5: 102370.505 ms/op
Iteration   1: 103529.233 ms/op
Iteration   2: 103366.864 ms/op
Iteration   3: 103727.055 ms/op
Iteration   4: 102932.953 ms/op
Iteration   5: 102775.857 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  103266.392 ±(99.9%) 1544.100 ms/op [Average]
  (min, avg, max) = (102775.857, 103266.392, 103727.055), stdev = 400.998
  CI (99.9%): [101722.292, 104810.493] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 2048, nValues = 3)

# Run progress: 49.51% complete, ETA 05:15:19
# Fork: 1 of 1
# Warmup Iteration   1: 141317.467 ms/op
# Warmup Iteration   2: 140260.515 ms/op
# Warmup Iteration   3: 139597.543 ms/op
# Warmup Iteration   4: 139009.872 ms/op
# Warmup Iteration   5: 140256.800 ms/op
Iteration   1: 137334.605 ms/op
Iteration   2: 140268.905 ms/op
Iteration   3: 139685.717 ms/op
Iteration   4: 139097.457 ms/op
Iteration   5: 138122.269 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  138901.791 ±(99.9%) 4550.262 ms/op [Average]
  (min, avg, max) = (137334.605, 138901.791, 140268.905), stdev = 1181.689
  CI (99.9%): [134351.528, 143452.053] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 4096, nValues = 2)

# Run progress: 49.58% complete, ETA 05:38:06
# Fork: 1 of 1
# Warmup Iteration   1: 220213.119 ms/op
# Warmup Iteration   2: 212729.073 ms/op
# Warmup Iteration   3: 212065.073 ms/op
# Warmup Iteration   4: 211804.789 ms/op
# Warmup Iteration   5: 209684.411 ms/op
Iteration   1: 211239.377 ms/op
Iteration   2: 214085.269 ms/op
Iteration   3: 211537.311 ms/op
Iteration   4: 213800.544 ms/op
Iteration   5: 213067.951 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  212746.090 ±(99.9%) 4998.501 ms/op [Average]
  (min, avg, max) = (211239.377, 212746.090, 214085.269), stdev = 1298.095
  CI (99.9%): [207747.589, 217744.591] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 4096, nValues = 3)

# Run progress: 49.65% complete, ETA 06:13:10
# Fork: 1 of 1
# Warmup Iteration   1: 278009.581 ms/op
# Warmup Iteration   2: 282793.700 ms/op
# Warmup Iteration   3: 286922.098 ms/op
# Warmup Iteration   4: 288564.158 ms/op
# Warmup Iteration   5: 286140.706 ms/op
Iteration   1: 285488.703 ms/op
Iteration   2: 281514.281 ms/op
Iteration   3: 284771.062 ms/op
Iteration   4: 285268.884 ms/op
Iteration   5: 286304.787 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  284669.543 ±(99.9%) 7118.548 ms/op [Average]
  (min, avg, max) = (281514.281, 284669.543, 286304.787), stdev = 1848.664
  CI (99.9%): [277550.995, 291788.091] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 8192, nValues = 2)

# Run progress: 49.72% complete, ETA 07:00:06
# Fork: 1 of 1
# Warmup Iteration   1: 426021.876 ms/op
# Warmup Iteration   2: 430628.709 ms/op
# Warmup Iteration   3: 435343.290 ms/op
# Warmup Iteration   4: 434638.529 ms/op
# Warmup Iteration   5: 433843.528 ms/op
Iteration   1: 429861.315 ms/op
Iteration   2: 434622.818 ms/op
Iteration   3: 431874.880 ms/op
Iteration   4: 431637.863 ms/op
Iteration   5: 431389.118 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  431877.199 ±(99.9%) 6641.027 ms/op [Average]
  (min, avg, max) = (429861.315, 431877.199, 434622.818), stdev = 1724.654
  CI (99.9%): [425236.172, 438518.226] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 8192, nValues = 3)

# Run progress: 49.79% complete, ETA 08:11:32
# Fork: 1 of 1
# Warmup Iteration   1: 574421.943 ms/op
# Warmup Iteration   2: 584209.111 ms/op
# Warmup Iteration   3: 588837.537 ms/op
# Warmup Iteration   4: 579418.218 ms/op
# Warmup Iteration   5: 585186.721 ms/op
Iteration   1: 585229.477 ms/op
Iteration   2: 586390.928 ms/op
Iteration   3: 585078.661 ms/op
Iteration   4: 586453.223 ms/op
Iteration   5: 587861.622 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  586202.782 ±(99.9%) 4331.264 ms/op [Average]
  (min, avg, max) = (585078.661, 586202.782, 587861.622), stdev = 1124.816
  CI (99.9%): [581871.518, 590534.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 16384, nValues = 2)

# Run progress: 49.86% complete, ETA 09:48:07
# Fork: 1 of 1
# Warmup Iteration   1: 850247.072 ms/op
# Warmup Iteration   2: 862265.189 ms/op
# Warmup Iteration   3: 863797.718 ms/op
# Warmup Iteration   4: 854973.080 ms/op
# Warmup Iteration   5: 862761.525 ms/op
Iteration   1: 737252.907 ms/op
Iteration   2: 882995.442 ms/op
Iteration   3: 941799.589 ms/op
Iteration   4: 1002357.536 ms/op
Iteration   5: 1024125.628 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  917706.220 ±(99.9%) 442571.437 ms/op [Average]
  (min, avg, max) = (737252.907, 917706.220, 1024125.628), stdev = 114934.397
  CI (99.9%): [475134.783, 1360277.658] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark
# Parameters: (nKeys = 100000, nPutAll = 16384, nValues = 3)

# Run progress: 49.93% complete, ETA 12:14:57
# Fork: 1 of 1
# Warmup Iteration   1: 1387261.119 ms/op
# Warmup Iteration   2: 1405799.059 ms/op
# Warmup Iteration   3: 1427194.672 ms/op
# Warmup Iteration   4: 1421266.043 ms/op
# Warmup Iteration   5: 1427935.418 ms/op
Iteration   1: 1434374.182 ms/op
Iteration   2: 1362709.122 ms/op
Iteration   3: 1236593.413 ms/op
Iteration   4: 1235319.317 ms/op
Iteration   5: 1231812.076 ms/op


Result "tools.refinery.store.map.benchmarks.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark":
  1300161.622 ±(99.9%) 359382.390 ms/op [Average]
  (min, avg, max) = (1231812.076, 1300161.622, 1434374.182), stdev = 93330.465
  CI (99.9%): [940779.232, 1659544.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 50.00% complete, ETA 15:59:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 50.07% complete, ETA 15:56:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 50.14% complete, ETA 15:54:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 50.21% complete, ETA 15:51:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 50.28% complete, ETA 15:49:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 50.35% complete, ETA 15:46:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 50.42% complete, ETA 15:44:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 50.49% complete, ETA 15:42:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 50.56% complete, ETA 15:39:34
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 50.63% complete, ETA 15:37:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 50.69% complete, ETA 15:34:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 50.76% complete, ETA 15:32:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 50.83% complete, ETA 15:29:56
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 50.90% complete, ETA 15:27:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 50.97% complete, ETA 15:25:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 51.04% complete, ETA 15:22:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 51.11% complete, ETA 15:20:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 51.18% complete, ETA 15:17:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 51.25% complete, ETA 15:15:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 51.32% complete, ETA 15:13:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 51.39% complete, ETA 15:10:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.006 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.001, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 51.46% complete, ETA 15:08:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.005 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.002, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 51.53% complete, ETA 15:06:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.010 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.007, 0.010, 0.012), stdev = 0.002
  CI (99.9%): [0.003, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 51.60% complete, ETA 15:03:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.010 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.007, 0.010, 0.012), stdev = 0.002
  CI (99.9%): [0.002, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 51.67% complete, ETA 15:01:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.034 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.021 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.013, 0.021, 0.034), stdev = 0.008
  CI (99.9%): [? 0, 0.051] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 51.74% complete, ETA 14:59:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.019 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.013, 0.019, 0.025), stdev = 0.004
  CI (99.9%): [0.003, 0.036] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 51.81% complete, ETA 14:56:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.056 ms/op
# Warmup Iteration   2: 0.039 ms/op
# Warmup Iteration   3: 0.038 ms/op
# Warmup Iteration   4: 0.043 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.103 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.045 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.053 ±(99.9%) 0.113 ms/op [Average]
  (min, avg, max) = (0.025, 0.053, 0.103), stdev = 0.029
  CI (99.9%): [? 0, 0.166] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 51.88% complete, ETA 14:54:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.039 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.053 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.063 ms/op
Iteration   3: 0.046 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.049 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.046 ±(99.9%) 0.046 ms/op [Average]
  (min, avg, max) = (0.029, 0.046, 0.063), stdev = 0.012
  CI (99.9%): [? 10??, 0.092] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 51.94% complete, ETA 14:52:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.098 ms/op
# Warmup Iteration   2: 0.062 ms/op
# Warmup Iteration   3: 0.077 ms/op
# Warmup Iteration   4: 0.050 ms/op
# Warmup Iteration   5: 0.090 ms/op
Iteration   1: 0.047 ms/op
Iteration   2: 0.153 ms/op
Iteration   3: 0.069 ms/op
Iteration   4: 0.094 ms/op
Iteration   5: 0.096 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.092 ±(99.9%) 0.154 ms/op [Average]
  (min, avg, max) = (0.047, 0.092, 0.153), stdev = 0.040
  CI (99.9%): [? 0, 0.246] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 52.01% complete, ETA 14:49:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.106 ms/op
# Warmup Iteration   2: 0.080 ms/op
# Warmup Iteration   3: 0.077 ms/op
# Warmup Iteration   4: 0.088 ms/op
# Warmup Iteration   5: 0.061 ms/op
Iteration   1: 0.107 ms/op
Iteration   2: 0.063 ms/op
Iteration   3: 0.152 ms/op
Iteration   4: 0.105 ms/op
Iteration   5: 0.102 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.106 ±(99.9%) 0.122 ms/op [Average]
  (min, avg, max) = (0.063, 0.106, 0.152), stdev = 0.032
  CI (99.9%): [? 0, 0.227] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 52.08% complete, ETA 14:47:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 52.15% complete, ETA 14:45:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 52.22% complete, ETA 14:42:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 52.29% complete, ETA 14:40:45
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 52.36% complete, ETA 14:38:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 52.43% complete, ETA 14:36:14
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 52.50% complete, ETA 14:33:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 52.57% complete, ETA 14:31:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 52.64% complete, ETA 14:29:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 52.71% complete, ETA 14:27:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 52.78% complete, ETA 14:24:56
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 52.85% complete, ETA 14:22:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 52.92% complete, ETA 14:20:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: 0.001 ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 52.99% complete, ETA 14:18:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 53.06% complete, ETA 14:16:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 53.13% complete, ETA 14:13:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 53.19% complete, ETA 14:11:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 53.26% complete, ETA 14:09:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 53.33% complete, ETA 14:07:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 53.40% complete, ETA 14:04:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 53.47% complete, ETA 14:02:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.005 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.001, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 53.54% complete, ETA 14:00:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.005 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.002, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 53.61% complete, ETA 13:58:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.010 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.006, 0.010, 0.013), stdev = 0.003
  CI (99.9%): [? 0, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 53.68% complete, ETA 13:56:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.011 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.007, 0.011, 0.013), stdev = 0.002
  CI (99.9%): [0.002, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 53.75% complete, ETA 13:54:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.023 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.015, 0.023, 0.027), stdev = 0.005
  CI (99.9%): [0.006, 0.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 53.82% complete, ETA 13:51:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.036 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.021 ±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (0.013, 0.021, 0.036), stdev = 0.009
  CI (99.9%): [? 0, 0.056] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 53.89% complete, ETA 13:49:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.044 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.040 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.067 ms/op
Iteration   3: 0.036 ms/op
Iteration   4: 0.039 ms/op
Iteration   5: 0.036 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.041 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (0.025, 0.041, 0.067), stdev = 0.016
  CI (99.9%): [? 0, 0.101] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 53.96% complete, ETA 13:47:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.039 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.049 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.074 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.040 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.046 ±(99.9%) 0.068 ms/op [Average]
  (min, avg, max) = (0.026, 0.046, 0.074), stdev = 0.018
  CI (99.9%): [? 0, 0.114] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 54.03% complete, ETA 13:45:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.099 ms/op
# Warmup Iteration   2: 0.063 ms/op
# Warmup Iteration   3: 0.076 ms/op
# Warmup Iteration   4: 0.049 ms/op
# Warmup Iteration   5: 0.091 ms/op
Iteration   1: 0.047 ms/op
Iteration   2: 0.169 ms/op
Iteration   3: 0.074 ms/op
Iteration   4: 0.097 ms/op
Iteration   5: 0.086 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.095 ±(99.9%) 0.176 ms/op [Average]
  (min, avg, max) = (0.047, 0.095, 0.169), stdev = 0.046
  CI (99.9%): [? 0, 0.271] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 54.10% complete, ETA 13:43:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.089 ms/op
# Warmup Iteration   2: 0.065 ms/op
# Warmup Iteration   3: 0.077 ms/op
# Warmup Iteration   4: 0.049 ms/op
# Warmup Iteration   5: 0.088 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.142 ms/op
Iteration   3: 0.068 ms/op
Iteration   4: 0.094 ms/op
Iteration   5: 0.082 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.087 ±(99.9%) 0.136 ms/op [Average]
  (min, avg, max) = (0.048, 0.087, 0.142), stdev = 0.035
  CI (99.9%): [? 0, 0.222] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 54.17% complete, ETA 13:41:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 54.24% complete, ETA 13:38:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 54.31% complete, ETA 13:36:50
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 54.37% complete, ETA 13:34:44
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 54.44% complete, ETA 13:32:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 54.51% complete, ETA 13:30:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 54.58% complete, ETA 13:28:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 54.65% complete, ETA 13:26:20
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 54.72% complete, ETA 13:24:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 54.79% complete, ETA 13:22:10
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 54.86% complete, ETA 13:20:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: 0.005 ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.005), stdev = 0.002
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 54.93% complete, ETA 13:18:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: 0.002 ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 55.00% complete, ETA 13:15:56
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 55.07% complete, ETA 13:13:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 55.14% complete, ETA 13:11:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 55.21% complete, ETA 13:09:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.002, 0.006), stdev = 0.002
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 55.28% complete, ETA 13:07:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.122 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.025 ±(99.9%) 0.209 ms/op [Average]
  (min, avg, max) = (0.001, 0.025, 0.122), stdev = 0.054
  CI (99.9%): [? 0, 0.234] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 55.35% complete, ETA 13:05:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.001, 0.003, 0.012), stdev = 0.005
  CI (99.9%): [? 0, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 55.42% complete, ETA 13:03:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 55.49% complete, ETA 13:01:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.006), stdev = 0.002
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 55.56% complete, ETA 12:59:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.006 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [? 10?³, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 55.63% complete, ETA 12:57:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.005 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [0.001, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 55.69% complete, ETA 12:55:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.027 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.013 ±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (0.006, 0.013, 0.027), stdev = 0.008
  CI (99.9%): [? 0, 0.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 55.76% complete, ETA 12:53:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.075 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.022 ±(99.9%) 0.113 ms/op [Average]
  (min, avg, max) = (0.006, 0.022, 0.075), stdev = 0.029
  CI (99.9%): [? 0, 0.136] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 55.83% complete, ETA 12:51:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.023 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.016, 0.023, 0.027), stdev = 0.004
  CI (99.9%): [0.007, 0.039] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 55.90% complete, ETA 12:49:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.023 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.015, 0.023, 0.028), stdev = 0.005
  CI (99.9%): [0.002, 0.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 55.97% complete, ETA 12:47:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.033 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.038 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.039 ms/op
Iteration   4: 0.040 ms/op
Iteration   5: 0.299 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.090 ±(99.9%) 0.450 ms/op [Average]
  (min, avg, max) = (0.026, 0.090, 0.299), stdev = 0.117
  CI (99.9%): [? 0, 0.540] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 56.04% complete, ETA 12:45:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.036 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.038 ms/op
Iteration   1: 0.039 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.045 ms/op
Iteration   4: 0.042 ms/op
Iteration   5: 0.203 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.071 ±(99.9%) 0.286 ms/op [Average]
  (min, avg, max) = (0.026, 0.071, 0.203), stdev = 0.074
  CI (99.9%): [? 0, 0.357] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 56.11% complete, ETA 12:43:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.067 ms/op
# Warmup Iteration   2: 0.063 ms/op
# Warmup Iteration   3: 0.062 ms/op
# Warmup Iteration   4: 0.067 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.091 ms/op
Iteration   2: 0.052 ms/op
Iteration   3: 0.074 ms/op
Iteration   4: 0.091 ms/op
Iteration   5: 0.443 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.150 ±(99.9%) 0.632 ms/op [Average]
  (min, avg, max) = (0.052, 0.150, 0.443), stdev = 0.164
  CI (99.9%): [? 0, 0.782] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 56.18% complete, ETA 12:41:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.069 ms/op
# Warmup Iteration   2: 0.063 ms/op
# Warmup Iteration   3: 0.064 ms/op
# Warmup Iteration   4: 0.065 ms/op
# Warmup Iteration   5: 0.047 ms/op
Iteration   1: 0.090 ms/op
Iteration   2: 0.052 ms/op
Iteration   3: 0.093 ms/op
Iteration   4: 0.102 ms/op
Iteration   5: 0.300 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.127 ±(99.9%) 0.378 ms/op [Average]
  (min, avg, max) = (0.052, 0.127, 0.300), stdev = 0.098
  CI (99.9%): [? 0, 0.506] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 56.25% complete, ETA 12:39:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 56.32% complete, ETA 12:37:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 56.39% complete, ETA 12:35:25
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 56.46% complete, ETA 12:33:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 56.53% complete, ETA 12:31:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 56.60% complete, ETA 12:29:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 56.67% complete, ETA 12:27:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 56.74% complete, ETA 12:25:34
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 56.81% complete, ETA 12:23:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 56.88% complete, ETA 12:21:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 56.94% complete, ETA 12:19:41
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 57.01% complete, ETA 12:17:44
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 57.08% complete, ETA 12:15:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: 0.001 ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 57.15% complete, ETA 12:13:51
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 57.22% complete, ETA 12:11:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 57.29% complete, ETA 12:09:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 57.36% complete, ETA 12:08:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 57.43% complete, ETA 12:06:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 57.50% complete, ETA 12:04:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10?³, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 57.57% complete, ETA 12:02:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10?³, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 57.64% complete, ETA 12:00:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.005 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.002, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 57.71% complete, ETA 11:58:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 57.78% complete, ETA 11:56:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.010 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.006, 0.010, 0.013), stdev = 0.002
  CI (99.9%): [? 10??, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 57.85% complete, ETA 11:54:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.010 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.006, 0.010, 0.014), stdev = 0.003
  CI (99.9%): [? 0, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 57.92% complete, ETA 11:52:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.033 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.022 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.015, 0.022, 0.033), stdev = 0.007
  CI (99.9%): [? 0, 0.049] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 57.99% complete, ETA 11:50:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.020 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.013, 0.020, 0.029), stdev = 0.006
  CI (99.9%): [? 0, 0.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 58.06% complete, ETA 11:48:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.038 ms/op
# Warmup Iteration   4: 0.027 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.072 ms/op
Iteration   3: 0.039 ms/op
Iteration   4: 0.048 ms/op
Iteration   5: 0.045 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.047 ±(99.9%) 0.061 ms/op [Average]
  (min, avg, max) = (0.029, 0.047, 0.072), stdev = 0.016
  CI (99.9%): [? 0, 0.108] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 58.13% complete, ETA 11:47:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.038 ms/op
# Warmup Iteration   4: 0.027 ms/op
# Warmup Iteration   5: 0.043 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.033 ms/op
Iteration   4: 0.037 ms/op
Iteration   5: 0.043 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.041 ±(99.9%) 0.057 ms/op [Average]
  (min, avg, max) = (0.025, 0.041, 0.064), stdev = 0.015
  CI (99.9%): [? 0, 0.098] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 58.19% complete, ETA 11:45:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.104 ms/op
# Warmup Iteration   2: 0.076 ms/op
# Warmup Iteration   3: 0.076 ms/op
# Warmup Iteration   4: 0.083 ms/op
# Warmup Iteration   5: 0.086 ms/op
Iteration   1: 0.061 ms/op
Iteration   2: 0.100 ms/op
Iteration   3: 0.107 ms/op
Iteration   4: 0.100 ms/op
Iteration   5: 0.085 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.091 ±(99.9%) 0.070 ms/op [Average]
  (min, avg, max) = (0.061, 0.091, 0.107), stdev = 0.018
  CI (99.9%): [0.021, 0.161] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 58.26% complete, ETA 11:43:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.091 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.076 ms/op
# Warmup Iteration   4: 0.048 ms/op
# Warmup Iteration   5: 0.078 ms/op
Iteration   1: 0.076 ms/op
Iteration   2: 0.051 ms/op
Iteration   3: 0.086 ms/op
Iteration   4: 0.088 ms/op
Iteration   5: 0.379 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.136 ±(99.9%) 0.527 ms/op [Average]
  (min, avg, max) = (0.051, 0.136, 0.379), stdev = 0.137
  CI (99.9%): [? 0, 0.663] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 58.33% complete, ETA 11:41:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 58.40% complete, ETA 11:39:35
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 58.47% complete, ETA 11:37:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 58.54% complete, ETA 11:35:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 58.61% complete, ETA 11:34:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 58.68% complete, ETA 11:32:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 58.75% complete, ETA 11:30:22
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 58.82% complete, ETA 11:28:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 58.89% complete, ETA 11:26:41
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 58.96% complete, ETA 11:24:50
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 59.03% complete, ETA 11:23:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 59.10% complete, ETA 11:21:10
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 59.17% complete, ETA 11:19:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: 0.001 ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 59.24% complete, ETA 11:17:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 59.31% complete, ETA 11:15:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 59.38% complete, ETA 11:13:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 59.44% complete, ETA 11:12:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 59.51% complete, ETA 11:10:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 59.58% complete, ETA 11:08:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 59.65% complete, ETA 11:06:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 59.72% complete, ETA 11:04:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.005 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.001, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 59.79% complete, ETA 11:03:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 59.86% complete, ETA 11:01:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.012 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.007, 0.012, 0.013), stdev = 0.003
  CI (99.9%): [0.002, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 59.93% complete, ETA 10:59:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.012 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.007, 0.012, 0.016), stdev = 0.003
  CI (99.9%): [? 10??, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 60.00% complete, ETA 10:57:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.038 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.026 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.014, 0.026, 0.038), stdev = 0.009
  CI (99.9%): [? 0, 0.060] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 60.07% complete, ETA 10:55:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.035 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.125 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.046 ±(99.9%) 0.173 ms/op [Average]
  (min, avg, max) = (0.018, 0.046, 0.125), stdev = 0.045
  CI (99.9%): [? 0, 0.218] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 60.14% complete, ETA 10:54:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.043 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.041 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.033 ms/op
Iteration   1: 0.065 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.083 ms/op
Iteration   4: 0.060 ms/op
Iteration   5: 0.045 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.057 ±(99.9%) 0.079 ms/op [Average]
  (min, avg, max) = (0.029, 0.057, 0.083), stdev = 0.021
  CI (99.9%): [? 0, 0.136] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 60.21% complete, ETA 10:52:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.039 ms/op
# Warmup Iteration   4: 0.061 ms/op
# Warmup Iteration   5: 0.033 ms/op
Iteration   1: 0.064 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.073 ms/op
Iteration   4: 0.047 ms/op
Iteration   5: 0.045 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.052 ±(99.9%) 0.062 ms/op [Average]
  (min, avg, max) = (0.032, 0.052, 0.073), stdev = 0.016
  CI (99.9%): [? 0, 0.114] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 60.28% complete, ETA 10:50:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.102 ms/op
# Warmup Iteration   2: 0.078 ms/op
# Warmup Iteration   3: 0.087 ms/op
# Warmup Iteration   4: 0.134 ms/op
# Warmup Iteration   5: 0.080 ms/op
Iteration   1: 0.117 ms/op
Iteration   2: 0.063 ms/op
Iteration   3: 0.085 ms/op
Iteration   4: 0.312 ms/op
Iteration   5: 0.103 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.136 ±(99.9%) 0.387 ms/op [Average]
  (min, avg, max) = (0.063, 0.136, 0.312), stdev = 0.101
  CI (99.9%): [? 0, 0.523] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 60.35% complete, ETA 10:48:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.103 ms/op
# Warmup Iteration   2: 0.069 ms/op
# Warmup Iteration   3: 0.062 ms/op
# Warmup Iteration   4: 0.073 ms/op
# Warmup Iteration   5: 0.086 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.112 ms/op
Iteration   3: 0.069 ms/op
Iteration   4: 0.103 ms/op
Iteration   5: 0.092 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.085 ±(99.9%) 0.099 ms/op [Average]
  (min, avg, max) = (0.049, 0.085, 0.112), stdev = 0.026
  CI (99.9%): [? 0, 0.184] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 60.42% complete, ETA 10:47:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 60.49% complete, ETA 10:45:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 60.56% complete, ETA 10:43:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 60.62% complete, ETA 10:41:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 60.69% complete, ETA 10:40:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 60.76% complete, ETA 10:38:14
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 60.83% complete, ETA 10:36:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 60.90% complete, ETA 10:34:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 60.97% complete, ETA 10:33:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 61.04% complete, ETA 10:31:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 61.11% complete, ETA 10:29:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 61.18% complete, ETA 10:27:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 61.25% complete, ETA 10:26:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 61.32% complete, ETA 10:24:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 61.39% complete, ETA 10:22:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 61.46% complete, ETA 10:20:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 61.53% complete, ETA 10:19:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 61.60% complete, ETA 10:17:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 61.67% complete, ETA 10:15:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.002, 0.004, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 61.74% complete, ETA 10:14:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.036 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.009 ±(99.9%) 0.057 ms/op [Average]
  (min, avg, max) = (0.002, 0.009, 0.036), stdev = 0.015
  CI (99.9%): [? 0, 0.066] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 61.81% complete, ETA 10:12:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.003 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 61.88% complete, ETA 10:10:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 61.94% complete, ETA 10:08:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 62.01% complete, ETA 10:07:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 62.08% complete, ETA 10:05:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.029 ±(99.9%) 0.063 ms/op [Average]
  (min, avg, max) = (0.015, 0.029, 0.057), stdev = 0.016
  CI (99.9%): [? 0, 0.092] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 62.15% complete, ETA 10:03:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.044 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.026 ±(99.9%) 0.078 ms/op [Average]
  (min, avg, max) = (0.018, 0.026, 0.044), stdev = 0.012
  CI (99.9%): [? 0, 0.104] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 62.22% complete, ETA 10:02:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.030 ms/op
# Warmup Iteration   4: 0.039 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 62.29% complete, ETA 10:00:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.037 ms/op
# Warmup Iteration   2: 0.038 ms/op
# Warmup Iteration   3: 0.039 ms/op
# Warmup Iteration   4: 0.031 ms/op
# Warmup Iteration   5: 0.036 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.025 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 62.36% complete, ETA 09:58:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.058 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.069 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 62.43% complete, ETA 09:57:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.076 ms/op
# Warmup Iteration   2: 0.066 ms/op
# Warmup Iteration   3: 0.061 ms/op
# Warmup Iteration   4: 0.065 ms/op
# Warmup Iteration   5: 0.050 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:65)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 62.50% complete, ETA 09:55:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 62.57% complete, ETA 09:53:47
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 62.64% complete, ETA 09:52:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 62.71% complete, ETA 09:50:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 62.78% complete, ETA 09:48:50
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 62.85% complete, ETA 09:47:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 62.92% complete, ETA 09:45:33
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 62.99% complete, ETA 09:43:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 63.06% complete, ETA 09:42:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 63.13% complete, ETA 09:40:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 63.19% complete, ETA 09:39:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 63.26% complete, ETA 09:37:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 63.33% complete, ETA 09:35:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 63.40% complete, ETA 09:34:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 63.47% complete, ETA 09:32:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 63.54% complete, ETA 09:30:55
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 63.61% complete, ETA 09:29:18
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 63.68% complete, ETA 09:27:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 63.75% complete, ETA 09:26:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 63.82% complete, ETA 09:24:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 63.89% complete, ETA 09:22:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 63.96% complete, ETA 09:21:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 64.03% complete, ETA 09:19:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.005 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 10?³, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 64.10% complete, ETA 09:18:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.004 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 64.17% complete, ETA 09:16:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.009 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.011), stdev = 0.002
  CI (99.9%): [0.001, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 64.24% complete, ETA 09:14:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.009 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.012), stdev = 0.002
  CI (99.9%): [? 10??, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 64.31% complete, ETA 09:13:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.019 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.014, 0.019, 0.025), stdev = 0.006
  CI (99.9%): [? 0, 0.041] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 64.38% complete, ETA 09:11:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.026 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.019 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.015, 0.019, 0.026), stdev = 0.005
  CI (99.9%): [? 0, 0.039] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 64.44% complete, ETA 09:10:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.028 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.027 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.042 ms/op
Iteration   5: 0.044 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.034 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.027, 0.034, 0.044), stdev = 0.008
  CI (99.9%): [0.003, 0.066] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 64.51% complete, ETA 09:08:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.038 ms/op
Iteration   4: 0.048 ms/op
Iteration   5: 0.050 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.038 ±(99.9%) 0.040 ms/op [Average]
  (min, avg, max) = (0.028, 0.038, 0.050), stdev = 0.010
  CI (99.9%): [? 0, 0.079] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 64.58% complete, ETA 09:07:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 64.65% complete, ETA 09:05:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 64.72% complete, ETA 09:03:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 64.79% complete, ETA 09:02:25
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 64.86% complete, ETA 09:00:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 64.93% complete, ETA 08:59:18
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 65.00% complete, ETA 08:57:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 65.07% complete, ETA 08:56:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 65.14% complete, ETA 08:54:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 65.21% complete, ETA 08:53:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 65.28% complete, ETA 08:51:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 65.35% complete, ETA 08:50:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 65.42% complete, ETA 08:48:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 65.49% complete, ETA 08:47:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 65.56% complete, ETA 08:45:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 65.63% complete, ETA 08:43:57
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 65.69% complete, ETA 08:42:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 65.76% complete, ETA 08:40:55
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 65.83% complete, ETA 08:39:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 65.90% complete, ETA 08:37:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 65.97% complete, ETA 08:36:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10?³, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 66.04% complete, ETA 08:34:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 66.11% complete, ETA 08:33:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.005 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.001, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 66.18% complete, ETA 08:31:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 66.25% complete, ETA 08:30:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.009 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.013), stdev = 0.002
  CI (99.9%): [? 0, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 66.32% complete, ETA 08:28:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.010 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.008, 0.010, 0.013), stdev = 0.003
  CI (99.9%): [? 0, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 66.39% complete, ETA 08:27:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.019 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.014, 0.019, 0.025), stdev = 0.004
  CI (99.9%): [0.002, 0.036] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 66.46% complete, ETA 08:25:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.019 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.014, 0.019, 0.025), stdev = 0.005
  CI (99.9%): [0.002, 0.036] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 66.53% complete, ETA 08:24:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.029 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.036 ms/op
Iteration   4: 0.047 ms/op
Iteration   5: 0.049 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.038 ±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (0.028, 0.038, 0.049), stdev = 0.010
  CI (99.9%): [? 0, 0.076] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 66.60% complete, ETA 08:22:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.046 ms/op
Iteration   5: 0.045 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.037 ±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (0.029, 0.037, 0.046), stdev = 0.008
  CI (99.9%): [0.005, 0.069] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 66.67% complete, ETA 08:21:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 66.74% complete, ETA 08:19:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 66.81% complete, ETA 08:18:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 66.88% complete, ETA 08:17:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 66.94% complete, ETA 08:15:33
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 67.01% complete, ETA 08:14:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 67.08% complete, ETA 08:12:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 67.15% complete, ETA 08:11:10
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 67.22% complete, ETA 08:09:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 67.29% complete, ETA 08:08:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 67.36% complete, ETA 08:06:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 67.43% complete, ETA 08:05:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 67.50% complete, ETA 08:03:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 67.57% complete, ETA 08:02:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 67.64% complete, ETA 08:01:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 67.71% complete, ETA 07:59:35
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 67.78% complete, ETA 07:58:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 67.85% complete, ETA 07:56:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 67.92% complete, ETA 07:55:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 67.99% complete, ETA 07:53:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 68.06% complete, ETA 07:52:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 68.13% complete, ETA 07:51:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 68.19% complete, ETA 07:49:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.005 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 10?³, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 68.26% complete, ETA 07:48:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.005 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.001, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 68.33% complete, ETA 07:46:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.010 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.007, 0.010, 0.012), stdev = 0.002
  CI (99.9%): [0.001, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 68.40% complete, ETA 07:45:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.009 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.012), stdev = 0.002
  CI (99.9%): [0.002, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 68.47% complete, ETA 07:43:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.019 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.014, 0.019, 0.024), stdev = 0.005
  CI (99.9%): [0.001, 0.036] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 68.54% complete, ETA 07:42:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.018 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.014, 0.018, 0.022), stdev = 0.004
  CI (99.9%): [0.002, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 68.61% complete, ETA 07:41:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.029 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.038 ms/op
Iteration   5: 0.043 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.034 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.028, 0.034, 0.043), stdev = 0.007
  CI (99.9%): [0.009, 0.059] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 68.68% complete, ETA 07:39:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.028 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.047 ms/op
Iteration   5: 0.046 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.038 ±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (0.028, 0.038, 0.047), stdev = 0.009
  CI (99.9%): [0.003, 0.072] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 68.75% complete, ETA 07:38:18
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 68.82% complete, ETA 07:36:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 68.89% complete, ETA 07:35:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 68.96% complete, ETA 07:34:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 69.03% complete, ETA 07:32:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 69.10% complete, ETA 07:31:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 69.17% complete, ETA 07:29:56
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 69.24% complete, ETA 07:28:33
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 69.31% complete, ETA 07:27:10
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 69.38% complete, ETA 07:25:47
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 69.44% complete, ETA 07:24:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 69.51% complete, ETA 07:23:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 69.58% complete, ETA 07:21:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 69.65% complete, ETA 07:20:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 69.72% complete, ETA 07:18:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 69.79% complete, ETA 07:17:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 69.86% complete, ETA 07:16:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 69.93% complete, ETA 07:14:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 70.00% complete, ETA 07:13:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 70.07% complete, ETA 07:12:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 70.14% complete, ETA 07:10:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 70.21% complete, ETA 07:09:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 70.28% complete, ETA 07:08:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.005 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.001, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 70.35% complete, ETA 07:06:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.005 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.001, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 70.42% complete, ETA 07:05:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.009 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.008, 0.009, 0.012), stdev = 0.002
  CI (99.9%): [0.002, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 70.49% complete, ETA 07:04:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.009 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.012), stdev = 0.002
  CI (99.9%): [? 10?³, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 70.56% complete, ETA 07:02:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.020 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.015, 0.020, 0.025), stdev = 0.005
  CI (99.9%): [? 10??, 0.039] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 70.63% complete, ETA 07:01:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.019 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.015, 0.019, 0.025), stdev = 0.005
  CI (99.9%): [? 0, 0.039] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 70.69% complete, ETA 06:59:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.044 ms/op
Iteration   5: 0.045 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.036 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.029, 0.036, 0.045), stdev = 0.008
  CI (99.9%): [0.006, 0.066] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 70.76% complete, ETA 06:58:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.030 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.030 ms/op
Iteration   1: 0.030 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.035 ms/op
Iteration   4: 0.048 ms/op
Iteration   5: 0.043 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.037 ±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (0.030, 0.037, 0.048), stdev = 0.008
  CI (99.9%): [0.006, 0.069] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 70.83% complete, ETA 06:57:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 70.90% complete, ETA 06:55:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 70.97% complete, ETA 06:54:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 71.04% complete, ETA 06:53:20
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 71.11% complete, ETA 06:52:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 71.18% complete, ETA 06:50:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 71.25% complete, ETA 06:49:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 71.32% complete, ETA 06:48:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 71.39% complete, ETA 06:46:45
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 71.46% complete, ETA 06:45:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 71.53% complete, ETA 06:44:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 71.60% complete, ETA 06:42:49
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 71.67% complete, ETA 06:41:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 71.74% complete, ETA 06:40:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 71.81% complete, ETA 06:38:55
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 71.88% complete, ETA 06:37:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 71.94% complete, ETA 06:36:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 72.01% complete, ETA 06:35:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 72.08% complete, ETA 06:33:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 72.15% complete, ETA 06:32:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 72.22% complete, ETA 06:31:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10?³, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 72.29% complete, ETA 06:29:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 72.36% complete, ETA 06:28:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 10??, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 72.43% complete, ETA 06:27:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.005 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.001, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 72.50% complete, ETA 06:26:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.009 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.011), stdev = 0.002
  CI (99.9%): [0.002, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 72.57% complete, ETA 06:24:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.009 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.011), stdev = 0.002
  CI (99.9%): [0.001, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 72.64% complete, ETA 06:23:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.018 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.015, 0.018, 0.021), stdev = 0.003
  CI (99.9%): [0.005, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 72.71% complete, ETA 06:22:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.018 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.015, 0.018, 0.023), stdev = 0.004
  CI (99.9%): [0.005, 0.032] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 72.78% complete, ETA 06:20:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.031 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.030 ms/op
# Warmup Iteration   4: 0.030 ms/op
# Warmup Iteration   5: 0.030 ms/op
Iteration   1: 0.030 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.035 ms/op
Iteration   4: 0.052 ms/op
Iteration   5: 0.047 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.039 ±(99.9%) 0.040 ms/op [Average]
  (min, avg, max) = (0.029, 0.039, 0.052), stdev = 0.010
  CI (99.9%): [? 0, 0.079] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 72.85% complete, ETA 06:19:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.050 ms/op
Iteration   5: 0.049 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.039 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.029, 0.039, 0.050), stdev = 0.010
  CI (99.9%): [? 0, 0.078] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 72.92% complete, ETA 06:18:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 72.99% complete, ETA 06:17:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 73.06% complete, ETA 06:15:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 73.13% complete, ETA 06:14:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 73.19% complete, ETA 06:13:22
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 73.26% complete, ETA 06:12:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 73.33% complete, ETA 06:10:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 73.40% complete, ETA 06:09:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 73.47% complete, ETA 06:08:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 73.54% complete, ETA 06:07:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 73.61% complete, ETA 06:05:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 73.68% complete, ETA 06:04:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 73.75% complete, ETA 06:03:25
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 73.82% complete, ETA 06:02:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 73.89% complete, ETA 06:00:57
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 73.96% complete, ETA 05:59:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 74.03% complete, ETA 05:58:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 74.10% complete, ETA 05:57:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 74.17% complete, ETA 05:56:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 74.24% complete, ETA 05:54:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 74.31% complete, ETA 05:53:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 74.38% complete, ETA 05:52:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 74.44% complete, ETA 05:51:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 74.51% complete, ETA 05:49:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.005 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.001, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 74.58% complete, ETA 05:48:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.010 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.007, 0.010, 0.013), stdev = 0.002
  CI (99.9%): [0.002, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 74.65% complete, ETA 05:47:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.010 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.007, 0.010, 0.012), stdev = 0.002
  CI (99.9%): [0.002, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 74.72% complete, ETA 05:46:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.020 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.014, 0.020, 0.025), stdev = 0.004
  CI (99.9%): [0.004, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 74.79% complete, ETA 05:45:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.020 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.014, 0.020, 0.025), stdev = 0.005
  CI (99.9%): [0.001, 0.039] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 74.86% complete, ETA 05:43:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.043 ms/op
Iteration   4: 0.047 ms/op
Iteration   5: 0.046 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.039 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.028, 0.039, 0.047), stdev = 0.009
  CI (99.9%): [0.003, 0.075] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 74.93% complete, ETA 05:42:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.032 ms/op
# Warmup Iteration   4: 0.031 ms/op
# Warmup Iteration   5: 0.031 ms/op
Iteration   1: 0.030 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.041 ms/op
Iteration   4: 0.048 ms/op
Iteration   5: 0.045 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.039 ±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (0.030, 0.039, 0.048), stdev = 0.008
  CI (99.9%): [0.007, 0.071] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 75.00% complete, ETA 05:41:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: 0.002 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark(ImmutableRestoreBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 75.07% complete, ETA 05:40:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.001 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark(ImmutableRestoreBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 75.14% complete, ETA 05:39:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark(ImmutableRestoreBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 75.21% complete, ETA 05:37:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark(ImmutableRestoreBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 75.28% complete, ETA 05:36:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 75.35% complete, ETA 05:35:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 75.42% complete, ETA 05:34:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 75.49% complete, ETA 05:33:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 75.56% complete, ETA 05:31:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 75.63% complete, ETA 05:30:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 75.69% complete, ETA 05:29:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 75.76% complete, ETA 05:28:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 75.83% complete, ETA 05:27:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 75.90% complete, ETA 05:26:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.002, 0.004, 0.009), stdev = 0.003
  CI (99.9%): [? 0, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 75.97% complete, ETA 05:24:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.006 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.011), stdev = 0.003
  CI (99.9%): [? 0, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 76.04% complete, ETA 05:23:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.007 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.004, 0.007, 0.017), stdev = 0.005
  CI (99.9%): [? 0, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 76.11% complete, ETA 05:22:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.013 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.009, 0.013, 0.019), stdev = 0.004
  CI (99.9%): [? 0, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 76.18% complete, ETA 05:21:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.012 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.008, 0.012, 0.017), stdev = 0.003
  CI (99.9%): [? 10?³, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 76.25% complete, ETA 05:20:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.035 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.026 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.016, 0.026, 0.035), stdev = 0.007
  CI (99.9%): [? 0, 0.054] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 76.32% complete, ETA 05:19:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.042 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.030 ms/op
Iteration   5: 0.033 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.031 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.025, 0.031, 0.042), stdev = 0.007
  CI (99.9%): [0.005, 0.058] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 76.39% complete, ETA 05:17:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.039 ms/op
# Warmup Iteration   2: 0.048 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.041 ms/op
# Warmup Iteration   5: 0.040 ms/op
Iteration   1: 0.072 ms/op
Iteration   2: 0.043 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.063 ms/op
Iteration   5: 0.067 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.058 ±(99.9%) 0.048 ms/op [Average]
  (min, avg, max) = (0.043, 0.058, 0.072), stdev = 0.012
  CI (99.9%): [0.010, 0.106] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 76.46% complete, ETA 05:16:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.049 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.038 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: 0.081 ms/op
Iteration   2: 0.039 ms/op
Iteration   3: 0.063 ms/op
Iteration   4: 0.071 ms/op
Iteration   5: 0.061 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.063 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (0.039, 0.063, 0.081), stdev = 0.016
  CI (99.9%): [0.003, 0.123] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 76.53% complete, ETA 05:15:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.078 ms/op
# Warmup Iteration   2: 0.088 ms/op
# Warmup Iteration   3: 0.086 ms/op
# Warmup Iteration   4: 0.089 ms/op
# Warmup Iteration   5: 0.083 ms/op
Iteration   1: 0.150 ms/op
Iteration   2: 0.091 ms/op
Iteration   3: 0.093 ms/op
Iteration   4: 0.116 ms/op
Iteration   5: 0.133 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.117 ±(99.9%) 0.099 ms/op [Average]
  (min, avg, max) = (0.091, 0.117, 0.150), stdev = 0.026
  CI (99.9%): [0.017, 0.216] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 76.60% complete, ETA 05:14:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.069 ms/op
# Warmup Iteration   2: 0.085 ms/op
# Warmup Iteration   3: 0.078 ms/op
# Warmup Iteration   4: 0.097 ms/op
# Warmup Iteration   5: 0.098 ms/op
Iteration   1: 0.105 ms/op
Iteration   2: 0.066 ms/op
Iteration   3: 0.088 ms/op
Iteration   4: 0.127 ms/op
Iteration   5: 0.107 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.099 ±(99.9%) 0.088 ms/op [Average]
  (min, avg, max) = (0.066, 0.099, 0.127), stdev = 0.023
  CI (99.9%): [0.011, 0.187] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 76.67% complete, ETA 05:13:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.197 ms/op
# Warmup Iteration   2: 0.190 ms/op
# Warmup Iteration   3: 0.199 ms/op
# Warmup Iteration   4: 0.183 ms/op
# Warmup Iteration   5: 0.178 ms/op
Iteration   1: 0.265 ms/op
Iteration   2: 0.176 ms/op
Iteration   3: 0.281 ms/op
Iteration   4: 0.287 ms/op
Iteration   5: 0.268 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.255 ±(99.9%) 0.175 ms/op [Average]
  (min, avg, max) = (0.176, 0.255, 0.287), stdev = 0.045
  CI (99.9%): [0.080, 0.430] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 76.74% complete, ETA 05:12:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.188 ms/op
# Warmup Iteration   2: 0.189 ms/op
# Warmup Iteration   3: 0.201 ms/op
# Warmup Iteration   4: 0.154 ms/op
# Warmup Iteration   5: 0.153 ms/op
Iteration   1: 0.208 ms/op
Iteration   2: 0.157 ms/op
Iteration   3: 0.160 ms/op
Iteration   4: 0.222 ms/op
Iteration   5: 0.244 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.198 ±(99.9%) 0.149 ms/op [Average]
  (min, avg, max) = (0.157, 0.198, 0.244), stdev = 0.039
  CI (99.9%): [0.049, 0.347] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 76.81% complete, ETA 05:10:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.277 ms/op
# Warmup Iteration   2: 0.263 ms/op
# Warmup Iteration   3: 0.257 ms/op
# Warmup Iteration   4: 0.299 ms/op
# Warmup Iteration   5: 0.256 ms/op
Iteration   1: 0.315 ms/op
Iteration   2: 0.264 ms/op
Iteration   3: 0.333 ms/op
Iteration   4: 1.087 ms/op
Iteration   5: 0.420 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.484 ±(99.9%) 1.317 ms/op [Average]
  (min, avg, max) = (0.264, 0.484, 1.087), stdev = 0.342
  CI (99.9%): [? 0, 1.801] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 76.88% complete, ETA 05:09:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.270 ms/op
# Warmup Iteration   2: 0.276 ms/op
# Warmup Iteration   3: 0.277 ms/op
# Warmup Iteration   4: 0.275 ms/op
# Warmup Iteration   5: 0.511 ms/op
Iteration   1: 0.299 ms/op
Iteration   2: 0.236 ms/op
Iteration   3: 0.376 ms/op
Iteration   4: 0.438 ms/op
Iteration   5: 0.851 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.440 ±(99.9%) 0.932 ms/op [Average]
  (min, avg, max) = (0.236, 0.440, 0.851), stdev = 0.242
  CI (99.9%): [? 0, 1.372] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 76.94% complete, ETA 05:08:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.569 ms/op
# Warmup Iteration   2: 0.524 ms/op
# Warmup Iteration   3: 0.522 ms/op
# Warmup Iteration   4: 0.549 ms/op
# Warmup Iteration   5: 0.542 ms/op
Iteration   1: 0.559 ms/op
Iteration   2: 0.511 ms/op
Iteration   3: 0.684 ms/op
Iteration   4: 2.184 ms/op
Iteration   5: 0.792 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.946 ±(99.9%) 2.699 ms/op [Average]
  (min, avg, max) = (0.511, 0.946, 2.184), stdev = 0.701
  CI (99.9%): [? 0, 3.645] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 77.01% complete, ETA 05:07:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.534 ms/op
# Warmup Iteration   2: 0.519 ms/op
# Warmup Iteration   3: 0.553 ms/op
# Warmup Iteration   4: 0.589 ms/op
# Warmup Iteration   5: 0.528 ms/op
Iteration   1: 0.496 ms/op
Iteration   2: 0.471 ms/op
Iteration   3: 0.936 ms/op
Iteration   4: 0.740 ms/op
Iteration   5: 0.764 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.681 ±(99.9%) 0.755 ms/op [Average]
  (min, avg, max) = (0.471, 0.681, 0.936), stdev = 0.196
  CI (99.9%): [? 0, 1.437] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 77.08% complete, ETA 05:06:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark(ImmutableRestoreBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 77.15% complete, ETA 05:05:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.002 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark(ImmutableRestoreBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 77.22% complete, ETA 05:03:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: 0.001 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark(ImmutableRestoreBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 77.29% complete, ETA 05:02:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 77.36% complete, ETA 05:01:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 77.43% complete, ETA 05:00:35
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 77.50% complete, ETA 04:59:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 77.57% complete, ETA 04:58:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 77.64% complete, ETA 04:57:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 77.71% complete, ETA 04:56:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 77.78% complete, ETA 04:54:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 77.85% complete, ETA 04:53:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.005), stdev = 0.002
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 77.92% complete, ETA 04:52:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.003 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.006), stdev = 0.002
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 77.99% complete, ETA 04:51:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.003 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 78.06% complete, ETA 04:50:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.007 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.004, 0.007, 0.013), stdev = 0.004
  CI (99.9%): [? 0, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 78.13% complete, ETA 04:49:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.007 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.004, 0.007, 0.013), stdev = 0.004
  CI (99.9%): [? 0, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 78.19% complete, ETA 04:48:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.034 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.015 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.008, 0.015, 0.034), stdev = 0.011
  CI (99.9%): [? 0, 0.056] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 78.26% complete, ETA 04:47:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.059 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.019 ±(99.9%) 0.085 ms/op [Average]
  (min, avg, max) = (0.009, 0.019, 0.059), stdev = 0.022
  CI (99.9%): [? 0, 0.104] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 78.33% complete, ETA 04:45:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.020 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.027 ms/op
Iteration   5: 0.028 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.025 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.023, 0.025, 0.028), stdev = 0.002
  CI (99.9%): [0.016, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 78.40% complete, ETA 04:44:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.046 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.029 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.031 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.023, 0.031, 0.046), stdev = 0.009
  CI (99.9%): [? 0, 0.065] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 78.47% complete, ETA 04:43:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.038 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.042 ms/op
# Warmup Iteration   4: 0.042 ms/op
# Warmup Iteration   5: 0.044 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.037 ms/op
Iteration   3: 0.046 ms/op
Iteration   4: 0.066 ms/op
Iteration   5: 0.060 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.052 ±(99.9%) 0.044 ms/op [Average]
  (min, avg, max) = (0.037, 0.052, 0.066), stdev = 0.011
  CI (99.9%): [0.007, 0.096] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 78.54% complete, ETA 04:42:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.039 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.050 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.074 ms/op
Iteration   2: 0.053 ms/op
Iteration   3: 0.050 ms/op
Iteration   4: 0.063 ms/op
Iteration   5: 0.068 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.062 ±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (0.050, 0.062, 0.074), stdev = 0.010
  CI (99.9%): [0.024, 0.099] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 78.61% complete, ETA 04:41:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.097 ms/op
# Warmup Iteration   2: 0.100 ms/op
# Warmup Iteration   3: 0.088 ms/op
# Warmup Iteration   4: 0.075 ms/op
# Warmup Iteration   5: 0.096 ms/op
Iteration   1: 0.157 ms/op
Iteration   2: 0.090 ms/op
Iteration   3: 0.116 ms/op
Iteration   4: 0.157 ms/op
Iteration   5: 0.117 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.127 ±(99.9%) 0.111 ms/op [Average]
  (min, avg, max) = (0.090, 0.127, 0.157), stdev = 0.029
  CI (99.9%): [0.016, 0.238] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 78.68% complete, ETA 04:40:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.089 ms/op
# Warmup Iteration   2: 0.084 ms/op
# Warmup Iteration   3: 0.090 ms/op
# Warmup Iteration   4: 0.078 ms/op
# Warmup Iteration   5: 0.090 ms/op
Iteration   1: 0.100 ms/op
Iteration   2: 0.103 ms/op
Iteration   3: 0.101 ms/op
Iteration   4: 0.114 ms/op
Iteration   5: 0.105 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.105 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.100, 0.105, 0.114), stdev = 0.006
  CI (99.9%): [0.083, 0.127] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 78.75% complete, ETA 04:39:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.137 ms/op
# Warmup Iteration   2: 0.143 ms/op
# Warmup Iteration   3: 0.139 ms/op
# Warmup Iteration   4: 0.131 ms/op
# Warmup Iteration   5: 0.185 ms/op
Iteration   1: 0.181 ms/op
Iteration   2: 0.156 ms/op
Iteration   3: 0.146 ms/op
Iteration   4: 0.242 ms/op
Iteration   5: 0.393 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.224 ±(99.9%) 0.392 ms/op [Average]
  (min, avg, max) = (0.146, 0.224, 0.393), stdev = 0.102
  CI (99.9%): [? 0, 0.615] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 78.82% complete, ETA 04:38:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.140 ms/op
# Warmup Iteration   2: 0.148 ms/op
# Warmup Iteration   3: 0.137 ms/op
# Warmup Iteration   4: 0.119 ms/op
# Warmup Iteration   5: 0.163 ms/op
Iteration   1: 0.142 ms/op
Iteration   2: 0.123 ms/op
Iteration   3: 0.169 ms/op
Iteration   4: 0.403 ms/op
Iteration   5: 0.250 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.217 ±(99.9%) 0.441 ms/op [Average]
  (min, avg, max) = (0.123, 0.217, 0.403), stdev = 0.115
  CI (99.9%): [? 0, 0.658] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 78.89% complete, ETA 04:37:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.309 ms/op
# Warmup Iteration   2: 0.359 ms/op
# Warmup Iteration   3: 0.345 ms/op
# Warmup Iteration   4: 0.336 ms/op
# Warmup Iteration   5: 0.399 ms/op
Iteration   1: 0.414 ms/op
Iteration   2: 0.295 ms/op
Iteration   3: 0.419 ms/op
Iteration   4: 0.489 ms/op
Iteration   5: 0.467 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.417 ±(99.9%) 0.290 ms/op [Average]
  (min, avg, max) = (0.295, 0.417, 0.489), stdev = 0.075
  CI (99.9%): [0.127, 0.706] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 78.96% complete, ETA 04:35:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.339 ms/op
# Warmup Iteration   2: 0.359 ms/op
# Warmup Iteration   3: 0.332 ms/op
# Warmup Iteration   4: 0.274 ms/op
# Warmup Iteration   5: 0.385 ms/op
Iteration   1: 0.291 ms/op
Iteration   2: 0.367 ms/op
Iteration   3: 0.378 ms/op
Iteration   4: 0.423 ms/op
Iteration   5: 0.362 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.364 ±(99.9%) 0.182 ms/op [Average]
  (min, avg, max) = (0.291, 0.364, 0.423), stdev = 0.047
  CI (99.9%): [0.182, 0.546] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 79.03% complete, ETA 04:34:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.573 ms/op
# Warmup Iteration   2: 0.593 ms/op
# Warmup Iteration   3: 0.655 ms/op
# Warmup Iteration   4: 0.761 ms/op
# Warmup Iteration   5: 0.900 ms/op
Iteration   1: 0.852 ms/op
Iteration   2: 0.610 ms/op
Iteration   3: 0.801 ms/op
Iteration   4: 1.011 ms/op
Iteration   5: 0.976 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.850 ±(99.9%) 0.614 ms/op [Average]
  (min, avg, max) = (0.610, 0.850, 1.011), stdev = 0.160
  CI (99.9%): [0.236, 1.464] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 79.10% complete, ETA 04:33:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.575 ms/op
# Warmup Iteration   2: 0.533 ms/op
# Warmup Iteration   3: 0.681 ms/op
# Warmup Iteration   4: 0.738 ms/op
# Warmup Iteration   5: 0.793 ms/op
Iteration   1: 0.684 ms/op
Iteration   2: 0.647 ms/op
Iteration   3: 0.658 ms/op
Iteration   4: 0.697 ms/op
Iteration   5: 0.762 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.690 ±(99.9%) 0.173 ms/op [Average]
  (min, avg, max) = (0.647, 0.690, 0.762), stdev = 0.045
  CI (99.9%): [0.517, 0.863] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 79.17% complete, ETA 04:32:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 79.24% complete, ETA 04:31:34
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 79.31% complete, ETA 04:30:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 79.38% complete, ETA 04:29:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 79.44% complete, ETA 04:28:18
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 79.51% complete, ETA 04:27:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 79.58% complete, ETA 04:26:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 79.65% complete, ETA 04:25:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: 0.001 ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 79.72% complete, ETA 04:23:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 79.79% complete, ETA 04:22:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 79.86% complete, ETA 04:21:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 79.93% complete, ETA 04:20:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10?³, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 80.00% complete, ETA 04:19:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 80.07% complete, ETA 04:18:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 80.14% complete, ETA 04:17:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.006 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.009), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 80.21% complete, ETA 04:16:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.008 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.004, 0.008, 0.019), stdev = 0.006
  CI (99.9%): [? 0, 0.031] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 80.28% complete, ETA 04:15:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.013 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.009, 0.013, 0.018), stdev = 0.004
  CI (99.9%): [? 0, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 80.35% complete, ETA 04:14:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.016 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.023), stdev = 0.004
  CI (99.9%): [? 0, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 80.42% complete, ETA 04:13:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.033 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.046 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.028 ±(99.9%) 0.046 ms/op [Average]
  (min, avg, max) = (0.016, 0.028, 0.046), stdev = 0.012
  CI (99.9%): [? 0, 0.074] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 80.49% complete, ETA 04:12:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.039 ms/op
Iteration   4: 0.035 ms/op
Iteration   5: 0.042 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.034 ±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.024, 0.034, 0.042), stdev = 0.007
  CI (99.9%): [0.006, 0.062] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 80.56% complete, ETA 04:11:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.042 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.039 ms/op
# Warmup Iteration   4: 0.039 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.042 ms/op
Iteration   2: 0.036 ms/op
Iteration   3: 0.076 ms/op
Iteration   4: 0.057 ms/op
Iteration   5: 0.057 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.054 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (0.036, 0.054, 0.076), stdev = 0.016
  CI (99.9%): [? 0, 0.114] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 80.63% complete, ETA 04:10:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.035 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.038 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.318 ms/op
Iteration   5: 0.053 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.095 ±(99.9%) 0.480 ms/op [Average]
  (min, avg, max) = (0.030, 0.095, 0.318), stdev = 0.125
  CI (99.9%): [? 0, 0.575] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 80.69% complete, ETA 04:08:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.075 ms/op
# Warmup Iteration   2: 0.073 ms/op
# Warmup Iteration   3: 0.078 ms/op
# Warmup Iteration   4: 0.070 ms/op
# Warmup Iteration   5: 0.092 ms/op
Iteration   1: 0.075 ms/op
Iteration   2: 0.077 ms/op
Iteration   3: 0.099 ms/op
Iteration   4: 0.108 ms/op
Iteration   5: 0.133 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.098 ±(99.9%) 0.092 ms/op [Average]
  (min, avg, max) = (0.075, 0.098, 0.133), stdev = 0.024
  CI (99.9%): [0.007, 0.190] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 80.76% complete, ETA 04:07:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.071 ms/op
# Warmup Iteration   2: 0.076 ms/op
# Warmup Iteration   3: 0.078 ms/op
# Warmup Iteration   4: 0.079 ms/op
# Warmup Iteration   5: 0.098 ms/op
Iteration   1: 0.072 ms/op
Iteration   2: 0.071 ms/op
Iteration   3: 0.086 ms/op
Iteration   4: 0.112 ms/op
Iteration   5: 0.127 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.094 ±(99.9%) 0.095 ms/op [Average]
  (min, avg, max) = (0.071, 0.094, 0.127), stdev = 0.025
  CI (99.9%): [? 0, 0.188] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 80.83% complete, ETA 04:06:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.128 ms/op
# Warmup Iteration   2: 0.130 ms/op
# Warmup Iteration   3: 0.115 ms/op
# Warmup Iteration   4: 0.151 ms/op
# Warmup Iteration   5: 0.124 ms/op
Iteration   1: 0.116 ms/op
Iteration   2: 0.132 ms/op
Iteration   3: 0.226 ms/op
Iteration   4: 0.200 ms/op
Iteration   5: 0.187 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.172 ±(99.9%) 0.180 ms/op [Average]
  (min, avg, max) = (0.116, 0.172, 0.226), stdev = 0.047
  CI (99.9%): [? 0, 0.352] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 80.90% complete, ETA 04:05:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.150 ms/op
# Warmup Iteration   2: 0.140 ms/op
# Warmup Iteration   3: 0.161 ms/op
# Warmup Iteration   4: 0.144 ms/op
# Warmup Iteration   5: 0.189 ms/op
Iteration   1: 0.152 ms/op
Iteration   2: 0.154 ms/op
Iteration   3: 0.209 ms/op
Iteration   4: 0.229 ms/op
Iteration   5: 0.267 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.202 ±(99.9%) 0.191 ms/op [Average]
  (min, avg, max) = (0.152, 0.202, 0.267), stdev = 0.050
  CI (99.9%): [0.011, 0.393] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 80.97% complete, ETA 04:04:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.281 ms/op
# Warmup Iteration   2: 0.293 ms/op
# Warmup Iteration   3: 0.308 ms/op
# Warmup Iteration   4: 0.288 ms/op
# Warmup Iteration   5: 0.450 ms/op
Iteration   1: 0.391 ms/op
Iteration   2: 0.299 ms/op
Iteration   3: 0.409 ms/op
Iteration   4: 0.595 ms/op
Iteration   5: 0.517 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.442 ±(99.9%) 0.444 ms/op [Average]
  (min, avg, max) = (0.299, 0.442, 0.595), stdev = 0.115
  CI (99.9%): [? 0, 0.886] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 81.04% complete, ETA 04:03:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.294 ms/op
# Warmup Iteration   2: 0.300 ms/op
# Warmup Iteration   3: 0.381 ms/op
# Warmup Iteration   4: 0.325 ms/op
# Warmup Iteration   5: 0.409 ms/op
Iteration   1: 0.310 ms/op
Iteration   2: 0.445 ms/op
Iteration   3: 0.556 ms/op
Iteration   4: 0.510 ms/op
Iteration   5: 0.468 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.458 ±(99.9%) 0.358 ms/op [Average]
  (min, avg, max) = (0.310, 0.458, 0.556), stdev = 0.093
  CI (99.9%): [0.100, 0.816] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 81.11% complete, ETA 04:02:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.539 ms/op
# Warmup Iteration   2: 0.534 ms/op
# Warmup Iteration   3: 0.599 ms/op
# Warmup Iteration   4: 0.677 ms/op
# Warmup Iteration   5: 0.896 ms/op
Iteration   1: 0.687 ms/op
Iteration   2: 0.547 ms/op
Iteration   3: 1.118 ms/op
Iteration   4: 1.033 ms/op
Iteration   5: 0.824 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.842 ±(99.9%) 0.911 ms/op [Average]
  (min, avg, max) = (0.547, 0.842, 1.118), stdev = 0.237
  CI (99.9%): [? 0, 1.753] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 81.18% complete, ETA 04:01:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.563 ms/op
# Warmup Iteration   2: 0.573 ms/op
# Warmup Iteration   3: 0.655 ms/op
# Warmup Iteration   4: 0.580 ms/op
# Warmup Iteration   5: 0.824 ms/op
Iteration   1: 0.592 ms/op
Iteration   2: 0.765 ms/op
Iteration   3: 0.836 ms/op
Iteration   4: 0.938 ms/op
Iteration   5: 0.871 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.800 ±(99.9%) 0.509 ms/op [Average]
  (min, avg, max) = (0.592, 0.800, 0.938), stdev = 0.132
  CI (99.9%): [0.292, 1.309] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 81.25% complete, ETA 04:00:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark(ImmutableRestoreBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 81.32% complete, ETA 03:59:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark(ImmutableRestoreBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 81.39% complete, ETA 03:58:25
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark(ImmutableRestoreBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 81.46% complete, ETA 03:57:22
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark(ImmutableRestoreBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 81.53% complete, ETA 03:56:20
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 81.60% complete, ETA 03:55:18
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 81.67% complete, ETA 03:54:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 81.74% complete, ETA 03:53:12
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 81.81% complete, ETA 03:52:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 81.88% complete, ETA 03:51:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 81.94% complete, ETA 03:50:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10?³, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 82.01% complete, ETA 03:49:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 82.08% complete, ETA 03:48:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.003 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 82.15% complete, ETA 03:46:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 82.22% complete, ETA 03:45:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.008 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.004, 0.008, 0.016), stdev = 0.005
  CI (99.9%): [? 0, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 82.29% complete, ETA 03:44:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.009 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.004, 0.009, 0.028), stdev = 0.010
  CI (99.9%): [? 0, 0.049] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 82.36% complete, ETA 03:43:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.012 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.008, 0.012, 0.019), stdev = 0.004
  CI (99.9%): [? 0, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 82.43% complete, ETA 03:42:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.015 ±(99.9%) 0.045 ms/op [Average]
  (min, avg, max) = (0.008, 0.015, 0.036), stdev = 0.012
  CI (99.9%): [? 0, 0.060] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 82.50% complete, ETA 03:41:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.027 ms/op
Iteration   5: 0.042 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.026 ±(99.9%) 0.040 ms/op [Average]
  (min, avg, max) = (0.016, 0.026, 0.042), stdev = 0.010
  CI (99.9%): [? 0, 0.066] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 82.57% complete, ETA 03:40:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.038 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.024 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.015, 0.024, 0.038), stdev = 0.009
  CI (99.9%): [? 0, 0.058] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 82.64% complete, ETA 03:39:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.041 ms/op
Iteration   3: 0.058 ms/op
Iteration   4: 0.052 ms/op
Iteration   5: 0.050 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.046 ±(99.9%) 0.044 ms/op [Average]
  (min, avg, max) = (0.028, 0.046, 0.058), stdev = 0.011
  CI (99.9%): [0.002, 0.090] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 82.71% complete, ETA 03:38:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.033 ms/op
# Warmup Iteration   4: 0.036 ms/op
# Warmup Iteration   5: 0.034 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.050 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.046 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.038 ±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (0.028, 0.038, 0.050), stdev = 0.010
  CI (99.9%): [? 0, 0.076] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 82.78% complete, ETA 03:37:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.067 ms/op
# Warmup Iteration   2: 0.064 ms/op
# Warmup Iteration   3: 0.062 ms/op
# Warmup Iteration   4: 0.066 ms/op
# Warmup Iteration   5: 0.061 ms/op
Iteration   1: 0.056 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.127 ms/op
Iteration   4: 0.075 ms/op
Iteration   5: 0.077 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.078 ±(99.9%) 0.111 ms/op [Average]
  (min, avg, max) = (0.056, 0.078, 0.127), stdev = 0.029
  CI (99.9%): [? 0, 0.190] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 82.85% complete, ETA 03:36:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.066 ms/op
# Warmup Iteration   2: 0.065 ms/op
# Warmup Iteration   3: 0.057 ms/op
# Warmup Iteration   4: 0.074 ms/op
# Warmup Iteration   5: 0.059 ms/op
Iteration   1: 0.062 ms/op
Iteration   2: 0.055 ms/op
Iteration   3: 0.124 ms/op
Iteration   4: 0.090 ms/op
Iteration   5: 0.093 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.085 ±(99.9%) 0.107 ms/op [Average]
  (min, avg, max) = (0.055, 0.085, 0.124), stdev = 0.028
  CI (99.9%): [? 0, 0.191] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 82.92% complete, ETA 03:35:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.139 ms/op
# Warmup Iteration   2: 0.128 ms/op
# Warmup Iteration   3: 0.117 ms/op
# Warmup Iteration   4: 0.135 ms/op
# Warmup Iteration   5: 0.124 ms/op
Iteration   1: 0.114 ms/op
Iteration   2: 0.121 ms/op
Iteration   3: 0.223 ms/op
Iteration   4: 0.169 ms/op
Iteration   5: 0.177 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.161 ±(99.9%) 0.172 ms/op [Average]
  (min, avg, max) = (0.114, 0.161, 0.223), stdev = 0.045
  CI (99.9%): [? 0, 0.332] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 82.99% complete, ETA 03:34:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.137 ms/op
# Warmup Iteration   2: 0.126 ms/op
# Warmup Iteration   3: 0.116 ms/op
# Warmup Iteration   4: 0.150 ms/op
# Warmup Iteration   5: 0.114 ms/op
Iteration   1: 0.115 ms/op
Iteration   2: 0.123 ms/op
Iteration   3: 0.190 ms/op
Iteration   4: 0.182 ms/op
Iteration   5: 0.161 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.154 ±(99.9%) 0.131 ms/op [Average]
  (min, avg, max) = (0.115, 0.154, 0.190), stdev = 0.034
  CI (99.9%): [0.023, 0.285] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 83.06% complete, ETA 03:33:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.262 ms/op
# Warmup Iteration   2: 0.257 ms/op
# Warmup Iteration   3: 0.247 ms/op
# Warmup Iteration   4: 0.298 ms/op
# Warmup Iteration   5: 0.238 ms/op
Iteration   1: 0.233 ms/op
Iteration   2: 0.245 ms/op
Iteration   3: 0.340 ms/op
Iteration   4: 0.343 ms/op
Iteration   5: 0.310 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.294 ±(99.9%) 0.201 ms/op [Average]
  (min, avg, max) = (0.233, 0.294, 0.343), stdev = 0.052
  CI (99.9%): [0.093, 0.495] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 83.13% complete, ETA 03:32:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.275 ms/op
# Warmup Iteration   2: 0.250 ms/op
# Warmup Iteration   3: 0.241 ms/op
# Warmup Iteration   4: 0.298 ms/op
# Warmup Iteration   5: 0.237 ms/op
Iteration   1: 0.239 ms/op
Iteration   2: 0.219 ms/op
Iteration   3: 0.431 ms/op
Iteration   4: 0.356 ms/op
Iteration   5: 0.359 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.321 ±(99.9%) 0.344 ms/op [Average]
  (min, avg, max) = (0.219, 0.321, 0.431), stdev = 0.089
  CI (99.9%): [? 0, 0.665] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 83.19% complete, ETA 03:31:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.530 ms/op
# Warmup Iteration   2: 0.507 ms/op
# Warmup Iteration   3: 0.460 ms/op
# Warmup Iteration   4: 0.583 ms/op
# Warmup Iteration   5: 0.443 ms/op
Iteration   1: 0.478 ms/op
Iteration   2: 0.491 ms/op
Iteration   3: 0.765 ms/op
Iteration   4: 0.744 ms/op
Iteration   5: 0.657 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.627 ±(99.9%) 0.526 ms/op [Average]
  (min, avg, max) = (0.478, 0.627, 0.765), stdev = 0.137
  CI (99.9%): [0.101, 1.153] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 83.26% complete, ETA 03:30:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.525 ms/op
# Warmup Iteration   2: 0.507 ms/op
# Warmup Iteration   3: 0.475 ms/op
# Warmup Iteration   4: 0.601 ms/op
# Warmup Iteration   5: 0.460 ms/op
Iteration   1: 0.465 ms/op
Iteration   2: 0.483 ms/op
Iteration   3: 0.790 ms/op
Iteration   4: 0.692 ms/op
Iteration   5: 0.599 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.606 ±(99.9%) 0.532 ms/op [Average]
  (min, avg, max) = (0.465, 0.606, 0.790), stdev = 0.138
  CI (99.9%): [0.074, 1.138] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 83.33% complete, ETA 03:29:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.002 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark(ImmutableRestoreBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 83.40% complete, ETA 03:28:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark(ImmutableRestoreBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 83.47% complete, ETA 03:27:35
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark(ImmutableRestoreBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 83.54% complete, ETA 03:26:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: 0.005 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark(ImmutableRestoreBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.immutableGetDiffCursorAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableGetDiffCursorAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.005), stdev = 0.002
  CI (99.9%): [? 0, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 83.61% complete, ETA 03:25:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 83.68% complete, ETA 03:24:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 83.75% complete, ETA 03:23:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 83.82% complete, ETA 03:22:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 83.89% complete, ETA 03:21:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 83.96% complete, ETA 03:20:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 84.03% complete, ETA 03:19:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 84.10% complete, ETA 03:18:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 84.17% complete, ETA 03:17:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 84.24% complete, ETA 03:16:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.002, 0.004, 0.008), stdev = 0.003
  CI (99.9%): [? 0, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 84.31% complete, ETA 03:15:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.008 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (0.004, 0.008, 0.020), stdev = 0.007
  CI (99.9%): [? 0, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 84.38% complete, ETA 03:14:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.006 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.009), stdev = 0.002
  CI (99.9%): [? 0, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 84.44% complete, ETA 03:13:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.012 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.007, 0.012, 0.024), stdev = 0.007
  CI (99.9%): [? 0, 0.039] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 84.51% complete, ETA 03:12:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.013 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.008, 0.013, 0.024), stdev = 0.006
  CI (99.9%): [? 0, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 84.58% complete, ETA 03:11:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.020 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (0.014, 0.020, 0.031), stdev = 0.007
  CI (99.9%): [? 0, 0.046] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 84.65% complete, ETA 03:10:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.039 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.022 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.014, 0.022, 0.039), stdev = 0.010
  CI (99.9%): [? 0, 0.060] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 84.72% complete, ETA 03:09:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.030 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.041 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.038 ±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (0.028, 0.038, 0.048), stdev = 0.008
  CI (99.9%): [0.006, 0.070] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 84.79% complete, ETA 03:08:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.030 ms/op
Iteration   1: 0.030 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.053 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.034 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.038 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.028, 0.038, 0.053), stdev = 0.011
  CI (99.9%): [? 0, 0.078] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 84.86% complete, ETA 03:07:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.067 ms/op
# Warmup Iteration   2: 0.064 ms/op
# Warmup Iteration   3: 0.058 ms/op
# Warmup Iteration   4: 0.075 ms/op
# Warmup Iteration   5: 0.060 ms/op
Iteration   1: 0.059 ms/op
Iteration   2: 0.056 ms/op
Iteration   3: 0.102 ms/op
Iteration   4: 0.082 ms/op
Iteration   5: 0.086 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.077 ±(99.9%) 0.074 ms/op [Average]
  (min, avg, max) = (0.056, 0.077, 0.102), stdev = 0.019
  CI (99.9%): [0.003, 0.151] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 84.93% complete, ETA 03:06:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.065 ms/op
# Warmup Iteration   2: 0.062 ms/op
# Warmup Iteration   3: 0.062 ms/op
# Warmup Iteration   4: 0.067 ms/op
# Warmup Iteration   5: 0.060 ms/op
Iteration   1: 0.060 ms/op
Iteration   2: 0.055 ms/op
Iteration   3: 0.134 ms/op
Iteration   4: 0.086 ms/op
Iteration   5: 0.074 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.082 ±(99.9%) 0.122 ms/op [Average]
  (min, avg, max) = (0.055, 0.082, 0.134), stdev = 0.032
  CI (99.9%): [? 0, 0.204] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 85.00% complete, ETA 03:05:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.132 ms/op
# Warmup Iteration   2: 0.139 ms/op
# Warmup Iteration   3: 0.132 ms/op
# Warmup Iteration   4: 0.145 ms/op
# Warmup Iteration   5: 0.129 ms/op
Iteration   1: 0.128 ms/op
Iteration   2: 0.117 ms/op
Iteration   3: 0.177 ms/op
Iteration   4: 0.414 ms/op
Iteration   5: 0.182 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.204 ±(99.9%) 0.467 ms/op [Average]
  (min, avg, max) = (0.117, 0.204, 0.414), stdev = 0.121
  CI (99.9%): [? 0, 0.671] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 85.07% complete, ETA 03:04:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.143 ms/op
# Warmup Iteration   2: 0.147 ms/op
# Warmup Iteration   3: 0.212 ms/op
# Warmup Iteration   4: 0.205 ms/op
# Warmup Iteration   5: 0.234 ms/op
Iteration   1: 0.229 ms/op
Iteration   2: 0.194 ms/op
Iteration   3: 0.175 ms/op
Iteration   4: 0.213 ms/op
Iteration   5: 0.211 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.205 ±(99.9%) 0.079 ms/op [Average]
  (min, avg, max) = (0.175, 0.205, 0.229), stdev = 0.021
  CI (99.9%): [0.125, 0.284] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 85.14% complete, ETA 03:03:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.271 ms/op
# Warmup Iteration   2: 0.290 ms/op
# Warmup Iteration   3: 0.306 ms/op
# Warmup Iteration   4: 0.321 ms/op
# Warmup Iteration   5: 0.467 ms/op
Iteration   1: 0.265 ms/op
Iteration   2: 0.338 ms/op
Iteration   3: 0.444 ms/op
Iteration   4: 0.464 ms/op
Iteration   5: 0.408 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.384 ±(99.9%) 0.316 ms/op [Average]
  (min, avg, max) = (0.265, 0.384, 0.464), stdev = 0.082
  CI (99.9%): [0.068, 0.699] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 85.21% complete, ETA 03:02:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.266 ms/op
# Warmup Iteration   2: 0.272 ms/op
# Warmup Iteration   3: 0.260 ms/op
# Warmup Iteration   4: 0.319 ms/op
# Warmup Iteration   5: 0.894 ms/op
Iteration   1: 0.327 ms/op
Iteration   2: 0.240 ms/op
Iteration   3: 0.424 ms/op
Iteration   4: 0.410 ms/op
Iteration   5: 0.536 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.387 ±(99.9%) 0.428 ms/op [Average]
  (min, avg, max) = (0.240, 0.387, 0.536), stdev = 0.111
  CI (99.9%): [? 0, 0.815] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 85.28% complete, ETA 03:01:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.532 ms/op
# Warmup Iteration   2: 0.527 ms/op
# Warmup Iteration   3: 0.545 ms/op
# Warmup Iteration   4: 0.599 ms/op
# Warmup Iteration   5: 0.525 ms/op
Iteration   1: 0.468 ms/op
Iteration   2: 0.527 ms/op
Iteration   3: 0.644 ms/op
Iteration   4: 2.665 ms/op
Iteration   5: 0.731 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.007 ±(99.9%) 3.591 ms/op [Average]
  (min, avg, max) = (0.468, 1.007, 2.665), stdev = 0.933
  CI (99.9%): [? 0, 4.598] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 85.35% complete, ETA 03:00:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.548 ms/op
# Warmup Iteration   2: 0.507 ms/op
# Warmup Iteration   3: 0.516 ms/op
# Warmup Iteration   4: 0.580 ms/op
# Warmup Iteration   5: 0.537 ms/op
Iteration   1: 0.452 ms/op
Iteration   2: 0.466 ms/op
Iteration   3: 1.019 ms/op
Iteration   4: 0.778 ms/op
Iteration   5: 0.862 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.716 ±(99.9%) 0.961 ms/op [Average]
  (min, avg, max) = (0.452, 0.716, 1.019), stdev = 0.250
  CI (99.9%): [? 0, 1.677] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 85.42% complete, ETA 02:59:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (? 10??, 0.004, 0.011), stdev = 0.004
  CI (99.9%): [? 0, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 85.49% complete, ETA 02:58:56
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.006 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.006, 0.014), stdev = 0.007
  CI (99.9%): [? 0, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 85.56% complete, ETA 02:57:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (? 10??, 0.002, 0.007), stdev = 0.003
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 85.63% complete, ETA 02:57:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.003 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (? 10??, 0.003, 0.009), stdev = 0.004
  CI (99.9%): [? 0, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 85.69% complete, ETA 02:56:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 85.76% complete, ETA 02:55:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 85.83% complete, ETA 02:54:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 85.90% complete, ETA 02:53:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 85.97% complete, ETA 02:52:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 86.04% complete, ETA 02:51:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 86.11% complete, ETA 02:50:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 86.18% complete, ETA 02:49:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.003 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.001, 0.003, 0.007), stdev = 0.003
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 86.25% complete, ETA 02:48:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 86.32% complete, ETA 02:47:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.006 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.002, 0.006, 0.021), stdev = 0.008
  CI (99.9%): [? 0, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 86.39% complete, ETA 02:46:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.009), stdev = 0.002
  CI (99.9%): [? 10??, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 86.46% complete, ETA 02:45:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.006 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.008), stdev = 0.001
  CI (99.9%): [0.001, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 86.53% complete, ETA 02:44:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.013 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.009, 0.013, 0.019), stdev = 0.004
  CI (99.9%): [? 0, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 86.60% complete, ETA 02:43:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.011 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.007, 0.011, 0.020), stdev = 0.005
  CI (99.9%): [? 0, 0.031] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 86.67% complete, ETA 02:42:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.057 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.028 ±(99.9%) 0.062 ms/op [Average]
  (min, avg, max) = (0.017, 0.028, 0.057), stdev = 0.016
  CI (99.9%): [? 0, 0.091] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 86.74% complete, ETA 02:41:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.038 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.023 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.016, 0.023, 0.038), stdev = 0.009
  CI (99.9%): [? 0, 0.057] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 86.81% complete, ETA 02:40:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.030 ms/op
# Warmup Iteration   4: 0.035 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.033 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.082 ms/op
Iteration   4: 0.052 ms/op
Iteration   5: 0.042 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.047 ±(99.9%) 0.082 ms/op [Average]
  (min, avg, max) = (0.029, 0.047, 0.082), stdev = 0.021
  CI (99.9%): [? 0, 0.129] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 86.88% complete, ETA 02:39:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.035 ms/op
# Warmup Iteration   4: 0.034 ms/op
# Warmup Iteration   5: 0.042 ms/op
Iteration   1: 0.036 ms/op
Iteration   2: 0.038 ms/op
Iteration   3: 0.049 ms/op
Iteration   4: 0.052 ms/op
Iteration   5: 0.120 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.059 ±(99.9%) 0.133 ms/op [Average]
  (min, avg, max) = (0.036, 0.059, 0.120), stdev = 0.035
  CI (99.9%): [? 0, 0.192] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 86.94% complete, ETA 02:38:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.064 ms/op
# Warmup Iteration   2: 0.063 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.073 ms/op
# Warmup Iteration   5: 0.057 ms/op
Iteration   1: 0.061 ms/op
Iteration   2: 0.060 ms/op
Iteration   3: 0.128 ms/op
Iteration   4: 0.088 ms/op
Iteration   5: 0.085 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.084 ±(99.9%) 0.107 ms/op [Average]
  (min, avg, max) = (0.060, 0.084, 0.128), stdev = 0.028
  CI (99.9%): [? 0, 0.192] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 87.01% complete, ETA 02:37:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.064 ms/op
# Warmup Iteration   2: 0.064 ms/op
# Warmup Iteration   3: 0.058 ms/op
# Warmup Iteration   4: 0.072 ms/op
# Warmup Iteration   5: 0.057 ms/op
Iteration   1: 0.062 ms/op
Iteration   2: 0.059 ms/op
Iteration   3: 0.131 ms/op
Iteration   4: 0.106 ms/op
Iteration   5: 0.081 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.088 ±(99.9%) 0.118 ms/op [Average]
  (min, avg, max) = (0.059, 0.088, 0.131), stdev = 0.031
  CI (99.9%): [? 0, 0.205] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 87.08% complete, ETA 02:37:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.129 ms/op
# Warmup Iteration   2: 0.130 ms/op
# Warmup Iteration   3: 0.110 ms/op
# Warmup Iteration   4: 0.162 ms/op
# Warmup Iteration   5: 0.119 ms/op
Iteration   1: 0.116 ms/op
Iteration   2: 0.165 ms/op
Iteration   3: 0.259 ms/op
Iteration   4: 0.320 ms/op
Iteration   5: 0.175 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.207 ±(99.9%) 0.313 ms/op [Average]
  (min, avg, max) = (0.116, 0.207, 0.320), stdev = 0.081
  CI (99.9%): [? 0, 0.520] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 87.15% complete, ETA 02:36:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.129 ms/op
# Warmup Iteration   2: 0.133 ms/op
# Warmup Iteration   3: 0.126 ms/op
# Warmup Iteration   4: 0.165 ms/op
# Warmup Iteration   5: 0.157 ms/op
Iteration   1: 0.149 ms/op
Iteration   2: 0.181 ms/op
Iteration   3: 0.213 ms/op
Iteration   4: 0.170 ms/op
Iteration   5: 0.358 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.214 ±(99.9%) 0.322 ms/op [Average]
  (min, avg, max) = (0.149, 0.214, 0.358), stdev = 0.084
  CI (99.9%): [? 0, 0.537] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 87.22% complete, ETA 02:35:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.285 ms/op
# Warmup Iteration   2: 0.269 ms/op
# Warmup Iteration   3: 0.289 ms/op
# Warmup Iteration   4: 0.341 ms/op
# Warmup Iteration   5: 0.302 ms/op
Iteration   1: 0.321 ms/op
Iteration   2: 0.343 ms/op
Iteration   3: 0.409 ms/op
Iteration   4: 0.465 ms/op
Iteration   5: 0.435 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.395 ±(99.9%) 0.235 ms/op [Average]
  (min, avg, max) = (0.321, 0.395, 0.465), stdev = 0.061
  CI (99.9%): [0.159, 0.630] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 87.29% complete, ETA 02:34:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.254 ms/op
# Warmup Iteration   2: 0.261 ms/op
# Warmup Iteration   3: 0.237 ms/op
# Warmup Iteration   4: 0.301 ms/op
# Warmup Iteration   5: 0.223 ms/op
Iteration   1: 0.264 ms/op
Iteration   2: 0.248 ms/op
Iteration   3: 0.374 ms/op
Iteration   4: 1.078 ms/op
Iteration   5: 0.304 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.454 ±(99.9%) 1.357 ms/op [Average]
  (min, avg, max) = (0.248, 0.454, 1.078), stdev = 0.353
  CI (99.9%): [? 0, 1.811] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 87.36% complete, ETA 02:33:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.515 ms/op
# Warmup Iteration   2: 0.516 ms/op
# Warmup Iteration   3: 0.461 ms/op
# Warmup Iteration   4: 0.617 ms/op
# Warmup Iteration   5: 0.441 ms/op
Iteration   1: 0.502 ms/op
Iteration   2: 0.437 ms/op
Iteration   3: 1.208 ms/op
Iteration   4: 0.708 ms/op
Iteration   5: 0.662 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.704 ±(99.9%) 1.168 ms/op [Average]
  (min, avg, max) = (0.437, 0.704, 1.208), stdev = 0.303
  CI (99.9%): [? 0, 1.871] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 87.43% complete, ETA 02:32:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.517 ms/op
# Warmup Iteration   2: 0.514 ms/op
# Warmup Iteration   3: 0.463 ms/op
# Warmup Iteration   4: 0.551 ms/op
# Warmup Iteration   5: 0.454 ms/op
Iteration   1: 0.524 ms/op
Iteration   2: 0.445 ms/op
Iteration   3: 1.240 ms/op
Iteration   4: 0.670 ms/op
Iteration   5: 0.674 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.711 ±(99.9%) 1.200 ms/op [Average]
  (min, avg, max) = (0.445, 0.711, 1.240), stdev = 0.312
  CI (99.9%): [? 0, 1.911] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 87.50% complete, ETA 02:31:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 87.57% complete, ETA 02:30:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 87.64% complete, ETA 02:29:34
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 87.71% complete, ETA 02:28:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 87.78% complete, ETA 02:27:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 87.85% complete, ETA 02:26:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 87.92% complete, ETA 02:25:50
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 87.99% complete, ETA 02:24:55
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 88.06% complete, ETA 02:23:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 88.13% complete, ETA 02:23:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 88.19% complete, ETA 02:22:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 88.26% complete, ETA 02:21:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 88.33% complete, ETA 02:20:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 88.40% complete, ETA 02:19:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 88.47% complete, ETA 02:18:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 88.54% complete, ETA 02:17:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 88.61% complete, ETA 02:16:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.007 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.009), stdev = 0.002
  CI (99.9%): [? 10?³, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 88.68% complete, ETA 02:15:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.007 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.008), stdev = 0.001
  CI (99.9%): [0.002, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 88.75% complete, ETA 02:14:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.014 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.011, 0.014, 0.019), stdev = 0.004
  CI (99.9%): [? 10??, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 88.82% complete, ETA 02:13:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.014 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.011, 0.014, 0.018), stdev = 0.003
  CI (99.9%): [0.001, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 88.89% complete, ETA 02:12:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.035 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.027 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.022, 0.027, 0.035), stdev = 0.006
  CI (99.9%): [0.003, 0.052] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 88.96% complete, ETA 02:12:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.034 ms/op
Iteration   5: 0.034 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.027 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.021, 0.027, 0.034), stdev = 0.006
  CI (99.9%): [0.003, 0.051] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 89.03% complete, ETA 02:11:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.044 ms/op
# Warmup Iteration   2: 0.044 ms/op
# Warmup Iteration   3: 0.044 ms/op
# Warmup Iteration   4: 0.044 ms/op
# Warmup Iteration   5: 0.044 ms/op
Iteration   1: 0.043 ms/op
Iteration   2: 0.044 ms/op
Iteration   3: 0.051 ms/op
Iteration   4: 0.066 ms/op
Iteration   5: 0.075 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.056 ±(99.9%) 0.054 ms/op [Average]
  (min, avg, max) = (0.043, 0.056, 0.075), stdev = 0.014
  CI (99.9%): [0.002, 0.110] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 89.10% complete, ETA 02:10:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.044 ms/op
# Warmup Iteration   4: 0.044 ms/op
# Warmup Iteration   5: 0.044 ms/op
Iteration   1: 0.043 ms/op
Iteration   2: 0.044 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.061 ms/op
Iteration   5: 0.063 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.052 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.043, 0.052, 0.063), stdev = 0.009
  CI (99.9%): [0.016, 0.088] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 89.17% complete, ETA 02:09:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.088 ms/op
# Warmup Iteration   2: 0.094 ms/op
# Warmup Iteration   3: 0.103 ms/op
# Warmup Iteration   4: 0.093 ms/op
# Warmup Iteration   5: 0.089 ms/op
Iteration   1: 0.089 ms/op
Iteration   2: 0.088 ms/op
Iteration   3: 0.090 ms/op
Iteration   4: 0.149 ms/op
Iteration   5: 0.126 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.108 ±(99.9%) 0.107 ms/op [Average]
  (min, avg, max) = (0.088, 0.108, 0.149), stdev = 0.028
  CI (99.9%): [0.001, 0.216] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 89.24% complete, ETA 02:08:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.089 ms/op
# Warmup Iteration   2: 0.088 ms/op
# Warmup Iteration   3: 0.087 ms/op
# Warmup Iteration   4: 0.088 ms/op
# Warmup Iteration   5: 0.087 ms/op
Iteration   1: 0.088 ms/op
Iteration   2: 0.097 ms/op
Iteration   3: 0.115 ms/op
Iteration   4: 0.150 ms/op
Iteration   5: 0.134 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.117 ±(99.9%) 0.099 ms/op [Average]
  (min, avg, max) = (0.088, 0.117, 0.150), stdev = 0.026
  CI (99.9%): [0.018, 0.215] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 89.31% complete, ETA 02:07:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.181 ms/op
# Warmup Iteration   2: 0.179 ms/op
# Warmup Iteration   3: 0.179 ms/op
# Warmup Iteration   4: 0.174 ms/op
# Warmup Iteration   5: 0.177 ms/op
Iteration   1: 0.179 ms/op
Iteration   2: 0.177 ms/op
Iteration   3: 0.206 ms/op
Iteration   4: 0.283 ms/op
Iteration   5: 0.284 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.226 ±(99.9%) 0.207 ms/op [Average]
  (min, avg, max) = (0.177, 0.226, 0.284), stdev = 0.054
  CI (99.9%): [0.019, 0.433] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 89.38% complete, ETA 02:06:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.179 ms/op
# Warmup Iteration   2: 0.176 ms/op
# Warmup Iteration   3: 0.176 ms/op
# Warmup Iteration   4: 0.174 ms/op
# Warmup Iteration   5: 0.175 ms/op
Iteration   1: 0.178 ms/op
Iteration   2: 0.176 ms/op
Iteration   3: 0.195 ms/op
Iteration   4: 0.258 ms/op
Iteration   5: 0.258 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.213 ±(99.9%) 0.160 ms/op [Average]
  (min, avg, max) = (0.176, 0.213, 0.258), stdev = 0.042
  CI (99.9%): [0.053, 0.373] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 89.44% complete, ETA 02:05:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.352 ms/op
# Warmup Iteration   2: 0.348 ms/op
# Warmup Iteration   3: 0.350 ms/op
# Warmup Iteration   4: 0.347 ms/op
# Warmup Iteration   5: 0.345 ms/op
Iteration   1: 0.351 ms/op
Iteration   2: 0.347 ms/op
Iteration   3: 0.382 ms/op
Iteration   4: 0.518 ms/op
Iteration   5: 0.567 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.433 ±(99.9%) 0.395 ms/op [Average]
  (min, avg, max) = (0.347, 0.433, 0.567), stdev = 0.102
  CI (99.9%): [0.038, 0.827] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 89.51% complete, ETA 02:04:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.358 ms/op
# Warmup Iteration   2: 0.355 ms/op
# Warmup Iteration   3: 0.353 ms/op
# Warmup Iteration   4: 0.345 ms/op
# Warmup Iteration   5: 0.355 ms/op
Iteration   1: 0.358 ms/op
Iteration   2: 0.351 ms/op
Iteration   3: 0.403 ms/op
Iteration   4: 0.524 ms/op
Iteration   5: 0.502 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.428 ±(99.9%) 0.310 ms/op [Average]
  (min, avg, max) = (0.351, 0.428, 0.524), stdev = 0.081
  CI (99.9%): [0.117, 0.738] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 89.58% complete, ETA 02:03:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 89.65% complete, ETA 02:02:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 89.72% complete, ETA 02:02:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 89.79% complete, ETA 02:01:10
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 89.86% complete, ETA 02:00:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 89.93% complete, ETA 01:59:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 90.00% complete, ETA 01:58:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 90.07% complete, ETA 01:57:35
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 90.14% complete, ETA 01:56:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 90.21% complete, ETA 01:55:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 90.28% complete, ETA 01:54:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 90.35% complete, ETA 01:54:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 90.42% complete, ETA 01:53:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 90.49% complete, ETA 01:52:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 90.56% complete, ETA 01:51:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10?³, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 90.63% complete, ETA 01:50:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 90.69% complete, ETA 01:49:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.007 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.009), stdev = 0.002
  CI (99.9%): [0.001, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 90.76% complete, ETA 01:48:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.007 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.009), stdev = 0.002
  CI (99.9%): [0.001, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 90.83% complete, ETA 01:47:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.013 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.011, 0.013, 0.016), stdev = 0.003
  CI (99.9%): [0.002, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 90.90% complete, ETA 01:46:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.014 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.011, 0.014, 0.018), stdev = 0.003
  CI (99.9%): [0.001, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 90.97% complete, ETA 01:46:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.031 ms/op
Iteration   5: 0.033 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.027 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.022, 0.027, 0.033), stdev = 0.005
  CI (99.9%): [0.006, 0.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 91.04% complete, ETA 01:45:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.034 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.027 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.022, 0.027, 0.034), stdev = 0.006
  CI (99.9%): [0.004, 0.050] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 91.11% complete, ETA 01:44:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.043 ms/op
# Warmup Iteration   2: 0.042 ms/op
# Warmup Iteration   3: 0.044 ms/op
# Warmup Iteration   4: 0.044 ms/op
# Warmup Iteration   5: 0.043 ms/op
Iteration   1: 0.044 ms/op
Iteration   2: 0.044 ms/op
Iteration   3: 0.052 ms/op
Iteration   4: 0.070 ms/op
Iteration   5: 0.066 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.055 ±(99.9%) 0.047 ms/op [Average]
  (min, avg, max) = (0.044, 0.055, 0.070), stdev = 0.012
  CI (99.9%): [0.008, 0.103] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 91.18% complete, ETA 01:43:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.043 ms/op
# Warmup Iteration   2: 0.043 ms/op
# Warmup Iteration   3: 0.043 ms/op
# Warmup Iteration   4: 0.044 ms/op
# Warmup Iteration   5: 0.044 ms/op
Iteration   1: 0.043 ms/op
Iteration   2: 0.043 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.075 ms/op
Iteration   5: 0.066 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.055 ±(99.9%) 0.055 ms/op [Average]
  (min, avg, max) = (0.043, 0.055, 0.075), stdev = 0.014
  CI (99.9%): [? 0, 0.110] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 91.25% complete, ETA 01:42:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.088 ms/op
# Warmup Iteration   2: 0.087 ms/op
# Warmup Iteration   3: 0.087 ms/op
# Warmup Iteration   4: 0.088 ms/op
# Warmup Iteration   5: 0.087 ms/op
Iteration   1: 0.087 ms/op
Iteration   2: 0.086 ms/op
Iteration   3: 0.096 ms/op
Iteration   4: 0.124 ms/op
Iteration   5: 0.125 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.104 ±(99.9%) 0.074 ms/op [Average]
  (min, avg, max) = (0.086, 0.104, 0.125), stdev = 0.019
  CI (99.9%): [0.030, 0.177] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 91.32% complete, ETA 01:41:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.088 ms/op
# Warmup Iteration   2: 0.087 ms/op
# Warmup Iteration   3: 0.087 ms/op
# Warmup Iteration   4: 0.087 ms/op
# Warmup Iteration   5: 0.086 ms/op
Iteration   1: 0.086 ms/op
Iteration   2: 0.084 ms/op
Iteration   3: 0.097 ms/op
Iteration   4: 0.128 ms/op
Iteration   5: 0.127 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.105 ±(99.9%) 0.083 ms/op [Average]
  (min, avg, max) = (0.084, 0.105, 0.128), stdev = 0.022
  CI (99.9%): [0.021, 0.188] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 91.39% complete, ETA 01:40:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.178 ms/op
# Warmup Iteration   2: 0.175 ms/op
# Warmup Iteration   3: 0.176 ms/op
# Warmup Iteration   4: 0.177 ms/op
# Warmup Iteration   5: 0.175 ms/op
Iteration   1: 0.175 ms/op
Iteration   2: 0.176 ms/op
Iteration   3: 0.200 ms/op
Iteration   4: 0.274 ms/op
Iteration   5: 0.265 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.218 ±(99.9%) 0.185 ms/op [Average]
  (min, avg, max) = (0.175, 0.218, 0.274), stdev = 0.048
  CI (99.9%): [0.033, 0.403] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 91.46% complete, ETA 01:39:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.176 ms/op
# Warmup Iteration   2: 0.174 ms/op
# Warmup Iteration   3: 0.174 ms/op
# Warmup Iteration   4: 0.172 ms/op
# Warmup Iteration   5: 0.172 ms/op
Iteration   1: 0.173 ms/op
Iteration   2: 0.173 ms/op
Iteration   3: 0.199 ms/op
Iteration   4: 0.287 ms/op
Iteration   5: 0.233 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.213 ±(99.9%) 0.186 ms/op [Average]
  (min, avg, max) = (0.173, 0.213, 0.287), stdev = 0.048
  CI (99.9%): [0.027, 0.399] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 91.53% complete, ETA 01:39:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.356 ms/op
# Warmup Iteration   2: 0.350 ms/op
# Warmup Iteration   3: 0.352 ms/op
# Warmup Iteration   4: 0.353 ms/op
# Warmup Iteration   5: 0.351 ms/op
Iteration   1: 0.348 ms/op
Iteration   2: 0.351 ms/op
Iteration   3: 0.384 ms/op
Iteration   4: 0.517 ms/op
Iteration   5: 0.471 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.414 ±(99.9%) 0.292 ms/op [Average]
  (min, avg, max) = (0.348, 0.414, 0.517), stdev = 0.076
  CI (99.9%): [0.122, 0.706] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 91.60% complete, ETA 01:38:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.356 ms/op
# Warmup Iteration   2: 0.352 ms/op
# Warmup Iteration   3: 0.351 ms/op
# Warmup Iteration   4: 0.353 ms/op
# Warmup Iteration   5: 0.351 ms/op
Iteration   1: 0.343 ms/op
Iteration   2: 0.349 ms/op
Iteration   3: 0.399 ms/op
Iteration   4: 0.545 ms/op
Iteration   5: 0.587 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.445 ±(99.9%) 0.438 ms/op [Average]
  (min, avg, max) = (0.343, 0.445, 0.587), stdev = 0.114
  CI (99.9%): [0.007, 0.883] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 91.67% complete, ETA 01:37:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 91.74% complete, ETA 01:36:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 91.81% complete, ETA 01:35:35
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 91.88% complete, ETA 01:34:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 91.94% complete, ETA 01:33:51
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 92.01% complete, ETA 01:32:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 92.08% complete, ETA 01:32:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 92.15% complete, ETA 01:31:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 92.22% complete, ETA 01:30:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 92.29% complete, ETA 01:29:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 92.36% complete, ETA 01:28:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 92.43% complete, ETA 01:27:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 92.50% complete, ETA 01:26:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 92.57% complete, ETA 01:26:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 92.64% complete, ETA 01:25:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 92.71% complete, ETA 01:24:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 92.78% complete, ETA 01:23:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.008 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [0.001, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 92.85% complete, ETA 01:22:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.007 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.009), stdev = 0.001
  CI (99.9%): [0.001, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 92.92% complete, ETA 01:21:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.014 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.011, 0.014, 0.018), stdev = 0.004
  CI (99.9%): [? 10??, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 92.99% complete, ETA 01:21:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.016 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.011, 0.016, 0.019), stdev = 0.004
  CI (99.9%): [0.001, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 93.06% complete, ETA 01:20:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.038 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.034 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.026, 0.034, 0.043), stdev = 0.008
  CI (99.9%): [0.005, 0.064] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 93.13% complete, ETA 01:19:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.035 ms/op
Iteration   4: 0.042 ms/op
Iteration   5: 0.040 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.033 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.025, 0.033, 0.042), stdev = 0.008
  CI (99.9%): [0.002, 0.065] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 93.19% complete, ETA 01:18:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.053 ms/op
# Warmup Iteration   2: 0.053 ms/op
# Warmup Iteration   3: 0.051 ms/op
# Warmup Iteration   4: 0.048 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.053 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.067 ms/op
Iteration   4: 0.082 ms/op
Iteration   5: 0.075 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.065 ±(99.9%) 0.053 ms/op [Average]
  (min, avg, max) = (0.050, 0.065, 0.082), stdev = 0.014
  CI (99.9%): [0.012, 0.118] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 93.26% complete, ETA 01:17:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.049 ms/op
# Warmup Iteration   2: 0.049 ms/op
# Warmup Iteration   3: 0.048 ms/op
# Warmup Iteration   4: 0.048 ms/op
# Warmup Iteration   5: 0.047 ms/op
Iteration   1: 0.047 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.073 ms/op
Iteration   4: 0.075 ms/op
Iteration   5: 0.077 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.064 ±(99.9%) 0.059 ms/op [Average]
  (min, avg, max) = (0.047, 0.064, 0.077), stdev = 0.015
  CI (99.9%): [0.005, 0.123] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 93.33% complete, ETA 01:16:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.099 ms/op
# Warmup Iteration   2: 0.099 ms/op
# Warmup Iteration   3: 0.098 ms/op
# Warmup Iteration   4: 0.099 ms/op
# Warmup Iteration   5: 0.098 ms/op
Iteration   1: 0.102 ms/op
Iteration   2: 0.102 ms/op
Iteration   3: 0.123 ms/op
Iteration   4: 0.154 ms/op
Iteration   5: 0.147 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.126 ±(99.9%) 0.094 ms/op [Average]
  (min, avg, max) = (0.102, 0.126, 0.154), stdev = 0.024
  CI (99.9%): [0.031, 0.220] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 93.40% complete, ETA 01:15:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.099 ms/op
# Warmup Iteration   2: 0.094 ms/op
# Warmup Iteration   3: 0.094 ms/op
# Warmup Iteration   4: 0.095 ms/op
# Warmup Iteration   5: 0.095 ms/op
Iteration   1: 0.094 ms/op
Iteration   2: 0.096 ms/op
Iteration   3: 0.128 ms/op
Iteration   4: 0.157 ms/op
Iteration   5: 0.146 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.124 ±(99.9%) 0.109 ms/op [Average]
  (min, avg, max) = (0.094, 0.124, 0.157), stdev = 0.028
  CI (99.9%): [0.015, 0.234] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 93.47% complete, ETA 01:15:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.191 ms/op
# Warmup Iteration   2: 0.186 ms/op
# Warmup Iteration   3: 0.186 ms/op
# Warmup Iteration   4: 0.186 ms/op
# Warmup Iteration   5: 0.188 ms/op
Iteration   1: 0.187 ms/op
Iteration   2: 0.187 ms/op
Iteration   3: 0.250 ms/op
Iteration   4: 0.267 ms/op
Iteration   5: 0.262 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.231 ±(99.9%) 0.156 ms/op [Average]
  (min, avg, max) = (0.187, 0.231, 0.267), stdev = 0.040
  CI (99.9%): [0.075, 0.386] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 93.54% complete, ETA 01:14:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.212 ms/op
# Warmup Iteration   2: 0.190 ms/op
# Warmup Iteration   3: 0.198 ms/op
# Warmup Iteration   4: 0.204 ms/op
# Warmup Iteration   5: 0.207 ms/op
Iteration   1: 0.206 ms/op
Iteration   2: 0.210 ms/op
Iteration   3: 0.268 ms/op
Iteration   4: 0.283 ms/op
Iteration   5: 0.301 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.253 ±(99.9%) 0.166 ms/op [Average]
  (min, avg, max) = (0.206, 0.253, 0.301), stdev = 0.043
  CI (99.9%): [0.087, 0.419] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 93.61% complete, ETA 01:13:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.359 ms/op
# Warmup Iteration   2: 0.354 ms/op
# Warmup Iteration   3: 0.348 ms/op
# Warmup Iteration   4: 0.350 ms/op
# Warmup Iteration   5: 0.349 ms/op
Iteration   1: 0.357 ms/op
Iteration   2: 0.349 ms/op
Iteration   3: 0.461 ms/op
Iteration   4: 0.587 ms/op
Iteration   5: 0.536 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.458 ±(99.9%) 0.407 ms/op [Average]
  (min, avg, max) = (0.349, 0.458, 0.587), stdev = 0.106
  CI (99.9%): [0.051, 0.865] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 93.68% complete, ETA 01:12:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.411 ms/op
# Warmup Iteration   2: 0.404 ms/op
# Warmup Iteration   3: 0.426 ms/op
# Warmup Iteration   4: 0.427 ms/op
# Warmup Iteration   5: 0.429 ms/op
Iteration   1: 0.427 ms/op
Iteration   2: 0.418 ms/op
Iteration   3: 0.541 ms/op
Iteration   4: 0.606 ms/op
Iteration   5: 0.708 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.540 ±(99.9%) 0.473 ms/op [Average]
  (min, avg, max) = (0.418, 0.540, 0.708), stdev = 0.123
  CI (99.9%): [0.067, 1.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 93.75% complete, ETA 01:11:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 93.82% complete, ETA 01:10:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 93.89% complete, ETA 01:10:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 93.96% complete, ETA 01:09:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 94.03% complete, ETA 01:08:22
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 94.10% complete, ETA 01:07:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 94.17% complete, ETA 01:06:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 94.24% complete, ETA 01:05:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 94.31% complete, ETA 01:05:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 94.38% complete, ETA 01:04:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 94.44% complete, ETA 01:03:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 94.51% complete, ETA 01:02:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 94.58% complete, ETA 01:01:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 94.65% complete, ETA 01:00:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 94.72% complete, ETA 01:00:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 10?³, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 94.79% complete, ETA 00:59:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 10??, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 94.86% complete, ETA 00:58:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.007 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.009), stdev = 0.001
  CI (99.9%): [0.002, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 94.93% complete, ETA 00:57:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.008 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [? 10??, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 95.00% complete, ETA 00:56:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.015 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.012, 0.015, 0.019), stdev = 0.004
  CI (99.9%): [0.001, 0.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 95.07% complete, ETA 00:55:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.015 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.012, 0.015, 0.019), stdev = 0.003
  CI (99.9%): [0.003, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 95.14% complete, ETA 00:55:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.039 ms/op
Iteration   5: 0.035 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.030 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.024, 0.030, 0.039), stdev = 0.007
  CI (99.9%): [0.004, 0.057] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 95.21% complete, ETA 00:54:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.034 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.029 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.024, 0.029, 0.036), stdev = 0.006
  CI (99.9%): [0.008, 0.051] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 95.28% complete, ETA 00:53:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.046 ms/op
Iteration   5: 0.046 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.046 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.045, 0.046, 0.048), stdev = 0.001
  CI (99.9%): [0.043, 0.050] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 95.35% complete, ETA 00:52:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.044 ms/op
# Warmup Iteration   5: 0.044 ms/op
Iteration   1: 0.044 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.045 ms/op
Iteration   4: 0.046 ms/op
Iteration   5: 0.046 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.045 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.044, 0.045, 0.046), stdev = 0.001
  CI (99.9%): [0.042, 0.048] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 95.42% complete, ETA 00:51:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.092 ms/op
# Warmup Iteration   2: 0.092 ms/op
# Warmup Iteration   3: 0.090 ms/op
# Warmup Iteration   4: 0.090 ms/op
# Warmup Iteration   5: 0.089 ms/op
Iteration   1: 0.091 ms/op
Iteration   2: 0.092 ms/op
Iteration   3: 0.115 ms/op
Iteration   4: 0.154 ms/op
Iteration   5: 0.139 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.118 ±(99.9%) 0.108 ms/op [Average]
  (min, avg, max) = (0.091, 0.118, 0.154), stdev = 0.028
  CI (99.9%): [0.010, 0.226] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 95.49% complete, ETA 00:51:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.102 ms/op
# Warmup Iteration   2: 0.098 ms/op
# Warmup Iteration   3: 0.089 ms/op
# Warmup Iteration   4: 0.089 ms/op
# Warmup Iteration   5: 0.095 ms/op
Iteration   1: 0.091 ms/op
Iteration   2: 0.095 ms/op
Iteration   3: 0.108 ms/op
Iteration   4: 0.148 ms/op
Iteration   5: 0.152 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.119 ±(99.9%) 0.112 ms/op [Average]
  (min, avg, max) = (0.091, 0.119, 0.152), stdev = 0.029
  CI (99.9%): [0.007, 0.231] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 95.56% complete, ETA 00:50:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.189 ms/op
# Warmup Iteration   2: 0.193 ms/op
# Warmup Iteration   3: 0.183 ms/op
# Warmup Iteration   4: 0.176 ms/op
# Warmup Iteration   5: 0.178 ms/op
Iteration   1: 0.188 ms/op
Iteration   2: 0.198 ms/op
Iteration   3: 0.227 ms/op
Iteration   4: 0.303 ms/op
Iteration   5: 0.311 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.245 ±(99.9%) 0.223 ms/op [Average]
  (min, avg, max) = (0.188, 0.245, 0.311), stdev = 0.058
  CI (99.9%): [0.022, 0.469] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 95.63% complete, ETA 00:49:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.183 ms/op
# Warmup Iteration   2: 0.187 ms/op
# Warmup Iteration   3: 0.196 ms/op
# Warmup Iteration   4: 0.199 ms/op
# Warmup Iteration   5: 0.183 ms/op
Iteration   1: 0.184 ms/op
Iteration   2: 0.184 ms/op
Iteration   3: 0.208 ms/op
Iteration   4: 0.300 ms/op
Iteration   5: 0.294 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.234 ±(99.9%) 0.224 ms/op [Average]
  (min, avg, max) = (0.184, 0.234, 0.300), stdev = 0.058
  CI (99.9%): [0.010, 0.458] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 95.69% complete, ETA 00:48:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.357 ms/op
# Warmup Iteration   2: 0.357 ms/op
# Warmup Iteration   3: 0.366 ms/op
# Warmup Iteration   4: 0.375 ms/op
# Warmup Iteration   5: 0.362 ms/op
Iteration   1: 0.368 ms/op
Iteration   2: 0.388 ms/op
Iteration   3: 0.442 ms/op
Iteration   4: 0.583 ms/op
Iteration   5: 0.636 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.484 ±(99.9%) 0.462 ms/op [Average]
  (min, avg, max) = (0.368, 0.484, 0.636), stdev = 0.120
  CI (99.9%): [0.022, 0.945] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 95.76% complete, ETA 00:47:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.371 ms/op
# Warmup Iteration   2: 0.360 ms/op
# Warmup Iteration   3: 0.360 ms/op
# Warmup Iteration   4: 0.360 ms/op
# Warmup Iteration   5: 0.377 ms/op
Iteration   1: 0.371 ms/op
Iteration   2: 0.385 ms/op
Iteration   3: 0.440 ms/op
Iteration   4: 0.624 ms/op
Iteration   5: 0.532 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.470 ±(99.9%) 0.411 ms/op [Average]
  (min, avg, max) = (0.371, 0.470, 0.624), stdev = 0.107
  CI (99.9%): [0.060, 0.881] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 95.83% complete, ETA 00:47:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 95.90% complete, ETA 00:46:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 95.97% complete, ETA 00:45:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 96.04% complete, ETA 00:44:34
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 96.11% complete, ETA 00:43:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 96.18% complete, ETA 00:42:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 96.25% complete, ETA 00:42:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 96.32% complete, ETA 00:41:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 96.39% complete, ETA 00:40:33
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 96.46% complete, ETA 00:39:45
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 96.53% complete, ETA 00:38:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 96.60% complete, ETA 00:38:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 96.67% complete, ETA 00:37:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 96.74% complete, ETA 00:36:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 96.81% complete, ETA 00:35:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 96.88% complete, ETA 00:34:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 96.94% complete, ETA 00:34:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.007 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.010), stdev = 0.002
  CI (99.9%): [0.001, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 97.01% complete, ETA 00:33:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.008 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [0.001, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 97.08% complete, ETA 00:32:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.016 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.020), stdev = 0.004
  CI (99.9%): [? 0, 0.032] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 97.15% complete, ETA 00:31:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.015 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.012, 0.015, 0.019), stdev = 0.003
  CI (99.9%): [0.003, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 97.22% complete, ETA 00:30:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.039 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.032 ±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (0.022, 0.032, 0.045), stdev = 0.010
  CI (99.9%): [? 0, 0.070] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 97.29% complete, ETA 00:30:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.038 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.029 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.023, 0.029, 0.038), stdev = 0.007
  CI (99.9%): [? 10?³, 0.058] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 97.36% complete, ETA 00:29:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.051 ms/op
# Warmup Iteration   4: 0.050 ms/op
# Warmup Iteration   5: 0.049 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.052 ms/op
Iteration   4: 0.072 ms/op
Iteration   5: 0.076 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.059 ±(99.9%) 0.053 ms/op [Average]
  (min, avg, max) = (0.048, 0.059, 0.076), stdev = 0.014
  CI (99.9%): [0.007, 0.112] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 97.43% complete, ETA 00:28:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.049 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.047 ms/op
# Warmup Iteration   4: 0.049 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.046 ms/op
Iteration   3: 0.053 ms/op
Iteration   4: 0.073 ms/op
Iteration   5: 0.069 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.058 ±(99.9%) 0.047 ms/op [Average]
  (min, avg, max) = (0.046, 0.058, 0.073), stdev = 0.012
  CI (99.9%): [0.011, 0.105] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 97.50% complete, ETA 00:27:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.100 ms/op
# Warmup Iteration   2: 0.099 ms/op
# Warmup Iteration   3: 0.099 ms/op
# Warmup Iteration   4: 0.101 ms/op
# Warmup Iteration   5: 0.098 ms/op
Iteration   1: 0.103 ms/op
Iteration   2: 0.098 ms/op
Iteration   3: 0.112 ms/op
Iteration   4: 0.169 ms/op
Iteration   5: 0.176 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.132 ±(99.9%) 0.146 ms/op [Average]
  (min, avg, max) = (0.098, 0.132, 0.176), stdev = 0.038
  CI (99.9%): [? 0, 0.278] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 97.57% complete, ETA 00:27:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.097 ms/op
# Warmup Iteration   2: 0.098 ms/op
# Warmup Iteration   3: 0.098 ms/op
# Warmup Iteration   4: 0.101 ms/op
# Warmup Iteration   5: 0.101 ms/op
Iteration   1: 0.098 ms/op
Iteration   2: 0.098 ms/op
Iteration   3: 0.109 ms/op
Iteration   4: 0.150 ms/op
Iteration   5: 0.146 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.120 ±(99.9%) 0.098 ms/op [Average]
  (min, avg, max) = (0.098, 0.120, 0.150), stdev = 0.026
  CI (99.9%): [0.022, 0.219] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 97.64% complete, ETA 00:26:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.201 ms/op
# Warmup Iteration   2: 0.195 ms/op
# Warmup Iteration   3: 0.197 ms/op
# Warmup Iteration   4: 0.195 ms/op
# Warmup Iteration   5: 0.192 ms/op
Iteration   1: 0.194 ms/op
Iteration   2: 0.196 ms/op
Iteration   3: 0.221 ms/op
Iteration   4: 0.274 ms/op
Iteration   5: 0.293 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.236 ±(99.9%) 0.176 ms/op [Average]
  (min, avg, max) = (0.194, 0.236, 0.293), stdev = 0.046
  CI (99.9%): [0.060, 0.411] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 97.71% complete, ETA 00:25:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.202 ms/op
# Warmup Iteration   2: 0.196 ms/op
# Warmup Iteration   3: 0.191 ms/op
# Warmup Iteration   4: 0.198 ms/op
# Warmup Iteration   5: 0.197 ms/op
Iteration   1: 0.196 ms/op
Iteration   2: 0.192 ms/op
Iteration   3: 0.220 ms/op
Iteration   4: 0.292 ms/op
Iteration   5: 0.309 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.242 ±(99.9%) 0.212 ms/op [Average]
  (min, avg, max) = (0.192, 0.242, 0.309), stdev = 0.055
  CI (99.9%): [0.030, 0.454] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 97.78% complete, ETA 00:24:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.386 ms/op
# Warmup Iteration   2: 0.388 ms/op
# Warmup Iteration   3: 0.384 ms/op
# Warmup Iteration   4: 0.391 ms/op
# Warmup Iteration   5: 0.378 ms/op
Iteration   1: 0.392 ms/op
Iteration   2: 0.390 ms/op
Iteration   3: 0.421 ms/op
Iteration   4: 0.550 ms/op
Iteration   5: 0.584 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.467 ±(99.9%) 0.357 ms/op [Average]
  (min, avg, max) = (0.390, 0.467, 0.584), stdev = 0.093
  CI (99.9%): [0.111, 0.824] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 97.85% complete, ETA 00:23:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.403 ms/op
# Warmup Iteration   2: 0.379 ms/op
# Warmup Iteration   3: 0.389 ms/op
# Warmup Iteration   4: 0.410 ms/op
# Warmup Iteration   5: 0.380 ms/op
Iteration   1: 0.389 ms/op
Iteration   2: 0.380 ms/op
Iteration   3: 0.459 ms/op
Iteration   4: 0.628 ms/op
Iteration   5: 0.647 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.500 ±(99.9%) 0.496 ms/op [Average]
  (min, avg, max) = (0.380, 0.500, 0.647), stdev = 0.129
  CI (99.9%): [0.004, 0.997] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 97.92% complete, ETA 00:23:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 97.99% complete, ETA 00:22:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 98.06% complete, ETA 00:21:33
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 98.13% complete, ETA 00:20:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 98.19% complete, ETA 00:19:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 98.26% complete, ETA 00:19:12
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 98.33% complete, ETA 00:18:25
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 98.40% complete, ETA 00:17:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 98.47% complete, ETA 00:16:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 98.54% complete, ETA 00:16:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 98.61% complete, ETA 00:15:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 98.68% complete, ETA 00:14:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 98.75% complete, ETA 00:13:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 98.82% complete, ETA 00:13:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 98.89% complete, ETA 00:12:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 98.96% complete, ETA 00:11:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 99.03% complete, ETA 00:10:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.009 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.010), stdev = 0.002
  CI (99.9%): [0.003, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 99.10% complete, ETA 00:09:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.009 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.006, 0.009, 0.012), stdev = 0.003
  CI (99.9%): [? 0, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 99.17% complete, ETA 00:09:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.018 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.013, 0.018, 0.023), stdev = 0.005
  CI (99.9%): [? 0, 0.036] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 99.24% complete, ETA 00:08:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.016 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.011, 0.016, 0.021), stdev = 0.005
  CI (99.9%): [? 0, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 99.31% complete, ETA 00:07:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.038 ms/op
Iteration   5: 0.042 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.036 ±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (0.026, 0.036, 0.047), stdev = 0.010
  CI (99.9%): [? 0, 0.073] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 99.38% complete, ETA 00:06:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.039 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.044 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.036 ±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (0.025, 0.036, 0.045), stdev = 0.010
  CI (99.9%): [? 0, 0.074] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 99.44% complete, ETA 00:06:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.044 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.085 ms/op
Iteration   4: 0.073 ms/op
Iteration   5: 0.078 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.066 ±(99.9%) 0.066 ms/op [Average]
  (min, avg, max) = (0.048, 0.066, 0.085), stdev = 0.017
  CI (99.9%): [? 0, 0.133] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 99.51% complete, ETA 00:05:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.048 ms/op
# Warmup Iteration   3: 0.049 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.049 ms/op
Iteration   1: 0.051 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.076 ms/op
Iteration   4: 0.079 ms/op
Iteration   5: 0.077 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.067 ±(99.9%) 0.057 ms/op [Average]
  (min, avg, max) = (0.050, 0.067, 0.079), stdev = 0.015
  CI (99.9%): [0.010, 0.124] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 99.58% complete, ETA 00:04:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.095 ms/op
# Warmup Iteration   2: 0.096 ms/op
# Warmup Iteration   3: 0.093 ms/op
# Warmup Iteration   4: 0.096 ms/op
# Warmup Iteration   5: 0.098 ms/op
Iteration   1: 0.095 ms/op
Iteration   2: 0.098 ms/op
Iteration   3: 0.153 ms/op
Iteration   4: 0.137 ms/op
Iteration   5: 0.144 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.126 ±(99.9%) 0.105 ms/op [Average]
  (min, avg, max) = (0.095, 0.126, 0.153), stdev = 0.027
  CI (99.9%): [0.021, 0.231] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 99.65% complete, ETA 00:03:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.096 ms/op
# Warmup Iteration   2: 0.093 ms/op
# Warmup Iteration   3: 0.093 ms/op
# Warmup Iteration   4: 0.094 ms/op
# Warmup Iteration   5: 0.099 ms/op
Iteration   1: 0.099 ms/op
Iteration   2: 0.107 ms/op
Iteration   3: 0.149 ms/op
Iteration   4: 0.141 ms/op
Iteration   5: 0.143 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.128 ±(99.9%) 0.088 ms/op [Average]
  (min, avg, max) = (0.099, 0.128, 0.149), stdev = 0.023
  CI (99.9%): [0.039, 0.216] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 99.72% complete, ETA 00:03:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.216 ms/op
# Warmup Iteration   2: 0.212 ms/op
# Warmup Iteration   3: 0.212 ms/op
# Warmup Iteration   4: 0.208 ms/op
# Warmup Iteration   5: 0.214 ms/op
Iteration   1: 0.212 ms/op
Iteration   2: 0.236 ms/op
Iteration   3: 0.319 ms/op
Iteration   4: 0.322 ms/op
Iteration   5: 0.305 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.279 ±(99.9%) 0.196 ms/op [Average]
  (min, avg, max) = (0.212, 0.279, 0.322), stdev = 0.051
  CI (99.9%): [0.083, 0.475] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 99.79% complete, ETA 00:02:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.200 ms/op
# Warmup Iteration   2: 0.191 ms/op
# Warmup Iteration   3: 0.188 ms/op
# Warmup Iteration   4: 0.188 ms/op
# Warmup Iteration   5: 0.190 ms/op
Iteration   1: 0.189 ms/op
Iteration   2: 0.210 ms/op
Iteration   3: 0.321 ms/op
Iteration   4: 0.287 ms/op
Iteration   5: 0.271 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.256 ±(99.9%) 0.212 ms/op [Average]
  (min, avg, max) = (0.189, 0.256, 0.321), stdev = 0.055
  CI (99.9%): [0.044, 0.467] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 99.86% complete, ETA 00:01:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.424 ms/op
# Warmup Iteration   2: 0.435 ms/op
# Warmup Iteration   3: 0.408 ms/op
# Warmup Iteration   4: 0.403 ms/op
# Warmup Iteration   5: 0.399 ms/op
Iteration   1: 0.404 ms/op
Iteration   2: 0.413 ms/op
Iteration   3: 0.655 ms/op
Iteration   4: 0.710 ms/op
Iteration   5: 0.680 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.573 ±(99.9%) 0.581 ms/op [Average]
  (min, avg, max) = (0.404, 0.573, 0.710), stdev = 0.151
  CI (99.9%): [? 0, 1.154] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 99.93% complete, ETA 00:00:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.361 ms/op
# Warmup Iteration   2: 0.357 ms/op
# Warmup Iteration   3: 0.359 ms/op
# Warmup Iteration   4: 0.352 ms/op
# Warmup Iteration   5: 0.358 ms/op
Iteration   1: 0.376 ms/op
Iteration   2: 0.400 ms/op
Iteration   3: 0.572 ms/op
Iteration   4: 0.658 ms/op
Iteration   5: 0.547 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark":
  0.511 ±(99.9%) 0.461 ms/op [Average]
  (min, avg, max) = (0.376, 0.511, 0.658), stdev = 0.120
  CI (99.9%): [0.050, 0.971] (assumes normal distribution)


# Run complete. Total time: 18:12:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             (nCommit)  (nKeys)  (nPut)  (nPutAll)  (nRestore)  (nValues)  Mode  Cnt        Score        Error  Units
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32       1        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32       1        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32       2        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32       2        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32       4        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32       4        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32       8        N/A         N/A          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32       8        N/A         N/A          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32      16        N/A         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32      16        N/A         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32      32        N/A         N/A          2  avgt    5        0.003 ±      0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32      32        N/A         N/A          3  avgt    5        0.003 ±      0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32      64        N/A         N/A          2  avgt    5        0.006 ±      0.007  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32      64        N/A         N/A          3  avgt    5        0.007 ±      0.008  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32     128        N/A         N/A          2  avgt    5        0.012 ±      0.011  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32     128        N/A         N/A          3  avgt    5        0.014 ±      0.016  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32     256        N/A         N/A          2  avgt    5        0.026 ±      0.025  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32     256        N/A         N/A          3  avgt    5        0.028 ±      0.025  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32     512        N/A         N/A          2  avgt    5        0.053 ±      0.057  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32     512        N/A         N/A          3  avgt    5        0.061 ±      0.073  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32    1024        N/A         N/A          2  avgt    5        0.110 ±      0.121  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32    1024        N/A         N/A          3  avgt    5        0.120 ±      0.124  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32    2048        N/A         N/A          2  avgt    5        0.213 ±      0.204  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32    2048        N/A         N/A          3  avgt    5        0.230 ±      0.188  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32    4096        N/A         N/A          2  avgt    5        0.448 ±      0.428  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32    4096        N/A         N/A          3  avgt    5        0.488 ±      0.485  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32    8192        N/A         N/A          2  avgt    5        0.891 ±      0.862  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32    8192        N/A         N/A          3  avgt    5        0.991 ±      1.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32   16384        N/A         N/A          2  avgt    5        1.858 ±      1.923  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A       32   16384        N/A         N/A          3  avgt    5        1.942 ±      2.074  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000       1        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000       1        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000       2        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000       2        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000       4        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000       4        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000       8        N/A         N/A          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000       8        N/A         N/A          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000      16        N/A         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000      16        N/A         N/A          3  avgt    5        0.001 ±      0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000      32        N/A         N/A          2  avgt    5        0.003 ±      0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000      32        N/A         N/A          3  avgt    5        0.004 ±      0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000      64        N/A         N/A          2  avgt    5        0.009 ±      0.010  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000      64        N/A         N/A          3  avgt    5        0.010 ±      0.009  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000     128        N/A         N/A          2  avgt    5        0.023 ±      0.021  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000     128        N/A         N/A          3  avgt    5        0.026 ±      0.023  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000     256        N/A         N/A          2  avgt    5        0.067 ±      0.060  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000     256        N/A         N/A          3  avgt    5        0.085 ±      0.074  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000     512        N/A         N/A          2  avgt    5        0.202 ±      0.175  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000     512        N/A         N/A          3  avgt    5        0.259 ±      0.233  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000    1024        N/A         N/A          2  avgt    5        0.616 ±      0.515  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000    1024        N/A         N/A          3  avgt    5        0.842 ±      0.928  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000    2048        N/A         N/A          2  avgt    5        1.846 ±      1.871  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000    2048        N/A         N/A          3  avgt    5        2.224 ±      2.075  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000    4096        N/A         N/A          2  avgt    5        4.553 ±      3.920  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000    4096        N/A         N/A          3  avgt    5        6.061 ±      7.058  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000    8192        N/A         N/A          2  avgt    5       10.517 ±     10.349  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000    8192        N/A         N/A          3  avgt    5       13.170 ±     15.224  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000   16384        N/A         N/A          2  avgt    5       23.724 ±     22.023  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A     1000   16384        N/A         N/A          3  avgt    5       28.944 ±     26.468  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000       1        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000       1        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000       2        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000       2        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000       4        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000       4        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000       8        N/A         N/A          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000       8        N/A         N/A          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000      16        N/A         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000      16        N/A         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000      32        N/A         N/A          2  avgt    5        0.003 ±      0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000      32        N/A         N/A          3  avgt    5        0.004 ±      0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000      64        N/A         N/A          2  avgt    5        0.009 ±      0.008  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000      64        N/A         N/A          3  avgt    5        0.009 ±      0.008  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000     128        N/A         N/A          2  avgt    5        0.023 ±      0.022  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000     128        N/A         N/A          3  avgt    5        0.029 ±      0.031  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000     256        N/A         N/A          2  avgt    5        0.078 ±      0.096  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000     256        N/A         N/A          3  avgt    5        0.089 ±      0.065  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000     512        N/A         N/A          2  avgt    5        0.193 ±      0.187  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000     512        N/A         N/A          3  avgt    5        0.248 ±      0.254  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000    1024        N/A         N/A          2  avgt    5        0.865 ±      0.905  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000    1024        N/A         N/A          3  avgt    5        1.092 ±      1.199  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000    2048        N/A         N/A          2  avgt    5        3.133 ±      3.274  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000    2048        N/A         N/A          3  avgt    5        4.204 ±      4.710  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000    4096        N/A         N/A          2  avgt    5       12.595 ±     11.888  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000    4096        N/A         N/A          3  avgt    5       17.329 ±     16.660  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000    8192        N/A         N/A          2  avgt    5       63.073 ±     55.910  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000    8192        N/A         N/A          3  avgt    5       87.849 ±     78.204  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000   16384        N/A         N/A          2  avgt    5      547.652 ±    408.608  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmark                           N/A   100000   16384        N/A         N/A          3  avgt    5     1013.038 ±    319.680  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32       1        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32       1        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32       2        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32       2        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32       4        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32       4        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32       8        N/A         N/A          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32       8        N/A         N/A          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32      16        N/A         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32      16        N/A         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32      32        N/A         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32      32        N/A         N/A          3  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32      64        N/A         N/A          2  avgt    5        0.003 ±      0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32      64        N/A         N/A          3  avgt    5        0.003 ±      0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32     128        N/A         N/A          2  avgt    5        0.006 ±      0.005  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32     128        N/A         N/A          3  avgt    5        0.006 ±      0.005  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32     256        N/A         N/A          2  avgt    5        0.011 ±      0.010  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32     256        N/A         N/A          3  avgt    5        0.011 ±      0.009  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32     512        N/A         N/A          2  avgt    5        0.023 ±      0.024  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32     512        N/A         N/A          3  avgt    5        0.022 ±      0.019  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32    1024        N/A         N/A          2  avgt    5        0.046 ±      0.044  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32    1024        N/A         N/A          3  avgt    5        0.047 ±      0.041  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32    2048        N/A         N/A          2  avgt    5        0.092 ±      0.089  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32    2048        N/A         N/A          3  avgt    5        0.088 ±      0.060  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32    4096        N/A         N/A          2  avgt    5        0.185 ±      0.185  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32    4096        N/A         N/A          3  avgt    5        0.164 ±      0.117  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32    8192        N/A         N/A          2  avgt    5        0.346 ±      0.295  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32    8192        N/A         N/A          3  avgt    5        0.327 ±      0.249  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32   16384        N/A         N/A          2  avgt    5        0.688 ±      0.595  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A       32   16384        N/A         N/A          3  avgt    5        0.680 ±      0.628  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000       1        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000       1        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000       2        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000       2        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000       4        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000       4        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000       8        N/A         N/A          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000       8        N/A         N/A          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000      16        N/A         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000      16        N/A         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000      32        N/A         N/A          2  avgt    5        0.002 ±      0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000      32        N/A         N/A          3  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000      64        N/A         N/A          2  avgt    5        0.005 ±      0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000      64        N/A         N/A          3  avgt    5        0.005 ±      0.006  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000     128        N/A         N/A          2  avgt    5        0.008 ±      0.010  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000     128        N/A         N/A          3  avgt    5        0.008 ±      0.008  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000     256        N/A         N/A          2  avgt    5        0.016 ±      0.018  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000     256        N/A         N/A          3  avgt    5        0.017 ±      0.020  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000     512        N/A         N/A          2  avgt    5        0.032 ±      0.031  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000     512        N/A         N/A          3  avgt    5        0.035 ±      0.037  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000    1024        N/A         N/A          2  avgt    5        0.059 ±      0.060  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000    1024        N/A         N/A          3  avgt    5        0.089 ±      0.053  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000    2048        N/A         N/A          2  avgt    5        0.111 ±      0.086  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000    2048        N/A         N/A          3  avgt    5        0.114 ±      0.126  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000    4096        N/A         N/A          2  avgt    5        0.210 ±      0.212  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000    4096        N/A         N/A          3  avgt    5        0.211 ±      0.236  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000    8192        N/A         N/A          2  avgt    5        0.390 ±      0.309  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000    8192        N/A         N/A          3  avgt    5        0.404 ±      0.407  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000   16384        N/A         N/A          2  avgt    5        0.806 ±      0.820  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A     1000   16384        N/A         N/A          3  avgt    5        0.755 ±      0.629  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000       1        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000       1        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000       2        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000       2        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000       4        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000       4        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000       8        N/A         N/A          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000       8        N/A         N/A          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000      16        N/A         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000      16        N/A         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000      32        N/A         N/A          2  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000      32        N/A         N/A          3  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000      64        N/A         N/A          2  avgt    5        0.003 ±      0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000      64        N/A         N/A          3  avgt    5        0.004 ±      0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000     128        N/A         N/A          2  avgt    5        0.007 ±      0.007  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000     128        N/A         N/A          3  avgt    5        0.008 ±      0.008  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000     256        N/A         N/A          2  avgt    5        0.015 ±      0.014  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000     256        N/A         N/A          3  avgt    5        0.015 ±      0.014  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000     512        N/A         N/A          2  avgt    5        0.033 ±      0.037  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000     512        N/A         N/A          3  avgt    5        0.038 ±      0.043  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000    1024        N/A         N/A          2  avgt    5        0.067 ±      0.082  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000    1024        N/A         N/A          3  avgt    5        0.067 ±      0.076  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000    2048        N/A         N/A          2  avgt    5        0.125 ±      0.119  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000    2048        N/A         N/A          3  avgt    5        0.124 ±      0.122  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000    4096        N/A         N/A          2  avgt    5        0.263 ±      0.278  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000    4096        N/A         N/A          3  avgt    5        0.243 ±      0.200  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000    8192        N/A         N/A          2  avgt    5        0.521 ±      0.480  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000    8192        N/A         N/A          3  avgt    5        0.532 ±      0.521  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000   16384        N/A         N/A          2  avgt    5        1.076 ±      0.967  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmark                                    N/A   100000   16384        N/A         N/A          3  avgt    5        1.123 ±      1.060  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32       1        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32       1        N/A         N/A          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32       2        N/A         N/A          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32       2        N/A         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32       4        N/A         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32       4        N/A         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32       8        N/A         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32       8        N/A         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32      16        N/A         N/A          2  avgt    5        0.003 ±      0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32      16        N/A         N/A          3  avgt    5        0.003 ±      0.004  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32      32        N/A         N/A          2  avgt    5        0.006 ±      0.005  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32      32        N/A         N/A          3  avgt    5        0.008 ±      0.005  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32      64        N/A         N/A          2  avgt    5        0.015 ±      0.013  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32      64        N/A         N/A          3  avgt    5        0.018 ±      0.014  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32     128        N/A         N/A          2  avgt    5        0.036 ±      0.032  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32     128        N/A         N/A          3  avgt    5        0.038 ±      0.030  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32     256        N/A         N/A          2  avgt    5        0.067 ±      0.048  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32     256        N/A         N/A          3  avgt    5        0.080 ±      0.071  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32     512        N/A         N/A          2  avgt    5        0.159 ±      0.140  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32     512        N/A         N/A          3  avgt    5        0.151 ±      0.123  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32    1024        N/A         N/A          2  avgt    5        0.294 ±      0.278  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32    1024        N/A         N/A          3  avgt    5        0.341 ±      0.421  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32    2048        N/A         N/A          2  avgt    5        0.604 ±      0.580  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32    2048        N/A         N/A          3  avgt    5        0.643 ±      0.588  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32    4096        N/A         N/A          2  avgt    5        1.280 ±      1.113  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32    4096        N/A         N/A          3  avgt    5        1.310 ±      1.170  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32    8192        N/A         N/A          2  avgt    5        2.432 ±      2.324  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32    8192        N/A         N/A          3  avgt    5        2.659 ±      2.404  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32   16384        N/A         N/A          2  avgt    5        5.012 ±      4.831  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A       32   16384        N/A         N/A          3  avgt    5        5.192 ±      4.545  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000       1        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000       1        N/A         N/A          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000       2        N/A         N/A          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000       2        N/A         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000       4        N/A         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000       4        N/A         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000       8        N/A         N/A          2  avgt    5        0.001 ±      0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000       8        N/A         N/A          3  avgt    5        0.002 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000      16        N/A         N/A          2  avgt    5        0.003 ±      0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000      16        N/A         N/A          3  avgt    5        0.005 ±      0.005  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000      32        N/A         N/A          2  avgt    5        0.010 ±      0.010  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000      32        N/A         N/A          3  avgt    5        0.014 ±      0.013  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000      64        N/A         N/A          2  avgt    5        0.030 ±      0.032  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000      64        N/A         N/A          3  avgt    5        0.039 ±      0.035  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000     128        N/A         N/A          2  avgt    5        0.076 ±      0.060  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000     128        N/A         N/A          3  avgt    5        0.100 ±      0.093  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000     256        N/A         N/A          2  avgt    5        0.189 ±      0.190  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000     256        N/A         N/A          3  avgt    5        0.223 ±      0.231  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000     512        N/A         N/A          2  avgt    5        0.424 ±      0.423  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000     512        N/A         N/A          3  avgt    5        0.488 ±      0.469  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000    1024        N/A         N/A          2  avgt    5        1.053 ±      1.185  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000    1024        N/A         N/A          3  avgt    5        1.108 ±      1.069  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000    2048        N/A         N/A          2  avgt    5        2.229 ±      2.680  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000    2048        N/A         N/A          3  avgt    5        2.530 ±      2.122  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000    4096        N/A         N/A          2  avgt    5        4.598 ±      4.058  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000    4096        N/A         N/A          3  avgt    5        5.422 ±      5.469  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000    8192        N/A         N/A          2  avgt    5       10.672 ±     12.633  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000    8192        N/A         N/A          3  avgt    5       11.110 ±      9.081  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000   16384        N/A         N/A          2  avgt    5       20.986 ±     20.462  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A     1000   16384        N/A         N/A          3  avgt    5       23.324 ±     21.583  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000       1        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000       1        N/A         N/A          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000       2        N/A         N/A          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000       2        N/A         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000       4        N/A         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000       4        N/A         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000       8        N/A         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000       8        N/A         N/A          3  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000      16        N/A         N/A          2  avgt    5        0.003 ±      0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000      16        N/A         N/A          3  avgt    5        0.005 ±      0.004  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000      32        N/A         N/A          2  avgt    5        0.010 ±      0.009  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000      32        N/A         N/A          3  avgt    5        0.014 ±      0.013  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000      64        N/A         N/A          2  avgt    5        0.031 ±      0.030  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000      64        N/A         N/A          3  avgt    5        0.041 ±      0.039  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000     128        N/A         N/A          2  avgt    5        0.080 ±      0.061  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000     128        N/A         N/A          3  avgt    5        0.101 ±      0.092  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000     256        N/A         N/A          2  avgt    5        0.186 ±      0.132  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000     256        N/A         N/A          3  avgt    5        0.244 ±      0.268  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000     512        N/A         N/A          2  avgt    5        0.475 ±      0.391  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000     512        N/A         N/A          3  avgt    5        0.599 ±      0.434  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000    1024        N/A         N/A          2  avgt    5        1.063 ±      1.132  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000    1024        N/A         N/A          3  avgt    5        1.361 ±      1.691  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000    2048        N/A         N/A          2  avgt    5        2.654 ±      2.568  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000    2048        N/A         N/A          3  avgt    5        3.220 ±      3.894  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000    4096        N/A         N/A          2  avgt    5        6.699 ±      6.024  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000    4096        N/A         N/A          3  avgt    5        7.453 ±      5.774  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000    8192        N/A         N/A          2  avgt    5       15.408 ±     14.059  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000    8192        N/A         N/A          3  avgt    5       17.268 ±     15.381  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000   16384        N/A         N/A          2  avgt    5       36.264 ±     40.228  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmark                          N/A   100000   16384        N/A         N/A          3  avgt    5       40.474 ±     43.474  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32       1        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32       1        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32       2        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32       2        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32       4        N/A         N/A          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32       4        N/A         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32       8        N/A         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32       8        N/A         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32      16        N/A         N/A          2  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32      16        N/A         N/A          3  avgt    5        0.002 ±      0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32      32        N/A         N/A          2  avgt    5        0.005 ±      0.005  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32      32        N/A         N/A          3  avgt    5        0.005 ±      0.005  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32      64        N/A         N/A          2  avgt    5        0.010 ±      0.010  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32      64        N/A         N/A          3  avgt    5        0.012 ±      0.010  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32     128        N/A         N/A          2  avgt    5        0.023 ±      0.016  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32     128        N/A         N/A          3  avgt    5        0.027 ±      0.023  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32     256        N/A         N/A          2  avgt    5        0.053 ±      0.055  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32     256        N/A         N/A          3  avgt    5        0.051 ±      0.039  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32     512        N/A         N/A          2  avgt    5        0.099 ±      0.099  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32     512        N/A         N/A          3  avgt    5        0.102 ±      0.080  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32    1024        N/A         N/A          2  avgt    5        0.200 ±      0.177  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32    1024        N/A         N/A          3  avgt    5        0.212 ±      0.153  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32    2048        N/A         N/A          2  avgt    5        0.417 ±      0.387  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32    2048        N/A         N/A          3  avgt    5        0.415 ±      0.278  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32    4096        N/A         N/A          2  avgt    5        0.834 ±      0.831  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32    4096        N/A         N/A          3  avgt    5        0.898 ±      0.830  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32    8192        N/A         N/A          2  avgt    5        1.631 ±      1.634  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32    8192        N/A         N/A          3  avgt    5        1.822 ±      1.777  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32   16384        N/A         N/A          2  avgt    5        3.182 ±      2.361  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A       32   16384        N/A         N/A          3  avgt    5        3.627 ±      3.609  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000       1        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000       1        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000       2        N/A         N/A          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000       2        N/A         N/A          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000       4        N/A         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000       4        N/A         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000       8        N/A         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000       8        N/A         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000      16        N/A         N/A          2  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000      16        N/A         N/A          3  avgt    5        0.003 ±      0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000      32        N/A         N/A          2  avgt    5        0.006 ±      0.007  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000      32        N/A         N/A          3  avgt    5        0.009 ±      0.010  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000      64        N/A         N/A          2  avgt    5        0.016 ±      0.016  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000      64        N/A         N/A          3  avgt    5        0.023 ±      0.022  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000     128        N/A         N/A          2  avgt    5        0.041 ±      0.041  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000     128        N/A         N/A          3  avgt    5        0.049 ±      0.046  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000     256        N/A         N/A          2  avgt    5        0.093 ±      0.091  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000     256        N/A         N/A          3  avgt    5        0.101 ±      0.093  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000     512        N/A         N/A          2  avgt    5        0.197 ±      0.190  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000     512        N/A         N/A          3  avgt    5        0.212 ±      0.197  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000    1024        N/A         N/A          2  avgt    5        0.407 ±      0.386  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000    1024        N/A         N/A          3  avgt    5        0.474 ±      0.453  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000    2048        N/A         N/A          2  avgt    5        0.900 ±      0.791  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000    2048        N/A         N/A          3  avgt    5        1.016 ±      0.939  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000    4096        N/A         N/A          2  avgt    5        2.006 ±      1.970  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000    4096        N/A         N/A          3  avgt    5        2.096 ±      1.672  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000    8192        N/A         N/A          2  avgt    5        3.879 ±      3.591  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000    8192        N/A         N/A          3  avgt    5        4.440 ±      4.163  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000   16384        N/A         N/A          2  avgt    5        9.186 ±      7.254  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A     1000   16384        N/A         N/A          3  avgt    5        9.634 ±      4.523  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000       1        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000       1        N/A         N/A          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000       2        N/A         N/A          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000       2        N/A         N/A          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000       4        N/A         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000       4        N/A         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000       8        N/A         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000       8        N/A         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000      16        N/A         N/A          2  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000      16        N/A         N/A          3  avgt    5        0.003 ±      0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000      32        N/A         N/A          2  avgt    5        0.006 ±      0.004  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000      32        N/A         N/A          3  avgt    5        0.008 ±      0.008  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000      64        N/A         N/A          2  avgt    5        0.018 ±      0.016  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000      64        N/A         N/A          3  avgt    5        0.024 ±      0.024  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000     128        N/A         N/A          2  avgt    5        0.040 ±      0.036  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000     128        N/A         N/A          3  avgt    5        0.052 ±      0.049  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000     256        N/A         N/A          2  avgt    5        0.087 ±      0.070  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000     256        N/A         N/A          3  avgt    5        0.098 ±      0.075  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000     512        N/A         N/A          2  avgt    5        0.190 ±      0.204  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000     512        N/A         N/A          3  avgt    5        0.232 ±      0.237  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000    1024        N/A         N/A          2  avgt    5        0.441 ±      0.462  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000    1024        N/A         N/A          3  avgt    5        0.499 ±      0.538  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000    2048        N/A         N/A          2  avgt    5        1.087 ±      1.058  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000    2048        N/A         N/A          3  avgt    5        1.174 ±      0.880  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000    4096        N/A         N/A          2  avgt    5        2.426 ±      2.451  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000    4096        N/A         N/A          3  avgt    5        2.808 ±      2.665  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000    8192        N/A         N/A          2  avgt    5        5.251 ±      4.805  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000    8192        N/A         N/A          3  avgt    5        5.675 ±      5.493  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000   16384        N/A         N/A          2  avgt    5       11.633 ±     14.197  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmark                                   N/A   100000   16384        N/A         N/A          3  avgt    5       10.770 ±     10.278  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A          1         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A          1         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A          2         N/A          2  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A          2         N/A          3  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A          4         N/A          2  avgt    5        0.003 ±      0.003  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A          4         N/A          3  avgt    5        0.003 ±      0.003  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A          8         N/A          2  avgt    5        0.005 ±      0.006  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A          8         N/A          3  avgt    5        0.005 ±      0.005  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A         16         N/A          2  avgt    5        0.009 ±      0.008  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A         16         N/A          3  avgt    5        0.010 ±      0.009  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A         32         N/A          2  avgt    5        0.019 ±      0.015  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A         32         N/A          3  avgt    5        0.018 ±      0.015  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A         64         N/A          2  avgt    5        0.037 ±      0.037  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A         64         N/A          3  avgt    5        0.036 ±      0.031  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A        128         N/A          2  avgt    5        0.096 ±      0.115  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A        128         N/A          3  avgt    5        0.095 ±      0.086  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A        256         N/A          2  avgt    5        0.190 ±      0.172  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A        256         N/A          3  avgt    5        0.185 ±      0.188  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A        512         N/A          2  avgt    5        0.283 ±      0.263  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A        512         N/A          3  avgt    5        0.374 ±      0.443  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A       1024         N/A          2  avgt    5        0.713 ±      0.715  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A       1024         N/A          3  avgt    5        0.712 ±      0.713  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A       2048         N/A          2  avgt    5        1.456 ±      1.426  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A       2048         N/A          3  avgt    5        1.381 ±      1.165  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A       4096         N/A          2  avgt    5        2.861 ±      2.624  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A       4096         N/A          3  avgt    5        2.960 ±      2.869  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A       8192         N/A          2  avgt    5        5.663 ±      4.994  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A       8192         N/A          3  avgt    5        6.035 ±      5.988  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A      16384         N/A          2  avgt    5       12.263 ±     12.621  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A       32     N/A      16384         N/A          3  avgt    5       12.163 ±     11.582  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A          1         N/A          2  avgt    5        0.048 ±      0.046  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A          1         N/A          3  avgt    5        0.049 ±      0.054  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A          2         N/A          2  avgt    5        0.064 ±      0.055  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A          2         N/A          3  avgt    5        0.067 ±      0.066  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A          4         N/A          2  avgt    5        0.098 ±      0.075  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A          4         N/A          3  avgt    5        0.101 ±      0.080  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A          8         N/A          2  avgt    5        0.177 ±      0.150  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A          8         N/A          3  avgt    5        0.179 ±      0.174  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A         16         N/A          2  avgt    5        0.355 ±      0.313  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A         16         N/A          3  avgt    5        0.351 ±      0.323  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A         32         N/A          2  avgt    5        0.706 ±      0.578  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A         32         N/A          3  avgt    5        0.693 ±      0.571  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A         64         N/A          2  avgt    5        1.376 ±      1.268  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A         64         N/A          3  avgt    5        1.349 ±      1.088  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A        128         N/A          2  avgt    5        2.691 ±      2.354  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A        128         N/A          3  avgt    5        2.653 ±      2.358  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A        256         N/A          2  avgt    5        5.443 ±      5.375  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A        256         N/A          3  avgt    5        5.427 ±      4.802  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A        512         N/A          2  avgt    5       10.619 ±      8.299  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A        512         N/A          3  avgt    5       10.771 ±     10.298  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A       1024         N/A          2  avgt    5       22.470 ±     22.462  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A       1024         N/A          3  avgt    5       22.335 ±     22.964  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A       2048         N/A          2  avgt    5       44.869 ±     45.222  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A       2048         N/A          3  avgt    5       44.815 ±     45.166  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A       4096         N/A          2  avgt    5       94.066 ±     90.520  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A       4096         N/A          3  avgt    5       88.821 ±     78.540  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A       8192         N/A          2  avgt    5      181.748 ±    213.152  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A       8192         N/A          3  avgt    5      187.579 ±    183.928  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A      16384         N/A          2  avgt    5      404.900 ±    396.699  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A     1000     N/A      16384         N/A          3  avgt    5      456.136 ±    390.466  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A          1         N/A          2  avgt    5       13.637 ±     10.876  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A          1         N/A          3  avgt    5       13.893 ±      9.900  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A          2         N/A          2  avgt    5       19.273 ±     19.210  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A          2         N/A          3  avgt    5       16.134 ±     13.522  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A          4         N/A          2  avgt    5       25.758 ±     27.649  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A          4         N/A          3  avgt    5       25.852 ±     24.588  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A          8         N/A          2  avgt    5       41.647 ±     45.611  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A          8         N/A          3  avgt    5       43.839 ±     49.055  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A         16         N/A          2  avgt    5       92.471 ±     96.682  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A         16         N/A          3  avgt    5       88.588 ±     72.119  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A         32         N/A          2  avgt    5      137.824 ±    126.060  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A         32         N/A          3  avgt    5      141.177 ±    200.568  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A         64         N/A          2  avgt    5      269.849 ±    167.427  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A         64         N/A          3  avgt    5      257.635 ±    256.692  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A        128         N/A          2  avgt    5      557.789 ±    414.641  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A        128         N/A          3  avgt    5      514.069 ±    373.294  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A        256         N/A          2  avgt    5     1197.668 ±    327.459  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A        256         N/A          3  avgt    5     1171.632 ±    227.328  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A        512         N/A          2  avgt    5     2425.701 ±    830.102  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A        512         N/A          3  avgt    5     2330.300 ±    794.844  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A       1024         N/A          2  avgt    5     4857.907 ±    555.085  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A       1024         N/A          3  avgt    5     4938.263 ±   2474.969  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A       2048         N/A          2  avgt    5    10402.365 ±   1217.404  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A       2048         N/A          3  avgt    5    10075.787 ±   1274.616  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A       4096         N/A          2  avgt    5    14683.055 ±   1536.339  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllAndCommitBenchmark                  N/A   100000     N/A       4096         N/A          3  avgt    5    14738.022 ±   1567.036  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A          1         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A          1         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A          2         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A          2         N/A          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A          4         N/A          2  avgt    5        0.002 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A          4         N/A          3  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A          8         N/A          2  avgt    5        0.004 ±      0.004  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A          8         N/A          3  avgt    5        0.004 ±      0.003  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A         16         N/A          2  avgt    5        0.008 ±      0.007  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A         16         N/A          3  avgt    5        0.008 ±      0.008  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A         32         N/A          2  avgt    5        0.016 ±      0.018  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A         32         N/A          3  avgt    5        0.017 ±      0.016  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A         64         N/A          2  avgt    5        0.038 ±      0.049  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A         64         N/A          3  avgt    5        0.031 ±      0.033  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A        128         N/A          2  avgt    5        0.080 ±      0.049  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A        128         N/A          3  avgt    5        0.111 ±      0.167  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A        256         N/A          2  avgt    5        0.150 ±      0.134  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A        256         N/A          3  avgt    5        0.124 ±      0.134  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A        512         N/A          2  avgt    5        0.246 ±      0.297  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A        512         N/A          3  avgt    5        0.244 ±      0.280  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A       1024         N/A          2  avgt    5        0.456 ±      0.420  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A       1024         N/A          3  avgt    5        0.472 ±      0.393  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A       2048         N/A          2  avgt    5        0.872 ±      0.590  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A       2048         N/A          3  avgt    5        1.023 ±      0.977  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A       4096         N/A          2  avgt    5        2.276 ±      2.111  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A       4096         N/A          3  avgt    5        2.256 ±      2.045  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A       8192         N/A          2  avgt    5        4.985 ±      5.188  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A       8192         N/A          3  avgt    5        5.196 ±      5.943  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A      16384         N/A          2  avgt    5       10.572 ±     10.203  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A       32     N/A      16384         N/A          3  avgt    5        9.647 ±      9.221  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A          1         N/A          2  avgt    5        0.019 ±      0.016  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A          1         N/A          3  avgt    5        0.018 ±      0.014  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A          2         N/A          2  avgt    5        0.034 ±      0.031  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A          2         N/A          3  avgt    5        0.035 ±      0.040  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A          4         N/A          2  avgt    5        0.066 ±      0.065  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A          4         N/A          3  avgt    5        0.064 ±      0.054  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A          8         N/A          2  avgt    5        0.132 ±      0.102  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A          8         N/A          3  avgt    5        0.137 ±      0.140  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A         16         N/A          2  avgt    5        0.244 ±      0.140  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A         16         N/A          3  avgt    5        0.265 ±      0.270  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A         32         N/A          2  avgt    5        0.504 ±      0.488  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A         32         N/A          3  avgt    5        0.501 ±      0.457  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A         64         N/A          2  avgt    5        0.994 ±      0.916  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A         64         N/A          3  avgt    5        1.010 ±      0.888  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A        128         N/A          2  avgt    5        1.976 ±      1.533  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A        128         N/A          3  avgt    5        3.119 ±      2.871  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A        256         N/A          2  avgt    5        5.170 ±      5.349  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A        256         N/A          3  avgt    5        4.087 ±      2.562  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A        512         N/A          2  avgt    5        8.086 ±      5.329  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A        512         N/A          3  avgt    5        8.096 ±      6.096  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A       1024         N/A          2  avgt    5       16.015 ±     14.703  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A       1024         N/A          3  avgt    5       16.663 ±     15.610  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A       2048         N/A          2  avgt    5       33.702 ±     35.917  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A       2048         N/A          3  avgt    5       31.763 ±     22.430  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A       4096         N/A          2  avgt    5       73.625 ±     64.275  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A       4096         N/A          3  avgt    5       67.174 ±     59.184  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A       8192         N/A          2  avgt    5      130.750 ±    109.906  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A       8192         N/A          3  avgt    5      128.615 ±     96.972  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A      16384         N/A          2  avgt    5      292.590 ±    346.621  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A     1000     N/A      16384         N/A          3  avgt    5      265.888 ±    246.919  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A          1         N/A          2  avgt    5        6.236 ±      8.724  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A          1         N/A          3  avgt    5        5.035 ±      2.128  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A          2         N/A          2  avgt    5        7.542 ±      5.376  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A          2         N/A          3  avgt    5        7.222 ±      5.506  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A          4         N/A          2  avgt    5       10.733 ±      9.457  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A          4         N/A          3  avgt    5       13.417 ±     14.081  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A          8         N/A          2  avgt    5       19.873 ±     17.403  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A          8         N/A          3  avgt    5       20.454 ±     17.551  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A         16         N/A          2  avgt    5       40.205 ±     38.808  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A         16         N/A          3  avgt    5       37.211 ±     25.742  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A         32         N/A          2  avgt    5       85.616 ±     86.233  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A         32         N/A          3  avgt    5       84.539 ±     97.268  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A         64         N/A          2  avgt    5      158.902 ±    164.235  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A         64         N/A          3  avgt    5      265.156 ±    141.014  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A        128         N/A          2  avgt    5      313.589 ±    182.308  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A        128         N/A          3  avgt    5      304.725 ±    335.057  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A        256         N/A          2  avgt    5      624.975 ±    267.198  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A        256         N/A          3  avgt    5      588.970 ±    445.634  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A        512         N/A          2  avgt    5     1382.936 ±    874.287  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A        512         N/A          3  avgt    5     1342.043 ±   1153.853  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A       1024         N/A          2  avgt    5     2631.680 ±   1088.856  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A       1024         N/A          3  avgt    5     2916.832 ±   1840.347  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A       2048         N/A          2  avgt    5     5312.168 ±    437.943  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A       2048         N/A          3  avgt    5     5480.149 ±   2708.404  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A       4096         N/A          2  avgt    5     6773.867 ±   1215.834  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A       4096         N/A          3  avgt    5     6495.265 ±    152.348  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A       8192         N/A          2  avgt    5    13586.563 ±    896.015  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A       8192         N/A          3  avgt    5    13205.872 ±    376.314  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A      16384         N/A          2  avgt    5    28581.725 ±   5288.407  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.baselinePutAllBenchmark                           N/A   100000     N/A      16384         N/A          3  avgt    5    28184.163 ±   7443.249  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A          1         N/A          2  avgt    5        0.002 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A          1         N/A          3  avgt    5        0.002 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A          2         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A          2         N/A          3  avgt    5        0.003 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A          4         N/A          2  avgt    5        0.003 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A          4         N/A          3  avgt    5        0.004 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A          8         N/A          2  avgt    5        0.007 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A          8         N/A          3  avgt    5        0.007 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A         16         N/A          2  avgt    5        0.009 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A         16         N/A          3  avgt    5        0.014 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A         32         N/A          2  avgt    5        0.017 ±      0.002  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A         32         N/A          3  avgt    5        0.024 ±      0.002  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A         64         N/A          2  avgt    5        0.038 ±      0.005  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A         64         N/A          3  avgt    5        0.035 ±      0.005  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A        128         N/A          2  avgt    5        0.070 ±      0.007  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A        128         N/A          3  avgt    5        0.070 ±      0.008  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A        256         N/A          2  avgt    5        0.106 ±      0.014  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A        256         N/A          3  avgt    5        0.157 ±      0.018  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A        512         N/A          2  avgt    5        0.272 ±      0.023  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A        512         N/A          3  avgt    5        0.400 ±      0.061  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A       1024         N/A          2  avgt    5        0.390 ±      0.041  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A       1024         N/A          3  avgt    5        0.708 ±      0.107  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A       2048         N/A          2  avgt    5        1.255 ±      0.161  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A       2048         N/A          3  avgt    5        1.448 ±      0.049  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A       4096         N/A          2  avgt    5        1.859 ±      0.215  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A       4096         N/A          3  avgt    5        3.054 ±      0.343  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A       8192         N/A          2  avgt    5        4.545 ±      0.635  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A       8192         N/A          3  avgt    5        5.698 ±      0.725  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A      16384         N/A          2  avgt    5        7.161 ±      0.675  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A       32     N/A      16384         N/A          3  avgt    5       10.893 ±      1.938  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A          1         N/A          2  avgt    5        0.122 ±      0.014  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A          1         N/A          3  avgt    5        0.181 ±      0.021  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A          2         N/A          2  avgt    5        0.137 ±      0.010  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A          2         N/A          3  avgt    5        0.220 ±      0.033  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A          4         N/A          2  avgt    5        0.205 ±      0.023  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A          4         N/A          3  avgt    5        0.271 ±      0.023  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A          8         N/A          2  avgt    5        0.283 ±      0.037  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A          8         N/A          3  avgt    5        0.347 ±      0.048  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A         16         N/A          2  avgt    5        0.424 ±      0.039  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A         16         N/A          3  avgt    5        0.535 ±      0.061  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A         32         N/A          2  avgt    5        0.756 ±      0.035  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A         32         N/A          3  avgt    5        1.006 ±      0.146  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A         64         N/A          2  avgt    5        1.366 ±      0.116  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A         64         N/A          3  avgt    5        1.880 ±      0.299  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A        128         N/A          2  avgt    5        2.833 ±      0.337  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A        128         N/A          3  avgt    5        3.682 ±      0.369  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A        256         N/A          2  avgt    5        5.677 ±      0.431  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A        256         N/A          3  avgt    5        7.267 ±      0.965  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A        512         N/A          2  avgt    5       12.012 ±      1.759  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A        512         N/A          3  avgt    5       13.522 ±      0.622  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A       1024         N/A          2  avgt    5       22.267 ±      3.094  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A       1024         N/A          3  avgt    5       28.668 ±      2.898  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A       2048         N/A          2  avgt    5       40.335 ±      5.374  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A       2048         N/A          3  avgt    5       54.564 ±      7.449  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A       4096         N/A          2  avgt    5       87.090 ±      7.298  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A       4096         N/A          3  avgt    5      115.319 ±     11.368  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A       8192         N/A          2  avgt    5      187.998 ±     23.404  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A       8192         N/A          3  avgt    5      207.738 ±     19.241  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A      16384         N/A          2  avgt    5      353.574 ±     64.988  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A     1000     N/A      16384         N/A          3  avgt    5      429.232 ±     39.452  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A          1         N/A          2  avgt    5       31.283 ±      3.770  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A          1         N/A          3  avgt    5       43.626 ±      2.740  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A          2         N/A          2  avgt    5       37.410 ±      4.065  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A          2         N/A          3  avgt    5       49.667 ±      6.672  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A          4         N/A          2  avgt    5       53.730 ±      6.691  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A          4         N/A          3  avgt    5       70.066 ±      9.804  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A          8         N/A          2  avgt    5       83.118 ±     14.284  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A          8         N/A          3  avgt    5      106.257 ±     17.878  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A         16         N/A          2  avgt    5      138.910 ±     24.628  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A         16         N/A          3  avgt    5      182.347 ±     24.927  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A         32         N/A          2  avgt    5      253.921 ±     29.504  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A         32         N/A          3  avgt    5      347.198 ±     48.746  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A         64         N/A          2  avgt    5      481.979 ±     56.210  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A         64         N/A          3  avgt    5      626.360 ±     84.027  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A        128         N/A          2  avgt    5      932.374 ±     82.929  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A        128         N/A          3  avgt    5     1278.222 ±    136.450  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A        256         N/A          2  avgt    5     1948.182 ±    227.927  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A        256         N/A          3  avgt    5     2502.116 ±    186.139  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A        512         N/A          2  avgt    5     3660.031 ±    229.072  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A        512         N/A          3  avgt    5     4983.565 ±     38.754  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A       1024         N/A          2  avgt    5     7341.245 ±    113.197  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A       1024         N/A          3  avgt    5     9686.201 ±    248.623  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A       2048         N/A          2  avgt    5    14782.513 ±    378.049  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A       2048         N/A          3  avgt    5    20122.472 ±    902.521  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A       4096         N/A          2  avgt    5    29572.851 ±    397.502  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A       4096         N/A          3  avgt    5    41959.571 ±   1337.983  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A       8192         N/A          2  avgt    5    59620.722 ±   1257.542  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A       8192         N/A          3  avgt    5   151802.237 ±  34501.470  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A      16384         N/A          2  avgt    5   116634.397 ±   1597.226  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllAndCommitBenchmark                 N/A   100000     N/A      16384         N/A          3  avgt    5   162710.816 ±   8979.073  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A          1         N/A          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A          1         N/A          3  avgt    5        0.002 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A          2         N/A          2  avgt    5        0.003 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A          2         N/A          3  avgt    5        0.004 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A          4         N/A          2  avgt    5        0.003 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A          4         N/A          3  avgt    5        0.007 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A          8         N/A          2  avgt    5        0.009 ±      0.001  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A          8         N/A          3  avgt    5        0.020 ±      0.002  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A         16         N/A          2  avgt    5        0.013 ±      0.002  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A         16         N/A          3  avgt    5        0.030 ±      0.002  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A         32         N/A          2  avgt    5        0.047 ±      0.018  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A         32         N/A          3  avgt    5        0.065 ±      0.008  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A         64         N/A          2  avgt    5        0.121 ±      0.006  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A         64         N/A          3  avgt    5        0.146 ±      0.005  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A        128         N/A          2  avgt    5        0.230 ±      0.008  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A        128         N/A          3  avgt    5        0.316 ±      0.014  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A        256         N/A          2  avgt    5        0.357 ±      0.026  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A        256         N/A          3  avgt    5        0.493 ±      0.009  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A        512         N/A          2  avgt    5        0.745 ±      0.037  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A        512         N/A          3  avgt    5        0.872 ±      0.069  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A       1024         N/A          2  avgt    5        1.142 ±      0.061  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A       1024         N/A          3  avgt    5        2.458 ±      0.160  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A       2048         N/A          2  avgt    5        3.940 ±      0.285  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A       2048         N/A          3  avgt    5        4.154 ±      0.381  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A       4096         N/A          2  avgt    5        5.710 ±      0.559  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A       4096         N/A          3  avgt    5        7.365 ±      0.229  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A       8192         N/A          2  avgt    5       11.029 ±      0.696  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A       8192         N/A          3  avgt    5       17.779 ±      1.387  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A      16384         N/A          2  avgt    5       19.781 ±      1.728  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A       32     N/A      16384         N/A          3  avgt    5       40.501 ±      3.536  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A          1         N/A          2  avgt    5        0.134 ±      0.010  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A          1         N/A          3  avgt    5        0.216 ±      0.019  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A          2         N/A          2  avgt    5        0.313 ±      0.023  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A          2         N/A          3  avgt    5        0.397 ±      0.031  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A          4         N/A          2  avgt    5        0.566 ±      0.026  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A          4         N/A          3  avgt    5        0.890 ±      0.055  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A          8         N/A          2  avgt    5        1.226 ±      0.080  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A          8         N/A          3  avgt    5        1.698 ±      0.090  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A         16         N/A          2  avgt    5        2.338 ±      0.104  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A         16         N/A          3  avgt    5        3.388 ±      0.137  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A         32         N/A          2  avgt    5        4.449 ±      0.250  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A         32         N/A          3  avgt    5        6.553 ±      0.360  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A         64         N/A          2  avgt    5        9.577 ±      0.540  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A         64         N/A          3  avgt    5       13.793 ±      0.965  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A        128         N/A          2  avgt    5       17.874 ±      1.033  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A        128         N/A          3  avgt    5       26.649 ±      1.531  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A        256         N/A          2  avgt    5       38.068 ±      2.467  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A        256         N/A          3  avgt    5       51.432 ±      2.758  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A        512         N/A          2  avgt    5       80.700 ±      5.181  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A        512         N/A          3  avgt    5      129.832 ±      5.487  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A       1024         N/A          2  avgt    5      144.348 ±      9.031  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A       1024         N/A          3  avgt    5      239.915 ±     13.093  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A       2048         N/A          2  avgt    5      311.063 ±     13.271  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A       2048         N/A          3  avgt    5      433.185 ±     21.192  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A       4096         N/A          2  avgt    5      646.702 ±     21.805  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A       4096         N/A          3  avgt    5      915.544 ±     38.296  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A       8192         N/A          2  avgt    5     1285.329 ±     78.991  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A       8192         N/A          3  avgt    5     1814.837 ±     89.760  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A      16384         N/A          2  avgt    5     2296.492 ±     87.352  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A     1000     N/A      16384         N/A          3  avgt    5     3758.105 ±    718.285  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A          1         N/A          2  avgt    5       46.910 ±     57.583  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A          1         N/A          3  avgt    5       62.466 ±     74.394  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A          2         N/A          2  avgt    5       86.206 ±     85.024  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A          2         N/A          3  avgt    5      113.812 ±    134.555  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A          4         N/A          2  avgt    5      184.318 ±    205.154  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A          4         N/A          3  avgt    5      267.609 ±    343.099  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A          8         N/A          2  avgt    5      360.135 ±    386.358  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A          8         N/A          3  avgt    5      578.029 ±    468.931  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A         16         N/A          2  avgt    5      864.126 ±    677.550  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A         16         N/A          3  avgt    5     1137.838 ±    811.660  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A         32         N/A          2  avgt    5     1815.909 ±   1097.872  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A         32         N/A          3  avgt    5     2717.346 ±    336.375  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A         64         N/A          2  avgt    5     4068.212 ±    540.092  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A         64         N/A          3  avgt    5     5188.286 ±    586.576  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A        128         N/A          2  avgt    5     7634.460 ±    695.711  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A        128         N/A          3  avgt    5    10517.324 ±    608.567  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A        256         N/A          2  avgt    5    16349.698 ±   6175.434  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A        256         N/A          3  avgt    5    19928.008 ±   4015.690  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A        512         N/A          2  avgt    5    29395.626 ±  10782.551  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A        512         N/A          3  avgt    5    35055.785 ±   1403.158  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A       1024         N/A          2  avgt    5    50514.409 ±   3669.248  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A       1024         N/A          3  avgt    5    68932.508 ±   2181.456  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A       2048         N/A          2  avgt    5   103266.392 ±   1544.100  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A       2048         N/A          3  avgt    5   138901.791 ±   4550.262  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A       4096         N/A          2  avgt    5   212746.090 ±   4998.501  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A       4096         N/A          3  avgt    5   284669.543 ±   7118.548  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A       8192         N/A          2  avgt    5   431877.199 ±   6641.027  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A       8192         N/A          3  avgt    5   586202.782 ±   4331.264  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A      16384         N/A          2  avgt    5   917706.220 ± 442571.437  ms/op
t.r.s.m.b.putall.ImmutablePutAllBenchmark.immutablePutAllBenchmark                          N/A   100000     N/A      16384         N/A          3  avgt    5  1300161.622 ± 359382.390  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A           1          2  avgt    2       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A           1          3  avgt    2       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A           2          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A           2          3  avgt    4       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A           4          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A           8          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A           8          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A          16          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A          16          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A          32          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A          32          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A          64          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A          64          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A         128          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A         128          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A         256          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A         256          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A         512          2  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A         512          3  avgt    5        0.003 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A        1024          2  avgt    5        0.006 ±      0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A        1024          3  avgt    5        0.005 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A        2048          2  avgt    5        0.010 ±      0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A        2048          3  avgt    5        0.010 ±      0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A        4096          2  avgt    5        0.021 ±      0.030  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A        4096          3  avgt    5        0.019 ±      0.017  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A        8192          2  avgt    5        0.053 ±      0.113  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A        8192          3  avgt    5        0.046 ±      0.046  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A       16384          2  avgt    5        0.092 ±      0.154  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10       32     N/A        N/A       16384          3  avgt    5        0.106 ±      0.122  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A           1          2  avgt    2       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A           1          3  avgt    2       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A           2          2  avgt    4       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A           2          3  avgt    3       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A           4          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A           8          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A           8          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A          16          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A          16          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A          32          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A          32          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A          64          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A          64          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A         128          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A         128          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A         256          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A         256          3  avgt    5        0.001 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A         512          2  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A         512          3  avgt    5        0.003 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A        1024          2  avgt    5        0.005 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A        1024          3  avgt    5        0.005 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A        2048          2  avgt    5        0.010 ±      0.010  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A        2048          3  avgt    5        0.011 ±      0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A        4096          2  avgt    5        0.023 ±      0.017  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A        4096          3  avgt    5        0.021 ±      0.035  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A        8192          2  avgt    5        0.041 ±      0.060  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A        8192          3  avgt    5        0.046 ±      0.068  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A       16384          2  avgt    5        0.095 ±      0.176  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10     1000     N/A        N/A       16384          3  avgt    5        0.087 ±      0.136  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A           1          2  avgt    2       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A           1          3  avgt            ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A           2          2  avgt    3       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A           2          3  avgt    3       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A           4          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A           8          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A           8          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A          16          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A          16          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A          32          2  avgt    5        0.001 ±      0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A          32          3  avgt    5        0.001 ±      0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A          64          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A          64          3  avgt    5        0.001 ±      0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A         128          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A         128          3  avgt    5        0.002 ±      0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A         256          2  avgt    5        0.025 ±      0.209  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A         256          3  avgt    5        0.003 ±      0.019  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A         512          2  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A         512          3  avgt    5        0.003 ±      0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A        1024          2  avgt    5        0.006 ±      0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A        1024          3  avgt    5        0.005 ±      0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A        2048          2  avgt    5        0.013 ±      0.032  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A        2048          3  avgt    5        0.022 ±      0.113  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A        4096          2  avgt    5        0.023 ±      0.016  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A        4096          3  avgt    5        0.023 ±      0.021  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A        8192          2  avgt    5        0.090 ±      0.450  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A        8192          3  avgt    5        0.071 ±      0.286  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A       16384          2  avgt    5        0.150 ±      0.632  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                10   100000     N/A        N/A       16384          3  avgt    5        0.127 ±      0.378  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A           1          2  avgt    2       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A           1          3  avgt    2       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A           2          2  avgt    3       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A           2          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A           4          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A           8          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A           8          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A          16          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A          16          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A          32          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A          32          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A          64          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A          64          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A         128          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A         128          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A         256          2  avgt    5        0.001 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A         256          3  avgt    5        0.001 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A         512          2  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A         512          3  avgt    5        0.003 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A        1024          2  avgt    5        0.005 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A        1024          3  avgt    5        0.005 ±      0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A        2048          2  avgt    5        0.010 ±      0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A        2048          3  avgt    5        0.010 ±      0.011  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A        4096          2  avgt    5        0.022 ±      0.027  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A        4096          3  avgt    5        0.020 ±      0.024  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A        8192          2  avgt    5        0.047 ±      0.061  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A        8192          3  avgt    5        0.041 ±      0.057  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A       16384          2  avgt    5        0.091 ±      0.070  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100       32     N/A        N/A       16384          3  avgt    5        0.136 ±      0.527  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A           1          2  avgt    2       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A           1          3  avgt    2       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A           2          2  avgt    3       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A           2          3  avgt    4       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A           4          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A           8          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A           8          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A          16          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A          16          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A          32          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A          32          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A          64          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A          64          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A         128          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A         128          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A         256          2  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A         256          3  avgt    5        0.001 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A         512          2  avgt    5        0.003 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A         512          3  avgt    5        0.002 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A        1024          2  avgt    5        0.005 ±      0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A        1024          3  avgt    5        0.005 ±      0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A        2048          2  avgt    5        0.012 ±      0.010  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A        2048          3  avgt    5        0.012 ±      0.012  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A        4096          2  avgt    5        0.026 ±      0.033  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A        4096          3  avgt    5        0.046 ±      0.173  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A        8192          2  avgt    5        0.057 ±      0.079  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A        8192          3  avgt    5        0.052 ±      0.062  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A       16384          2  avgt    5        0.136 ±      0.387  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100     1000     N/A        N/A       16384          3  avgt    5        0.085 ±      0.099  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100   100000     N/A        N/A           2          3  avgt    4       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100   100000     N/A        N/A           4          3  avgt            ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100   100000     N/A        N/A           8          3  avgt    4       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100   100000     N/A        N/A         256          3  avgt    2        0.001               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100   100000     N/A        N/A         512          2  avgt    4        0.004 ±      0.014  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100   100000     N/A        N/A         512          3  avgt    5        0.009 ±      0.057  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100   100000     N/A        N/A        1024          2  avgt             0.003               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100   100000     N/A        N/A        4096          2  avgt    5        0.029 ±      0.063  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100   100000     N/A        N/A        4096          3  avgt    4        0.026 ±      0.078  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark               100   100000     N/A        N/A        8192          3  avgt             0.025               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A           1          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A           1          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A           2          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A           2          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A           4          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A           8          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A           8          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A          16          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A          16          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A          32          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A          32          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A          64          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A          64          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A         128          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A         128          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A         256          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A         256          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A         512          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A         512          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A        1024          2  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A        1024          3  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A        2048          2  avgt    5        0.005 ±      0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A        2048          3  avgt    5        0.004 ±      0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A        4096          2  avgt    5        0.009 ±      0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A        4096          3  avgt    5        0.009 ±      0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A        8192          2  avgt    5        0.019 ±      0.022  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A        8192          3  avgt    5        0.019 ±      0.020  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A       16384          2  avgt    5        0.034 ±      0.031  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10       32     N/A        N/A       16384          3  avgt    5        0.038 ±      0.040  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A           1          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A           1          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A           2          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A           2          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A           4          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A           8          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A           8          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A          16          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A          16          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A          32          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A          32          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A          64          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A          64          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A         128          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A         128          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A         256          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A         256          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A         512          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A         512          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A        1024          2  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A        1024          3  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A        2048          2  avgt    5        0.005 ±      0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A        2048          3  avgt    5        0.005 ±      0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A        4096          2  avgt    5        0.009 ±      0.010  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A        4096          3  avgt    5        0.010 ±      0.010  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A        8192          2  avgt    5        0.019 ±      0.017  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A        8192          3  avgt    5        0.019 ±      0.017  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A       16384          2  avgt    5        0.038 ±      0.038  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10     1000     N/A        N/A       16384          3  avgt    5        0.037 ±      0.032  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A           1          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A           1          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A           2          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A           2          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A           4          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A           8          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A           8          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A          16          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A          16          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A          32          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A          32          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A          64          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A          64          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A         128          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A         128          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A         256          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A         256          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A         512          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A         512          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A        1024          2  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A        1024          3  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A        2048          2  avgt    5        0.005 ±      0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A        2048          3  avgt    5        0.005 ±      0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A        4096          2  avgt    5        0.010 ±      0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A        4096          3  avgt    5        0.009 ±      0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A        8192          2  avgt    5        0.019 ±      0.018  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A        8192          3  avgt    5        0.018 ±      0.016  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A       16384          2  avgt    5        0.034 ±      0.025  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                         10   100000     N/A        N/A       16384          3  avgt    5        0.038 ±      0.035  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A           1          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A           1          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A           2          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A           2          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A           4          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A           8          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A           8          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A          16          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A          16          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A          32          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A          32          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A          64          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A          64          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A         128          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A         128          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A         256          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A         256          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A         512          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A         512          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A        1024          2  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A        1024          3  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A        2048          2  avgt    5        0.005 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A        2048          3  avgt    5        0.005 ±      0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A        4096          2  avgt    5        0.009 ±      0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A        4096          3  avgt    5        0.009 ±      0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A        8192          2  avgt    5        0.020 ±      0.020  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A        8192          3  avgt    5        0.019 ±      0.020  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A       16384          2  avgt    5        0.036 ±      0.030  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100       32     N/A        N/A       16384          3  avgt    5        0.037 ±      0.032  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A           1          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A           1          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A           2          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A           2          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A           4          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A           8          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A           8          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A          16          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A          16          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A          32          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A          32          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A          64          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A          64          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A         128          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A         128          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A         256          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A         256          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A         512          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A         512          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A        1024          2  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A        1024          3  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A        2048          2  avgt    5        0.005 ±      0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A        2048          3  avgt    5        0.005 ±      0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A        4096          2  avgt    5        0.009 ±      0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A        4096          3  avgt    5        0.009 ±      0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A        8192          2  avgt    5        0.018 ±      0.013  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A        8192          3  avgt    5        0.018 ±      0.014  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A       16384          2  avgt    5        0.039 ±      0.040  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100     1000     N/A        N/A       16384          3  avgt    5        0.039 ±      0.039  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A           1          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A           1          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A           2          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A           2          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A           4          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A           8          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A           8          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A          16          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A          16          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A          32          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A          32          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A          64          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A          64          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A         128          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A         128          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A         256          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A         256          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A         512          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A         512          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A        1024          2  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A        1024          3  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A        2048          2  avgt    5        0.005 ±      0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A        2048          3  avgt    5        0.005 ±      0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A        4096          2  avgt    5        0.010 ±      0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A        4096          3  avgt    5        0.010 ±      0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A        8192          2  avgt    5        0.020 ±      0.017  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A        8192          3  avgt    5        0.020 ±      0.019  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A       16384          2  avgt    5        0.039 ±      0.036  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                        100   100000     N/A        N/A       16384          3  avgt    5        0.039 ±      0.032  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A           1          2  avgt    2        0.001               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A           1          3  avgt             0.001               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A           2          2  avgt    2       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A           2          3  avgt    3       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A           4          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A           8          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A           8          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A          16          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A          16          3  avgt    5        0.001 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A          32          2  avgt    5        0.002 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A          32          3  avgt    5        0.002 ±      0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A          64          2  avgt    5        0.003 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A          64          3  avgt    5        0.004 ±      0.011  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A         128          2  avgt    5        0.006 ±      0.012  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A         128          3  avgt    5        0.007 ±      0.021  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A         256          2  avgt    5        0.013 ±      0.014  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A         256          3  avgt    5        0.012 ±      0.012  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A         512          2  avgt    5        0.026 ±      0.029  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A         512          3  avgt    5        0.031 ±      0.027  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A        1024          2  avgt    5        0.058 ±      0.048  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A        1024          3  avgt    5        0.063 ±      0.060  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A        2048          2  avgt    5        0.117 ±      0.099  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A        2048          3  avgt    5        0.099 ±      0.088  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A        4096          2  avgt    5        0.255 ±      0.175  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A        4096          3  avgt    5        0.198 ±      0.149  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A        8192          2  avgt    5        0.484 ±      1.317  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A        8192          3  avgt    5        0.440 ±      0.932  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A       16384          2  avgt    5        0.946 ±      2.699  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10       32     N/A        N/A       16384          3  avgt    5        0.681 ±      0.755  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A           1          2  avgt            ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A           1          3  avgt    3        0.001 ±      0.016  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A           2          2  avgt    4       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A           2          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A           4          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A           8          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A           8          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A          16          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A          16          3  avgt    5        0.001 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A          32          2  avgt    5        0.002 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A          32          3  avgt    5        0.002 ±      0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A          64          2  avgt    5        0.003 ±      0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A          64          3  avgt    5        0.003 ±      0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A         128          2  avgt    5        0.007 ±      0.014  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A         128          3  avgt    5        0.007 ±      0.015  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A         256          2  avgt    5        0.015 ±      0.041  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A         256          3  avgt    5        0.019 ±      0.085  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A         512          2  avgt    5        0.025 ±      0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A         512          3  avgt    5        0.031 ±      0.034  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A        1024          2  avgt    5        0.052 ±      0.044  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A        1024          3  avgt    5        0.062 ±      0.038  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A        2048          2  avgt    5        0.127 ±      0.111  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A        2048          3  avgt    5        0.105 ±      0.022  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A        4096          2  avgt    5        0.224 ±      0.392  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A        4096          3  avgt    5        0.217 ±      0.441  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A        8192          2  avgt    5        0.417 ±      0.290  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A        8192          3  avgt    5        0.364 ±      0.182  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A       16384          2  avgt    5        0.850 ±      0.614  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     1000     N/A        N/A       16384          3  avgt    5        0.690 ±      0.173  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A           1          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A           1          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A           2          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A           2          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A           4          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A           4          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A           8          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A           8          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A          16          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A          16          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A          32          2  avgt    5        0.002 ±      0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A          32          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A          64          2  avgt    5        0.003 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A          64          3  avgt    5        0.003 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A         128          2  avgt    5        0.006 ±      0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A         128          3  avgt    5        0.008 ±      0.023  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A         256          2  avgt    5        0.013 ±      0.015  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A         256          3  avgt    5        0.016 ±      0.016  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A         512          2  avgt    5        0.028 ±      0.046  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A         512          3  avgt    5        0.034 ±      0.028  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A        1024          2  avgt    5        0.054 ±      0.060  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A        1024          3  avgt    5        0.095 ±      0.480  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A        2048          2  avgt    5        0.098 ±      0.092  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A        2048          3  avgt    5        0.094 ±      0.095  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A        4096          2  avgt    5        0.172 ±      0.180  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A        4096          3  avgt    5        0.202 ±      0.191  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A        8192          2  avgt    5        0.442 ±      0.444  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A        8192          3  avgt    5        0.458 ±      0.358  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A       16384          2  avgt    5        0.842 ±      0.911  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark         10   100000     N/A        N/A       16384          3  avgt    5        0.800 ±      0.509  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A           1          2  avgt            ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A           1          3  avgt    2       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A           2          2  avgt    3       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A           2          3  avgt    3       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A           4          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A           8          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A           8          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A          16          2  avgt    5        0.001 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A          16          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A          32          2  avgt    5        0.002 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A          32          3  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A          64          2  avgt    5        0.003 ±      0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A          64          3  avgt    5        0.003 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A         128          2  avgt    5        0.008 ±      0.020  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A         128          3  avgt    5        0.009 ±      0.039  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A         256          2  avgt    5        0.012 ±      0.017  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A         256          3  avgt    5        0.015 ±      0.045  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A         512          2  avgt    5        0.026 ±      0.040  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A         512          3  avgt    5        0.024 ±      0.034  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A        1024          2  avgt    5        0.046 ±      0.044  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A        1024          3  avgt    5        0.038 ±      0.038  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A        2048          2  avgt    5        0.078 ±      0.111  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A        2048          3  avgt    5        0.085 ±      0.107  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A        4096          2  avgt    5        0.161 ±      0.172  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A        4096          3  avgt    5        0.154 ±      0.131  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A        8192          2  avgt    5        0.294 ±      0.201  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A        8192          3  avgt    5        0.321 ±      0.344  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A       16384          2  avgt    5        0.627 ±      0.526  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100       32     N/A        N/A       16384          3  avgt    5        0.606 ±      0.532  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A           1          2  avgt             0.002               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A           1          3  avgt    2       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A           2          2  avgt    3       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A           2          3  avgt    4        0.001 ±      0.016  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A           4          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A           8          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A           8          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A          16          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A          16          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A          32          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A          32          3  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A          64          2  avgt    5        0.003 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A          64          3  avgt    5        0.004 ±      0.010  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A         128          2  avgt    5        0.008 ±      0.026  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A         128          3  avgt    5        0.006 ±      0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A         256          2  avgt    5        0.012 ±      0.027  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A         256          3  avgt    5        0.013 ±      0.024  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A         512          2  avgt    5        0.020 ±      0.026  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A         512          3  avgt    5        0.022 ±      0.039  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A        1024          2  avgt    5        0.038 ±      0.032  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A        1024          3  avgt    5        0.038 ±      0.041  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A        2048          2  avgt    5        0.077 ±      0.074  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A        2048          3  avgt    5        0.082 ±      0.122  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A        4096          2  avgt    5        0.204 ±      0.467  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A        4096          3  avgt    5        0.205 ±      0.079  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A        8192          2  avgt    5        0.384 ±      0.316  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A        8192          3  avgt    5        0.387 ±      0.428  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A       16384          2  avgt    5        1.007 ±      3.591  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     1000     N/A        N/A       16384          3  avgt    5        0.716 ±      0.961  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A           1          2  avgt    5        0.004 ±      0.016  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A           1          3  avgt    5        0.006 ±      0.027  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A           2          2  avgt    5        0.002 ±      0.011  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A           2          3  avgt    5        0.003 ±      0.015  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A           4          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A           4          3  avgt    5        0.001 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A           8          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A           8          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A          16          2  avgt    5        0.001 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A          16          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A          32          2  avgt    5        0.002 ±      0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A          32          3  avgt    5        0.003 ±      0.011  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A          64          2  avgt    5        0.004 ±      0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A          64          3  avgt    5        0.006 ±      0.031  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A         128          2  avgt    5        0.006 ±      0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A         128          3  avgt    5        0.006 ±      0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A         256          2  avgt    5        0.013 ±      0.015  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A         256          3  avgt    5        0.011 ±      0.021  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A         512          2  avgt    5        0.028 ±      0.062  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A         512          3  avgt    5        0.023 ±      0.034  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A        1024          2  avgt    5        0.047 ±      0.082  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A        1024          3  avgt    5        0.059 ±      0.133  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A        2048          2  avgt    5        0.084 ±      0.107  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A        2048          3  avgt    5        0.088 ±      0.118  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A        4096          2  avgt    5        0.207 ±      0.313  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A        4096          3  avgt    5        0.214 ±      0.322  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A        8192          2  avgt    5        0.395 ±      0.235  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A        8192          3  avgt    5        0.454 ±      1.357  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A       16384          2  avgt    5        0.704 ±      1.168  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorAndCommitBenchmark        100   100000     N/A        N/A       16384          3  avgt    5        0.711 ±      1.200  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A           1          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A           1          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A           2          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A           2          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A           4          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A           8          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A           8          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A          16          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A          16          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A          32          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A          32          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A          64          2  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A          64          3  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A         128          2  avgt    5        0.003 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A         128          3  avgt    5        0.003 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A         256          2  avgt    5        0.007 ±      0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A         256          3  avgt    5        0.007 ±      0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A         512          2  avgt    5        0.014 ±      0.014  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A         512          3  avgt    5        0.014 ±      0.013  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A        1024          2  avgt    5        0.027 ±      0.025  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A        1024          3  avgt    5        0.027 ±      0.024  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A        2048          2  avgt    5        0.056 ±      0.054  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A        2048          3  avgt    5        0.052 ±      0.036  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A        4096          2  avgt    5        0.108 ±      0.107  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A        4096          3  avgt    5        0.117 ±      0.099  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A        8192          2  avgt    5        0.226 ±      0.207  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A        8192          3  avgt    5        0.213 ±      0.160  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A       16384          2  avgt    5        0.433 ±      0.395  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10       32     N/A        N/A       16384          3  avgt    5        0.428 ±      0.310  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A           1          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A           1          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A           2          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A           2          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A           4          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A           8          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A           8          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A          16          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A          16          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A          32          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A          32          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A          64          2  avgt    5        0.002 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A          64          3  avgt    5        0.002 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A         128          2  avgt    5        0.003 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A         128          3  avgt    5        0.003 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A         256          2  avgt    5        0.007 ±      0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A         256          3  avgt    5        0.007 ±      0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A         512          2  avgt    5        0.013 ±      0.011  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A         512          3  avgt    5        0.014 ±      0.013  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A        1024          2  avgt    5        0.027 ±      0.020  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A        1024          3  avgt    5        0.027 ±      0.023  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A        2048          2  avgt    5        0.055 ±      0.047  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A        2048          3  avgt    5        0.055 ±      0.055  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A        4096          2  avgt    5        0.104 ±      0.074  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A        4096          3  avgt    5        0.105 ±      0.083  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A        8192          2  avgt    5        0.218 ±      0.185  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A        8192          3  avgt    5        0.213 ±      0.186  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A       16384          2  avgt    5        0.414 ±      0.292  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10     1000     N/A        N/A       16384          3  avgt    5        0.445 ±      0.438  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A           1          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A           1          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A           2          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A           2          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A           4          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A           8          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A           8          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A          16          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A          16          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A          32          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A          32          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A          64          2  avgt    5        0.002 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A          64          3  avgt    5        0.002 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A         128          2  avgt    5        0.003 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A         128          3  avgt    5        0.004 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A         256          2  avgt    5        0.008 ±      0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A         256          3  avgt    5        0.007 ±      0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A         512          2  avgt    5        0.014 ±      0.014  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A         512          3  avgt    5        0.016 ±      0.014  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A        1024          2  avgt    5        0.034 ±      0.029  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A        1024          3  avgt    5        0.033 ±      0.031  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A        2048          2  avgt    5        0.065 ±      0.053  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A        2048          3  avgt    5        0.064 ±      0.059  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A        4096          2  avgt    5        0.126 ±      0.094  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A        4096          3  avgt    5        0.124 ±      0.109  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A        8192          2  avgt    5        0.231 ±      0.156  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A        8192          3  avgt    5        0.253 ±      0.166  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A       16384          2  avgt    5        0.458 ±      0.407  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                  10   100000     N/A        N/A       16384          3  avgt    5        0.540 ±      0.473  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A           1          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A           1          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A           2          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A           2          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A           4          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A           8          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A           8          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A          16          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A          16          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A          32          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A          32          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A          64          2  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A          64          3  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A         128          2  avgt    5        0.004 ±      0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A         128          3  avgt    5        0.004 ±      0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A         256          2  avgt    5        0.007 ±      0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A         256          3  avgt    5        0.008 ±      0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A         512          2  avgt    5        0.015 ±      0.014  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A         512          3  avgt    5        0.015 ±      0.012  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A        1024          2  avgt    5        0.030 ±      0.027  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A        1024          3  avgt    5        0.029 ±      0.021  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A        2048          2  avgt    5        0.046 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A        2048          3  avgt    5        0.045 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A        4096          2  avgt    5        0.118 ±      0.108  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A        4096          3  avgt    5        0.119 ±      0.112  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A        8192          2  avgt    5        0.245 ±      0.223  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A        8192          3  avgt    5        0.234 ±      0.224  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A       16384          2  avgt    5        0.484 ±      0.462  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100       32     N/A        N/A       16384          3  avgt    5        0.470 ±      0.411  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A           1          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A           1          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A           2          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A           2          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A           4          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A           8          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A           8          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A          16          2  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A          16          3  avgt    5       ? 10?³               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A          32          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A          32          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A          64          2  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A          64          3  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A         128          2  avgt    5        0.004 ±      0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A         128          3  avgt    5        0.004 ±      0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A         256          2  avgt    5        0.007 ±      0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A         256          3  avgt    5        0.008 ±      0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A         512          2  avgt    5        0.016 ±      0.016  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A         512          3  avgt    5        0.015 ±      0.012  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A        1024          2  avgt    5        0.032 ±      0.038  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A        1024          3  avgt    5        0.029 ±      0.029  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A        2048          2  avgt    5        0.059 ±      0.053  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A        2048          3  avgt    5        0.058 ±      0.047  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A        4096          2  avgt    5        0.132 ±      0.146  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A        4096          3  avgt    5        0.120 ±      0.098  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A        8192          2  avgt    5        0.236 ±      0.176  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A        8192          3  avgt    5        0.242 ±      0.212  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A       16384          2  avgt    5        0.467 ±      0.357  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100     1000     N/A        N/A       16384          3  avgt    5        0.500 ±      0.496  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A           1          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A           1          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A           2          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A           2          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A           4          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A           4          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A           8          2  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A           8          3  avgt    5       ? 10??               ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A          16          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A          16          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A          32          2  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A          32          3  avgt    5        0.001 ±      0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A          64          2  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A          64          3  avgt    5        0.002 ±      0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A         128          2  avgt    5        0.004 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A         128          3  avgt    5        0.004 ±      0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A         256          2  avgt    5        0.009 ±      0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A         256          3  avgt    5        0.009 ±      0.010  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A         512          2  avgt    5        0.018 ±      0.018  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A         512          3  avgt    5        0.016 ±      0.018  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A        1024          2  avgt    5        0.036 ±      0.037  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A        1024          3  avgt    5        0.036 ±      0.038  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A        2048          2  avgt    5        0.066 ±      0.066  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A        2048          3  avgt    5        0.067 ±      0.057  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A        4096          2  avgt    5        0.126 ±      0.105  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A        4096          3  avgt    5        0.128 ±      0.088  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A        8192          2  avgt    5        0.279 ±      0.196  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A        8192          3  avgt    5        0.256 ±      0.212  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A       16384          2  avgt    5        0.573 ±      0.581  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableGetDiffCursorBenchmark                 100   100000     N/A        N/A       16384          3  avgt    5        0.511 ±      0.461  ms/op

Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

See https://docs.gradle.org/7.3.1/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 18h 12m 9s
13 actionable tasks: 2 executed, 11 up-to-date
